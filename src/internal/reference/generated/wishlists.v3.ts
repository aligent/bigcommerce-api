/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/wishlists": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Wishlists
         * @description Returns a list of wishlists. Optional filter parameters can be passed in.
         */
        readonly get: operations["getWishlists"];
        /**
         * Create a Wishlist
         * @description Creates a wishlist and wishlist item. More than one item can be added in the POST.
         *
         *     **Required Fields**
         *     * name
         *     * customer_id
         */
        readonly post: operations["createWishlist"];
    };
    readonly "/wishlists/{wishlist_id}/items/{item_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the Wishlist. */
                readonly wishlist_id: components["parameters"]["WishlistIdPath"];
                readonly item_id: components["parameters"]["ItemIdPath"];
            };
            readonly cookie?: never;
        };
        /**
         * Delete Wishlist Item
         * @description Deletes a wishlist item.
         */
        readonly delete: operations["deleteWishlistItem"];
    };
    readonly "/wishlists/{wishlist_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the Wishlist. */
                readonly wishlist_id: components["parameters"]["WishlistIdPath"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Wishlist
         * @description Returns a single wishlist.
         */
        readonly get: operations["getWishlist"];
        /**
         * Update a Wishlist
         * @description Updates a wishlist.
         *
         *     Use this endpoint to update existing wishlist items, change the wishlist ºs name and whether the wishlist is available publicly. To add or delete a wishlist item, see [Wishlist Items](/docs/rest-management/wishlists/wishlists-items).
         */
        readonly put: operations["updateWishlist"];
        /**
         * Delete a Wishlist
         * @description Deletes a wishlist.
         */
        readonly delete: operations["deleteWishlist"];
    };
    readonly "/wishlists/{wishlist_id}/items": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the Wishlist. */
                readonly wishlist_id: components["parameters"]["WishlistIdPath"];
            };
            readonly cookie?: never;
        };
        /**
         * Add Wishlist Item
         * @description Adds a wishlist item. More than one item can be added at a time.
         */
        readonly post: operations["addWishlistItem"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** wishlist_Post */
        readonly wishlist_Post: {
            /**
             * Format: int32
             * @description The customer id.
             * @example 12
             */
            readonly customer_id: number;
            /**
             * @description Whether the wishlist is available to the public.
             * @example false
             */
            readonly is_public?: boolean;
            /**
             * @description The title of the wishlist.
             * @example School Shopping
             */
            readonly name?: string;
            /** @description Array of wishlist items. */
            readonly items?: readonly {
                /**
                 * Format: int32
                 * @description The ID of the product.
                 * @example 12
                 */
                readonly product_id?: number;
                /**
                 * Format: int32
                 * @description The variant ID of the product.
                 * @example 152
                 */
                readonly variant_id?: number;
            }[];
        };
        /** wishlist_Put */
        readonly wishlist_Put: {
            /**
             * Format: int32
             * @description The customer ID. A read-only value.
             */
            readonly customer_id: number;
            /** @description Whether the wishlist is available to the public. */
            readonly is_public?: boolean;
            /** @description The title of the wishlist. */
            readonly name?: string;
            /** @description Array of wishlist items. */
            readonly items: readonly {
                /**
                 * Format: int32
                 * @description The ID of the item.
                 * @example 12
                 */
                readonly id?: number;
                /**
                 * Format: int32
                 * @description The ID of the product.
                 * @example 55
                 */
                readonly product_id?: number;
                /**
                 * Format: int32
                 * @description The variant ID of the product.
                 * @example 22
                 */
                readonly variant_id?: number;
            }[];
        };
        /** wishlist_Full */
        readonly wishlist_Full: {
            /**
             * Format: int32
             * @description Wishlist ID, provided after creating a wishlist with a POST.
             * @example 30
             */
            readonly id?: number;
            /**
             * Format: int32
             * @description The ID the customer to which the wishlist belongs.
             * @example 12
             */
            readonly customer_id?: number;
            /**
             * @description The name of the wishlist.
             * @example Christmas List
             */
            readonly name?: string;
            /**
             * @description Whether the wishlist is available to the public.
             * @example true
             */
            readonly is_public?: boolean;
            /**
             * Format: uuid
             * @description The token of the wishlist. This is created internally within BigCommerce. The wishlist ID is to be used for external apps. Read-Only.
             * @example 02d55481-13eb-4d1e-9d79-9062b518570d
             */
            readonly token?: string;
            /** @description Array of wishlist items. */
            readonly items?: readonly components["schemas"]["wishlistItem_Full"][];
        };
        /** wishlistItem_Full */
        readonly wishlistItem_Full: {
            /**
             * Format: int32
             * @description The ID of the item.
             * @example 12
             */
            readonly id?: number;
            /**
             * Format: int32
             * @description The ID of the product.
             * @example 55
             */
            readonly product_id?: number;
            /**
             * Format: int32
             * @description The variant ID of the product.
             * @example 22
             */
            readonly variant_id?: number;
        };
        /** wishlistItem_Post */
        readonly wishlistItem_Post: {
            readonly items?: readonly {
                /** @example 12 */
                readonly product_id?: number;
                /** @example 152 */
                readonly variant_id?: number;
            }[];
        };
        /**
         * pagination
         * @description Data about the response, including pagination and collection totals.
         */
        readonly pagination: {
            /**
             * Format: int32
             * @description Total number of items in the result set.
             */
            readonly total?: number;
            /**
             * Format: int32
             * @description Total number of items in the collection response.
             */
            readonly count?: number;
            /**
             * Format: int32
             * @description The amount of items returned in the collection per page, controlled by the limit parameter.
             */
            readonly per_page?: number;
            /**
             * Format: int32
             * @description The page you are currently on within the collection.
             */
            readonly current_page?: number;
            /**
             * Format: int32
             * @description The total number of pages in the collection.
             */
            readonly total_pages?: number;
        };
        /** metaCollection */
        readonly metaCollection: {
            readonly pagination?: components["schemas"]["pagination"];
        };
    };
    responses: never;
    parameters: {
        /** @description ID of the Wishlist. */
        readonly WishlistIdPath: number;
        readonly ItemIdPath: number;
        /** @description All wishlists relating to the customer. */
        readonly CustomerIdQuery: number;
        /** @description The page number of results to return. 1 is the default and starts from record 0. Use in conjunction with the limit query parameter to request a specific set of records. */
        readonly PageQuery: number;
        /** @description The number of items to return per page. Default is 50 and maximum is 250. */
        readonly LimitQuery: number;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getWishlists: {
        readonly parameters: {
            readonly query?: {
                /** @description All wishlists relating to the customer. */
                readonly customer_id?: components["parameters"]["CustomerIdQuery"];
                /** @description The page number of results to return. 1 is the default and starts from record 0. Use in conjunction with the limit query parameter to request a specific set of records. */
                readonly page?: components["parameters"]["PageQuery"];
                /** @description The number of items to return per page. Default is 50 and maximum is 250. */
                readonly limit?: components["parameters"]["LimitQuery"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["wishlist_Full"][];
                        readonly meta?: components["schemas"]["metaCollection"];
                    };
                };
            };
            /** @description Authentication information is missing or invalid. */
            readonly 401: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Format: int32 */
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description Internal server error. */
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Format: int32 */
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly createWishlist: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["wishlist_Post"];
            };
        };
        readonly responses: {
            readonly 201: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["wishlist_Full"];
                        /** @description Response metadata. */
                        readonly meta?: {
                            readonly [key: string]: unknown;
                        };
                    };
                };
            };
            /** @description Authentication information is missing or invalid. */
            readonly 401: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Format: int32 */
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description Internal server error. */
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Format: int32 */
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly deleteWishlistItem: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the Wishlist. */
                readonly wishlist_id: components["parameters"]["WishlistIdPath"];
                readonly item_id: components["parameters"]["ItemIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["wishlist_Full"];
                        /** @description Response metadata. */
                        readonly meta?: {
                            readonly [key: string]: unknown;
                        };
                    };
                };
            };
            /** @description Authentication information is missing or invalid. */
            readonly 401: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Format: int32 */
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description Wishlist not found. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": Record<string, unknown>;
                };
            };
            /** @description Internal server error. */
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Format: int32 */
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly getWishlist: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the Wishlist. */
                readonly wishlist_id: components["parameters"]["WishlistIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["wishlist_Full"];
                        /** @description Response metadata. */
                        readonly meta?: {
                            readonly [key: string]: unknown;
                        };
                    };
                };
            };
            /** @description Authentication information is missing or invalid. */
            readonly 401: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Format: int32 */
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description Wishlist not found. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": Record<string, unknown>;
                };
            };
            /** @description Internal server error. */
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Format: int32 */
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly updateWishlist: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description ID of the Wishlist. */
                readonly wishlist_id: components["parameters"]["WishlistIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["wishlist_Put"];
            };
        };
        readonly responses: {
            readonly 201: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["wishlist_Full"];
                        /** @description Response metadata. */
                        readonly meta?: {
                            readonly [key: string]: unknown;
                        };
                    };
                };
            };
            /** @description Authentication information is missing or invalid. */
            readonly 401: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Format: int32 */
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description Internal server error. */
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Format: int32 */
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly deleteWishlist: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the Wishlist. */
                readonly wishlist_id: components["parameters"]["WishlistIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication information is missing or invalid. */
            readonly 401: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Format: int32 */
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description Internal server error. */
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Format: int32 */
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly addWishlistItem: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description ID of the Wishlist. */
                readonly wishlist_id: components["parameters"]["WishlistIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["wishlistItem_Post"];
            };
        };
        readonly responses: {
            readonly 201: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["wishlist_Full"];
                        /** @description Response metadata. */
                        readonly meta?: {
                            readonly [key: string]: unknown;
                        };
                    };
                };
            };
            /** @description Authentication information is missing or invalid. */
            readonly 401: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Format: int32 */
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description Wishlist not found. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            readonly 500: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
