/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/currencies": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Currencies
         * @description Returns a list of all store *Currency*.
         */
        readonly get: operations["getCurrencies"];
        /**
         * Create a Currency
         * @description Creates *Currency*.
         *
         *     **Required Fields**
         *     * name
         *     * currency_code
         *     * currency_exchange_rate
         *     * token_location
         *     * token
         *     * decimal_token
         *     * thousands_token
         *     * decimal_places
         *
         *     **Read-Only Fields**
         *     * id
         *     * last_updated
         *
         *
         *     The `is_default` property can only be set to true. The value of `is_default` cannot be unset, only overridden. To change the storeʼs default currency in the BigCommerce control panel, please see [Managing Currencies (Help Center)](https://support.bigcommerce.com/s/article/Managing-Currencies-Beta).
         */
        readonly post: operations["createCurrency"];
        /**
         * Delete All Currencies
         * @description Deletes all non-default store currencies.
         */
        readonly delete: operations["deleteCurrencies"];
    };
    readonly "/currencies/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the subject currency. */
                readonly id: components["parameters"]["CurrencyIdPath"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Currency
         * @description Returns a single *Currency*.
         */
        readonly get: operations["getCurrency"];
        /**
         * Update a Currency
         * @description Updates a *Currency*.
         *
         *     **Read-Only Fields**
         *
         *     * id
         *     * last_updated
         *     * currency_code
         *
         *
         *     The `is_default` property can only be set to true. The value of `is_default` cannot be unset, only overridden.
         */
        readonly put: operations["updateCurrency"];
        /**
         * Delete a Currency
         * @description Deletes a *Currency*.
         *
         *     If a currencyʼs `is_default` property is set to true, this currency cannot be deleted.
         */
        readonly delete: operations["deleteCurrency"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * currency_Post
         * @description Currency Object
         * @example {
         *       "is_default": false,
         *       "country_iso2": "EU",
         *       "currency_code": "EUR",
         *       "currency_exchange_rate": "0.849",
         *       "auto_update": true,
         *       "token_location": "left",
         *       "token": "€",
         *       "decimal_token": ".",
         *       "thousands_token": ",",
         *       "decimal_places": 2,
         *       "name": "Euro",
         *       "enabled": false
         *     }
         */
        readonly currency_Post: {
            /**
             * @description Specifies the store’s default currency display format. For write operations, only true value is accepted. When set to true, it cannot be unset, only overridden.
             * @example false
             */
            readonly is_default?: boolean;
            /**
             * @description 2-letter ISO Alpha-2 code for this currency’s country.
             * @example EU
             */
            readonly country_iso2?: string;
            /**
             * @description 3-letter ISO 4217 code for this currency.
             * @example EUR
             */
            readonly currency_code: string;
            /**
             * @description Amount of this currency that is equivalent to one U.S. dollar.(Float, Float as String, Integer)
             * @example 0.849
             */
            readonly currency_exchange_rate: string;
            /**
             * @description Specifies whether to use the Open Exchange Rates service to update the currency conversion. A value of false specifies a static conversion value. auto_update only applies to non-transactional currencies.
             * @example true
             */
            readonly auto_update?: boolean;
            /**
             * @description Specifies whether this currency’s symbol appears to the “left” or “right” of the numeric amount.
             * @example left
             */
            readonly token_location: string;
            /**
             * @description Symbol for this currency.
             * @example €
             */
            readonly token: string;
            /**
             * @description Symbol used as the decimal separator in this currency.
             * @example .
             */
            readonly decimal_token: string;
            /**
             * @description Symbol used as the thousands separator in this currency.
             * @example ,
             */
            readonly thousands_token: string;
            /**
             * @description Number of decimal places to show for this currency.
             * @example 2
             */
            readonly decimal_places: number;
            /**
             * @description Name of the currency.
             * @example Euro
             */
            readonly name: string;
            /**
             * @description If the currency is active on the store.
             * @example false
             */
            readonly enabled?: boolean;
            /**
             * @description Indicates if the currency is set as transactional or not. False means display only currency
             * @example false
             */
            readonly is_transactional?: boolean;
        };
        /**
         * currency_Put
         * @description Currency Object
         * @example {
         *       "currency_exchange_rate": "0.849",
         *       "token_location": "left",
         *       "token": "€",
         *       "decimal_token": ".",
         *       "thousands_token": ",",
         *       "decimal_places": 2,
         *       "name": "Euro"
         *     }
         */
        readonly currency_Put: {
            /**
             * @description Specifies the store’s default currency display format. For write operations, only true value is accepted. When set to true, it cannot be unset, only overridden.
             * @example false
             */
            readonly is_default?: boolean;
            /**
             * @description 2-letter ISO Alpha-2 code for this currency’s country.
             * @example EU
             */
            readonly country_iso2?: string;
            /**
             * @description Amount of this currency that is equivalent to one U.S. dollar.(Float, Float as String, Integer)
             * @example 0.849
             */
            readonly currency_exchange_rate?: string;
            /**
             * @description Specifies whether to use the Open Exchange Rates service to update the currency conversion. A value of false specifies a static conversion value. auto_update only applies to non-transactional currencies.
             * @example true
             */
            readonly auto_update?: boolean;
            /**
             * @description Specifies whether this currency’s symbol appears to the “left” or “right” of the numeric amount.
             * @example left
             */
            readonly token_location?: string;
            /**
             * @description Symbol for this currency.
             * @example €
             */
            readonly token?: string;
            /**
             * @description Symbol used as the decimal separator in this currency.
             * @example .
             */
            readonly decimal_token?: string;
            /**
             * @description Symbol used as the thousands separator in this currency.
             * @example ,
             */
            readonly thousands_token?: string;
            /**
             * @description Number of decimal places to show for this currency.
             * @example 2
             */
            readonly decimal_places?: number;
            /**
             * @description Name of the currency.
             * @example Euro
             */
            readonly name?: string;
            /**
             * @description If the currency is active on the store.
             * @example false
             */
            readonly enabled?: boolean;
            /**
             * @description Indicates if the currency is set as transactional or not. False means display only currency
             * @example false
             */
            readonly is_transactional?: boolean;
        };
        /**
         * currency_Base
         * @description Currency Object
         * @example {
         *       "id": 2,
         *       "is_default": false,
         *       "last_updated": "Tue, 12 Jun 2018 14:41:56 +0000\"",
         *       "country_iso2": "EU",
         *       "currency_code": "EUR",
         *       "currency_exchange_rate": "0.849",
         *       "auto_update": true,
         *       "token_location": "left",
         *       "token": "€",
         *       "decimal_token": ".",
         *       "thousands_token": ",",
         *       "decimal_places": 2,
         *       "name": "Euro",
         *       "enabled": false
         *     }
         */
        readonly currency_Base: {
            /**
             * @description Specifies the store’s default currency display format. For write operations, only true value is accepted. When set to true, it cannot be unset, only overridden.
             * @example false
             */
            readonly is_default?: boolean;
            /**
             * @description 2-letter ISO Alpha-2 code for this currency’s country.
             * @example EU
             */
            readonly country_iso2?: string;
            /**
             * @description Default 3-letter ISO 4217 code for this currency.
             * @example [
             *       "EU"
             *     ]
             */
            readonly default_for_country_codes?: readonly string[];
            /**
             * @description 3-letter ISO 4217 code for this currency.
             * @example EUR
             */
            readonly currency_code?: string;
            /**
             * @description Amount of this currency that is equivalent to one U.S. dollar.(Float, Float as String, Integer)
             * @example 0.849
             */
            readonly currency_exchange_rate?: string;
            /**
             * @description Specifies whether to use the Open Exchange Rates service to update the currency conversion. A value of false specifies a static conversion value. auto_update only applies to non-transactional currencies.
             * @example true
             */
            readonly auto_update?: boolean;
            /**
             * @description Specifies whether this currency’s symbol appears to the “left” or “right” of the numeric amount.
             * @example left
             */
            readonly token_location?: string;
            /**
             * @description Symbol for this currency.
             * @example €
             */
            readonly token?: string;
            /**
             * @description Symbol used as the decimal separator in this currency.
             * @example .
             */
            readonly decimal_token?: string;
            /**
             * @description Symbol used as the thousands separator in this currency.
             * @example ,
             */
            readonly thousands_token?: string;
            /**
             * @description Number of decimal places to show for this currency.
             * @example 2
             */
            readonly decimal_places?: number;
            /**
             * @description Name of the currency.
             * @example Euro
             */
            readonly name?: string;
            /**
             * @description If the currency is active on the store.
             * @example false
             */
            readonly enabled?: boolean;
            /**
             * @description Indicates if the currency is set as transactional or not. False means display only currency
             * @example true
             */
            readonly is_transactional?: boolean;
            /**
             * @description Default currency name
             * @example false
             */
            readonly use_default_name?: boolean;
        };
        /** currency_Full */
        readonly currency_Full: components["schemas"]["currency_Base"] & {
            /**
             * @description ID of the currency. Read only.
             * @example 2
             */
            readonly id?: number;
            /**
             * Format: date-time
             * @description Date the currency was last updated, created or modified.
             */
            readonly last_updated?: string;
        };
    };
    responses: {
        readonly currencyCollection_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": readonly components["schemas"]["currency_Full"][];
            };
        };
        readonly currency_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["currency_Full"];
            };
        };
    };
    parameters: {
        readonly StoreHash: string;
        /** @description The ID of the subject currency. */
        readonly CurrencyIdPath: string;
        /** @description Specifies the page number in a limited (paginated) list of currencies.
         *      */
        readonly PageNumberQuery: number;
        /** @description Controls the number of items per page in a limited (paginated) list of currencies.
         *      */
        readonly LimitQuery: number;
        readonly Accept: string;
        readonly ContentType: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getCurrencies: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of currencies.
                 *      */
                readonly page?: components["parameters"]["PageNumberQuery"];
                /** @description Controls the number of items per page in a limited (paginated) list of currencies.
                 *      */
                readonly limit?: components["parameters"]["LimitQuery"];
            };
            readonly header?: {
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": readonly components["schemas"]["currency_Full"][];
                };
            };
        };
    };
    readonly createCurrency: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                readonly Accept?: components["parameters"]["Accept"];
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["currency_Post"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["currency_Full"];
                };
            };
        };
    };
    readonly deleteCurrencies: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly [key: string]: unknown;
                    };
                };
            };
        };
    };
    readonly getCurrency: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the subject currency. */
                readonly id: components["parameters"]["CurrencyIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["currency_Full"];
                };
            };
        };
    };
    readonly updateCurrency: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                readonly Accept?: components["parameters"]["Accept"];
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the subject currency. */
                readonly id: components["parameters"]["CurrencyIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["currency_Put"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["currency_Full"];
                };
            };
        };
    };
    readonly deleteCurrency: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the subject currency. */
                readonly id: components["parameters"]["CurrencyIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly [key: string]: unknown;
                    };
                };
            };
        };
    };
}
