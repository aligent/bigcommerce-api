/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/hooks": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Webhooks
         * @description Returns a list of all webhooks on a store associated to the `client_id` used to authenticate the request.
         *
         *     *Note: BigCommerce determines the `client_id` from the `access_token`.*
         */
        readonly get: operations["getWebhooks"];
        /**
         * Create a Webhook
         * @description Creates a webhook. Only one webhook at a time can be created. Custom headers can be added. Destination URL must be served on port 443 (custom ports are not currently supported).
         */
        readonly post: operations["createWebhooks"];
    };
    readonly "/hooks/{webhook_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly path: {
                /** @description The ID of a Webhook. */
                readonly webhook_id: components["parameters"]["WebhookId"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Webhook
         * @description Return a webhook by ID.
         */
        readonly get: operations["getWebhook"];
        /**
         * Update a Webhook
         * @description Updates a webhook. You can add custom headers. At least one field is required to perform an update.
         */
        readonly put: operations["updateWebhook"];
        /**
         * Delete a Webhook
         * @description Deletes a webhook. Only one webhook at a time can be deleted. When a webhook is deleted, it is returned in the response as a 200 OK.
         */
        readonly delete: operations["deleteWebhook"];
    };
    readonly "/hooks/admin": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Admin Info
         * @description List all notification emails, webhooks, and denylisted domains associated with the API account.
         */
        readonly get: operations["getHooksAdmin"];
        /**
         * Upsert Email Notifications
         * @description Update email addresses that are sent notification emails when any domain associated with the API account is denylisted or when a webhook is deactivated. Supports `upsert` functionality in the case that no email address exists yet.
         *
         */
        readonly put: operations["updateHooksAdmin"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * store/cart/*
         * @description Fires for each of the following events:
         *     * `store/cart/created`
         *     * `store/cart/updated`
         *     * `store/cart/deleted`
         *     * `store/cart/couponApplied`
         *     * `store/cart/abandoned`
         *     * `store/cart/converted`
         *     * `store/cart/lineItem`
         *
         *     See individual events for more information.
         */
        readonly store_cart_wildcard: unknown;
        /**
         * store/cart/created
         * @description This webhook fires on new cart creation when any of the following occur:
         *     * a storefront shopper adds their first product to a cart during a new session
         *     * an application makes a successful `POST` request to `/carts` using either the [REST Storefront](/docs/rest-storefront/carts#create-a-cart) API or the [REST Management](/docs/rest-management/carts/carts-single#create-a-cart) API
         *     * a storefront makes a successful call to create a cart using the [GraphQL Storefront API](/docs/storefront/cart-checkout/guide/graphql-storefront)
         *
         *     Cart creation also fires the `store/cart/updated` webhook.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/cart/created",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "cart",
         *         "id": "09346904-4175-44fd-be53-f7e598531b6c"
         *       }
         *     }
         *     ```
         */
        readonly store_cart_created: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. */
            readonly data?: {
                /**
                 * @description can be `cart` or `cart_line_item`
                 * @example cart
                 * @enum {string}
                 */
                readonly type?: "cart" | "cart_line_item";
                /**
                 * @description ID of the cart
                 * @example 09346904-4175-44fd-be53-f7e598531b6c
                 */
                readonly id?: string;
            };
        };
        /**
         * store/cart/updated
         * @description Fires when one of the following occurs:
         *     * A cartʼs line items are modified by adding a new item to a cart, updating an existing itemʼs quantity, or deleting an item.
         *     * A shopper enters or changes their email address during guest checkout. This includes signing in to a customer account after creating a guest cart, which associates the accountʼs email address with the cart.
         *
         *     The `store/cart/created` webhook firing also triggers this webhook because adding a product to an empty cart is considered an update.
         *
         *     Changes to the following fields trigger this event:
         *     * Quantity
         *     * Item Price
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/cart/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "cart",
         *         "id": "09346904-4175-44fd-be53-f7e598531b6c"
         *       }
         *     }
         *     ```
         */
        readonly store_cart_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. */
            readonly data?: {
                /**
                 * @description can be `cart` or `cart_line_item`
                 * @example cart
                 */
                readonly type?: string;
                /**
                 * @description ID of the cart
                 * @example 09346904-4175-44fd-be53-f7e598531b6c
                 */
                readonly id?: string;
            };
        };
        /**
         * store/cart/deleted
         * @description Fires when a cart is deleted. Carts are deleted in two ways; when all items are removed from a cart, and when an API consumer explicitly removes the cart using a `DELETE` request. Cart deletion ends the cart lifecycle. The `store/cart/updated` webhook also fires when the last item is removed.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/cart/deleted",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "cart",
         *         "id": "09346904-4175-44fd-be53-f7e598531b6c"
         *       }
         *     }
         *     ```
         */
        readonly store_cart_deleted: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. */
            readonly data?: {
                /**
                 * @description can be `cart` or `cart_line_item`
                 * @example cart
                 */
                readonly type?: string;
                /**
                 * @description ID of the cart
                 * @example 09346904-4175-44fd-be53-f7e598531b6c
                 */
                readonly id?: string;
            };
        };
        /**
         * store/cart/couponApplied
         * @description Fires when a new coupon code is applied to a cart. The webhook request body includes the ID of the coupon code.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/cart/couponApplied",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "cart",
         *         "id": "09346904-4175-44fd-be53-f7e598531b6c",
         *         "couponId": 1
         *       }
         *     }
         *     ```
         */
        readonly store_cart_couponApplied: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description can be `cart` or `cart_line_item`
                 * @example cart
                 */
                readonly type?: string;
                /**
                 * @description ID of the cart
                 * @example 09346904-4175-44fd-be53-f7e598531b6c
                 */
                readonly id?: string;
                /**
                 * @description ID of the coupon
                 * @example 1
                 */
                readonly couponId?: number;
            };
        };
        /**
         * store/cart/abandoned
         * @description This webhook fires after a cart is abandoned. BigCommerce considers a cart abandoned when it has no activity for at least one hour. This webhook is available for all store plans, regardless of whether the Abandoned Cart Saver feature is enabled.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/cart/abandoned",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "cart",
         *         "id": "09346904-4175-44fd-be53-f7e598531b6c",
         *         "token": "1eed6d2d979776ff18e695ceeb10ea61"
         *       }
         *     }
         *     ```
         */
        readonly store_cart_abandoned: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description can be `cart` or `cart_line_item`
                 * @example cart
                 */
                readonly type?: string;
                /**
                 * @description ID of the cart
                 * @example 09346904-4175-44fd-be53-f7e598531b6c
                 */
                readonly id?: string;
                /**
                 * @description Use this token to obtain cart data.
                 * @example 1eed6d2d979776ff18e695ceeb10ea61
                 */
                readonly token?: string;
            };
        };
        /**
         * store/cart/converted
         * @description Fires when a cart/checkout is converted into an order, which is typically after the checkout payment step on the storefront. At this point, the cart is automatically deleted and no longer accessible. This webhook returns both the cart/checkout ID and order ID for correlation purposes.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/cart/converted",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "cart",
         *         "id": "09346904-4175-44fd-be53-f7e598531b6c",
         *         "orderId": 252
         *       }
         *     }
         *     ```
         */
        readonly store_cart_converted: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `cart`.
                 * @default cart
                 */
                readonly type: string;
                /**
                 * @description ID of the cart
                 * @example 09346904-4175-44fd-be53-f7e598531b6c
                 */
                readonly id?: string;
                /**
                 * @description ID of the order created.
                 * @example 252
                 */
                readonly orderId?: number;
            };
        };
        /**
         * store/cart/lineItem/*
         * @description This webhook subscribes to all cart line item events.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/cart/created",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "cart",
         *         "id": "09346904-4175-44fd-be53-f7e598531b6c",
         *         "cartId": "b0386708-fef3-45de-9d8b-fbe3031450a4"
         *       }
         *     }
         *     ```
         */
        readonly store_cart_lineItem_wildcard: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /** @description Can be `cart` or `cart_line_item`. */
                readonly type?: string;
                /** @description ID of the cart. */
                readonly id?: string;
                /** @description ID of the cart. */
                readonly cartId?: string;
            };
        };
        /**
         * store/cart/lineItem/created
         * @description Fires when a new item is added to the cart.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/cart/lineItem/created",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "cart",
         *         "id": "09346904-4175-44fd-be53-f7e598531b6c",
         *         "cartId": "b0386708-fef3-45de-9d8b-fbe3031450a4"
         *       }
         *     }
         *     ```
         */
        readonly store_cart_lineItem_created: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description can be `cart` or `cart_line_item`
                 * @example cart
                 */
                readonly type?: string;
                /**
                 * @description ID of the line item
                 * @example 09346904-4175-44fd-be53-f7e598531b6c
                 */
                readonly id?: string;
                /**
                 * @description ID of the cart
                 * @example b0386708-fef3-45de-9d8b-fbe3031450a4
                 */
                readonly cartId?: string;
            };
        };
        /**
         * store/cart/lineItem/updated
         * @description Fires when an item’s quantity has changed or the product options change.
         *
         *     Changes to the following fields trigger this event:
         *     * Quantity
         *     * Item Price
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/cart/lineItem/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "cart",
         *         "id": "09346904-4175-44fd-be53-f7e598531b6c",
         *         "cartId": "b0386708-fef3-45de-9d8b-fbe3031450a4"
         *       }
         *     }
         *     ```
         */
        readonly store_cart_lineItem_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description can be `cart` or `cart_line_item`
                 * @example cart
                 */
                readonly type?: string;
                /**
                 * @description ID of the line item
                 * @example 09346904-4175-44fd-be53-f7e598531b6c
                 */
                readonly id?: string;
                /**
                 * @description ID of the cart
                 * @example b0386708-fef3-45de-9d8b-fbe3031450a4
                 */
                readonly cartId?: string;
            };
        };
        /**
         * store/cart/lineItem/deleted
         * @description Fires when an item is deleted from the cart.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/cart/lineItem/deleted",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "cart",
         *         "id": "09346904-4175-44fd-be53-f7e598531b6c",
         *         "cartId": "b0386708-fef3-45de-9d8b-fbe3031450a4"
         *       }
         *     }
         *     ```
         */
        readonly store_cart_lineItem_deleted: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description Can be `cart` or `cart_line_item`.
                 * @example cart
                 */
                readonly type?: string;
                /**
                 * @description ID of the line item.
                 * @example 09346904-4175-44fd-be53-f7e598531b6c
                 */
                readonly id?: string;
                /**
                 * @description ID of the cart.
                 * @example b0386708-fef3-45de-9d8b-fbe3031450a4
                 */
                readonly cartId?: string;
            };
        };
        /**
         * store/category/*
         * @description Fires for all `store/category` events.
         *
         */
        readonly store_category_wildcard: unknown;
        /**
         * store/category/created
         * @description Fires when a category is created.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/category/created",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "category",
         *         "id": 42
         *       }
         *     }
         *     ```
         */
        readonly store_category_created: components["schemas"]["webhook_callback_base"] & components["schemas"]["callback_category_data"];
        /**
         * store/category/updated
         * @description Fires when a category is updated.
         *
         *     Changes to the following fields trigger this event:
         *     * URL
         *     * Name
         *     * Redirect Old URLs
         *     * Description
         *     * Parent Category
         *     * Template Layout File
         *     * Sort Order
         *     * Default Product Sort
         *     * Category Image
         *     * Page Title
         *     * Meta Keywords
         *     * Meta Description
         *     * Search Keywords
         *     * Google Product Category
         *     * Enable Google Shopping
         *
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/category/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "category",
         *         "id": 42
         *       }
         *     }
         *     ```
         */
        readonly store_category_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `category`.
                 * @default category
                 */
                readonly type: string;
                /**
                 * @description ID of the category
                 * @example 42
                 */
                readonly id?: number;
            };
        };
        /**
         * store/category/deleted
         * @description Fires when a category is deleted.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/category/deleted",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "category",
         *         "id": "42"
         *       }
         *     }
         *     ```
         */
        readonly store_category_deleted: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `category`.
                 * @default category
                 * @example category
                 */
                readonly type: string;
                /**
                 * @description ID of the category
                 * @example 42
                 */
                readonly id?: number;
            };
        };
        /**
         * store/channel/*
         * @description Fires for all `store/channel` events.
         */
        readonly store_channel_wildcard: unknown;
        /**
         * store/channel/created
         * @description Fires when a channel is created in the control panel or by API.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/channel/created",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "channel",
         *         "id": 173331
         *       }
         *     }
         *     ```
         */
        readonly store_channel_created: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `channel`.
                 * @default channel
                 * @example channel
                 */
                readonly type: string;
                /**
                 * @description ID of the channel
                 * @example 173331
                 */
                readonly id?: number;
            };
        };
        /**
         * store/channel/updated
         * @description This webhook is triggered when a channel is updated in the control panel or by API.
         *
         *     Changes to the following fields trigger this event:
         *     * name
         *     * external_id
         *     * status
         *     * is_listable_from_ui
         *     * is_visible
         *
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/channel/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "channel",
         *         "id": 173331
         *       }
         *     }
         *     ```
         */
        readonly store_channel_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `channel`.
                 * @default channel
                 * @example channel
                 */
                readonly type: string;
                /**
                 * @description ID of the channel
                 * @example 173331
                 */
                readonly id?: number;
            };
        };
        /**
         * store/customer/*
         * @description Fires for all `store/customer` events.
         *
         */
        readonly store_customer_wildcard: unknown;
        /**
         * store/customer/created
         * @description Fires when a new customer is created.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/customer/created",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "customer",
         *         "id": 32
         *       }
         *     }
         *     ```
         */
        readonly store_customer_created: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `customer`.
                 * @default customer
                 * @example customer
                 */
                readonly type: string;
                /**
                 * @description ID of the customer
                 * @example 32
                 */
                readonly id?: number;
            };
        };
        /**
         * store/customer/updated
         * @description This webhook is triggered when a customer is updated. In addition, this webhook is triggered when a shopper initially enters custom form field values within the account sign-up form. Please note that neither changing existing data in customer form fields nor changing a customerʼs address will trigger the webhook.
         *
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/customer/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "customer",
         *         "id": 32
         *       }
         *     }
         *     ```
         */
        readonly store_customer_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `customer`.
                 * @default customer
                 * @example customer
                 */
                readonly type: string;
                /**
                 * @description ID of the customer
                 * @example 32
                 */
                readonly id?: number;
            };
        };
        /**
         * store/customer/deleted
         * @description This webhook is triggered when a customer is deleted.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/customer/deleted",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "customer",
         *         "id": 32
         *       }
         *     }
         *     ```
         */
        readonly store_customer_deleted: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `customer`.
                 * @default customer
                 * @example customer
                 */
                readonly type: string;
                /**
                 * @description ID of the customer.
                 * @example 32
                 */
                readonly id?: number;
            };
        };
        /**
         * store/customer/address/updated
         * @description Fires when a customer address is updated.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/customer/address/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "customer",
         *         "id": 60,
         *         "address": {
         *           "customer_id": 32
         *         }
         *       }
         *     }
         *     ```
         */
        readonly store_customer_address_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `customer`.
                 * @example customer
                 */
                readonly type?: string;
                /**
                 * @description ID of the customer address.
                 * @example 60
                 */
                readonly id?: number;
                readonly address?: {
                    /**
                     * @description ID of the customer.
                     * @example 32
                     */
                    readonly customer_id?: number;
                };
            };
        };
        /**
         * store/customer/address/created
         * @description Fires when a customer address is created.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/customer/address/created",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "customer",
         *         "id": 60,
         *         "address": {
         *           "customer_id": 32
         *         }
         *       }
         *     }
         *     ```
         */
        readonly store_customer_address_created: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `customer`.
                 * @example customer
                 */
                readonly type?: string;
                /**
                 * @description ID of the customer address.
                 * @example 60
                 */
                readonly id?: number;
                readonly address?: {
                    /**
                     * @description ID of the customer.
                     * @example 32
                     */
                    readonly customer_id?: number;
                };
            };
        };
        /**
         * store/customer/address/deleted
         * @description Fires when a customer address is deleted.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/customer/address/deleted",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "customer",
         *         "id": 60,
         *         "address": {
         *           "customer_id": 32
         *         }
         *       }
         *     }
         *     ```
         */
        readonly store_customer_address_deleted: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `customer`.
                 * @example customer
                 */
                readonly type?: string;
                /**
                 * @description ID of the customer address.
                 * @example 60
                 */
                readonly id?: number;
                readonly address?: {
                    /**
                     * @description ID of the customer.
                     * @example 32
                     */
                    readonly customer_id?: number;
                };
            };
        };
        /**
         * store/customer/payment/instrument/default/updated
         * @description Fires when a customer default payment instrument is updated.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/customer/payment/instrument/default/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "customer",
         *         "id": 32
         *       }
         *     }
         *     ```
         */
        readonly store_customer_payment_instrument_default_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description can be `cart` or `cart_line_item`
                 * @default "customer"
                 * @example "customer"
                 */
                readonly type: string;
                /**
                 * @description ID of the customer.
                 * @example 32
                 */
                readonly id?: number;
            };
        };
        /**
         * store/order/*
         * @description Fires for all `store/order` events.
         */
        readonly store_order_wildcard: unknown;
        /**
         * store/order/created
         * @description This webhook is triggered when an order is created in the control panel, using an app, or by API.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/order/created",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "order",
         *         "id": 250
         *       }
         *     }
         *     ```
         */
        readonly store_order_created: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `order`.
                 * @default order
                 * @example order
                 */
                readonly type: string;
                /**
                 * @description ID of the order.
                 * @example 250
                 */
                readonly id?: number;
            };
        };
        /**
         * store/order/updated
         * @description Fires when a previously-created order is updated.
         *
         *     Changes to the following fields trigger this event:
         *     * Status
         *     * Coupon Code
         *     * Billing and Shipping Address
         *     * Product Type
         *     * Search Keywords
         *     * Related Products
         *     * Warranty Information
         *     * Page Title
         *     * Meta Description
         *     * Gift Wrapping options
         *     * Bin Picking Number (BPN)
         *     * Fixed Shipping Price
         *     * Free Shipping
         *     * Open Graph Sharing Type
         *     * Availability Text
         *     * Purchasability
         *     * Release Date
         *     * Remove pre-order status on this date
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/order/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "order",
         *         "id": 250
         *       }
         *     }
         *     ```
         */
        readonly store_order_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `order`.
                 * @default order
                 * @example order
                 */
                readonly type: string;
                /**
                 * @description ID of the order.
                 * @example 250
                 */
                readonly id?: number;
            };
        };
        /**
         * store/order/archived
         * @description Fires when an order is archived.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/order/archived",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "order",
         *         "id": 250
         *       }
         *     }
         *     ```
         */
        readonly store_order_archived: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `order`.
                 * @default order
                 * @example order
                 */
                readonly type: string;
                /**
                 * @description ID of the order.
                 * @example 250
                 */
                readonly id?: number;
            };
        };
        /**
         * store/order/statusUpdated
         * @description This webhook is triggered when an order status changes; for example, from `Pending` to `Awaiting Payment`.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/order/statusUpdated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "order",
         *         "id": 250,
         *         "status": {
         *           "previous_status_id": 1,
         *           "new_status_id": 11
         *         }
         *       }
         *     }
         *     ```
         */
        readonly store_order_statusUpdated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `order`.
                 * @example order
                 */
                readonly type?: string;
                /**
                 * @description ID of the order.
                 * @example 250
                 */
                readonly id?: number;
                readonly status?: {
                    /**
                     * @description ID of the previous status.
                     * @example 1
                     */
                    readonly previous_status_id?: number;
                    /**
                     * @description ID of the updated status.
                     * @example 11
                     */
                    readonly new_status_id?: number;
                };
            };
        };
        /**
         * store/order/message/created
         * @description This webhook is triggered when an order message is created by a customer or in the control panel.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/order/message/created",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *      "data": {
         *         "type": "order",
         *         "id": 250,
         *         "message": {
         *           "order_message_id": 3
         *         }
         *       }
         *     }
         *     ```
         */
        readonly store_order_message_created: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `order`.
                 * @example order
                 */
                readonly type?: string;
                /**
                 * @description ID of the order.
                 * @example 250
                 */
                readonly id?: number;
                readonly message?: {
                    /**
                     * @description ID of the message on the order.
                     * @example 3
                     */
                    readonly order_message_id?: number;
                };
            };
        };
        /**
         * store/order/refund/created
         * @description This webhook is triggered when a refund is submitted against an order.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/order/refund/created",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "order",
         *         "id": 250,
         *         "refund": {
         *           "refund_id": 3
         *         }
         *       }
         *     }
         *     ```
         */
        readonly store_order_refund_created: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `order`.
                 * @example order
                 */
                readonly type?: string;
                /**
                 * @description ID of the order.
                 * @example 250
                 */
                readonly id?: number;
                readonly refund?: {
                    /**
                     * @description ID of the refund submitted against the order.
                     * @example 3
                     */
                    readonly refund_id?: number;
                };
            };
        };
        /**
         * store/product/*
         * @description Fires for all `store/product` events.
         */
        readonly store_product_wildcard: unknown;
        /**
         * store/product/deleted
         * @description This webhook is triggered when a product is deleted.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/product/deleted",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "product",
         *         "id": 205
         *       }
         *     }
         *     ```
         */
        readonly store_product_deleted: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type ill always be `product`.
                 * @default product
                 * @example product
                 */
                readonly type: string;
                /**
                 * @description ID of the product.
                 * @example 205
                 */
                readonly id?: number;
            };
        };
        /**
         * store/product/created
         * @description Fires when a new product is created.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/product/created",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "product",
         *         "id": 205
         *       }
         *     }
         *     ```
         */
        readonly store_product_created: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `product`.
                 * @default product
                 * @example product
                 */
                readonly type: string;
                /**
                 * @description ID of the product.
                 * @example 205
                 */
                readonly id?: number;
            };
        };
        /**
         * store/product/updated
         * @description Fires when product details are edited.
         *
         *     Changes to the following fields trigger this event:
         *     * Product Type
         *     * Search Keywords
         *     * Related Products
         *     * Warranty Information
         *     * Page Title
         *     * Meta Description
         *     * Gift Wrapping options
         *     * Bin Picking Number (BPN)
         *     * Fixed Shipping Price
         *     * Free Shipping
         *     * Open Graph Sharing Type
         *     * Availability Text
         *     * Purchasability
         *     * Release Date
         *     * Remove pre-order status on this date
         *     * Preorder Message
         *     * Inventory Stock
         *     * Inventory Low Stock
         *     * Track inventory
         *     * Product UPC/EAN
         *     * SKU
         *     * Cost
         *     * Tax Class
         *     * Weight
         *     * Width
         *     * Height
         *     * Depth
         *     * Condition
         *     * Show condition on storefront
         *     * Brand
         *     * Default Price
         *     * Sale Price
         *     * MSRP
         *     * Product Name
         *     * Description
         *     * Visible on Storefront
         *     * Sort Order
         *     * Categories
         *     * Product URL
         *     * Set as a Featured Product on my Storefront
         *
         *     However, changes to the following fields donʼt trigger this event:
         *
         *     * Manufacturer Part Number (MPN)
         *     * Global Trade Number (GTN)
         *     * Tax Provider Tax Code
         *     * Product Image
         *     * Product Image Description
         *     * Product Files
         *     * Customs Information
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/product/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "product",
         *         "id": 205
         *       }
         *     }
         *     ```
         */
        readonly store_product_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type ill always be `product`.
                 * @default product
                 * @example product
                 */
                readonly type: string;
                /**
                 * @description ID of the product.
                 * @example 205
                 */
                readonly id?: number;
            };
        };
        /**
         * store/product/inventory/updated
         * @description This webhook is triggered when product inventory is updated.
         *
         *     Changes to the following fields trigger this event:
         *     * Inventory Stock
         *
         *     However, changes to the following fields donʼt trigger this event:
         *     * Track Inventory
         *     * Inventory Low Stock
         *
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/product/inventory/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "product",
         *         "id": 167,
         *         "inventory": {
         *           "product_id": 167,
         *           "method": "absolute",
         *           "value": 2
         *         }
         *       }
         *     }
         *     ```
         */
        readonly store_product_inventory_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `product`.
                 * @example product
                 */
                readonly type?: string;
                /**
                 * @description ID of the product.
                 * @example 167
                 */
                readonly id?: number;
                readonly inventory?: {
                    /**
                     * @description ID of the product.
                     * @example 167
                     */
                    readonly product_id?: number;
                    /**
                     * @description How the inventory was adjusted. Value will be one of the following:
                     *     * `absolute` - inventory updated through the API or the control panel.
                     *     * `relative` - inventory updated by an order.
                     * @enum {string}
                     */
                    readonly method?: "absolute" | "relative";
                    /**
                     * @description This value is the difference between an item’s inventory count before and after the inventory updates. This value is negative if an item’s inventory count decreases. For example, reducing inventory by three returns a value of `-3`. This value is positive if an item’s inventory count increases. For example, returning two items to the inventory returns a value of `2`.
                     * @example 2
                     */
                    readonly value?: number;
                };
            };
        };
        /**
         * store/product/inventory/order/updated
         * @description This webhook is triggered when a product’s inventory increases or decreases.
         *
         *     Changes to the following fields trigger this event:
         *     * Quantity
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/product/inventory/order/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "product",
         *         "id": 167,
         *         "inventory": {
         *           "product_id": 167,
         *           "method": "absolute",
         *           "value": 2
         *         }
         *       }
         *     }
         *     ```
         */
        readonly store_product_inventory_order_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description Type will always be `product`.
                 * @example product
                 */
                readonly type?: string;
                /**
                 * @description ID of the product.
                 * @example 167
                 */
                readonly id?: number;
                readonly inventory?: {
                    /**
                     * @description ID of the product.
                     * @example 167
                     */
                    readonly product_id?: number;
                    /**
                     * @description How the inventory was adjusted. Value will be one of the following:
                     *     * `absolute` - inventory updated using the API or the control panel.
                     *     * `relative` - inventory updated by an order.
                     * @enum {string}
                     */
                    readonly method?: "absolute" | "relative";
                    /**
                     * @description This value is the difference between an item’s inventory count before and after the inventory updates. This value is negative if an item’s inventory count decreases. For example, reducing inventory by three returns a value of `-3`. This value is positive if an item’s inventory count increases. For example, returning two items to the inventory returns a value of `2`.
                     * @example 2
                     */
                    readonly value?: number;
                };
            };
        };
        /**
         * store/shipment/*
         * @description Fires for all `store/shipment` events.
         */
        readonly store_shipment_wildcard: unknown;
        /**
         * store/shipment/created
         * @description Fires when a shipment is created.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/shipment/created",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "shipment",
         *         "id": 12,
         *         "orderId": 251
         *       }
         *     }
         *     ```
         */
        readonly store_shipment_created: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `shipment`.
                 * @example shipment
                 */
                readonly type?: string;
                /**
                 * @description ID of the shipment.
                 * @example 12
                 */
                readonly id?: number;
                /**
                 * @description ID of the order.
                 * @example 251
                 */
                readonly orderId?: number;
            };
        };
        /**
         * store/shipment/updated
         * @description Fires when a shipment is updated.
         *
         *     Changes to the following fields trigger this event:
         *     * Shipping Tracking Number
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/shipment/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "shipment",
         *         "id": 12,
         *         "orderId": 251
         *       }
         *     }
         *     ```
         */
        readonly store_shipment_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `shipment`.
                 * @example shipment
                 */
                readonly type?: string;
                /**
                 * @description ID of the shipment.
                 * @example 12
                 */
                readonly id?: number;
                /**
                 * @description ID of the order.
                 * @example 251
                 */
                readonly orderId?: number;
            };
        };
        /**
         * store/shipment/deleted
         * @description This webhook is triggered when a shipment is deleted.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/shipment/deleted",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "shipment",
         *         "id": 12,
         *         "orderId": 251
         *       }
         *     }
         *     ```
         */
        readonly store_shipment_deleted: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `shipment`.
                 * @example shipment
                 */
                readonly type?: string;
                /**
                 * @description ID of the shipment.
                 * @example 12
                 */
                readonly id?: number;
                /**
                 * @description ID of the order.
                 * @example 251
                 */
                readonly orderId?: number;
            };
        };
        /**
         * store/sku/*
         * @description Fires for all `store/sku` events.
         */
        readonly store_sku_wildcard: unknown;
        /**
         * store/sku/created
         * @description This webhook is triggered when a new SKU is created.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/sku/created",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "sku",
         *         "id": 461,
         *         "sku": {
         *           "product_id": 206,
         *           "variant_id": 509
         *         }
         *       }
         *     }
         *     ```
         */
        readonly store_sku_created: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `"sku"`.
                 * @example sku
                 */
                readonly type?: string;
                /**
                 * @description ID of the SKU.
                 * @example 461
                 */
                readonly id?: number;
                readonly sku?: {
                    /**
                     * @description ID of the product.
                     * @example 206
                     */
                    readonly product_id?: number;
                    /**
                     * @description ID of the variant.
                     * @example 509
                     */
                    readonly variant_id?: number;
                };
            };
        };
        /**
         * store/sku/updated
         * @description Fires when a SKU is updated.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/sku/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "sku",
         *         "id": 461,
         *         "sku": {
         *           "product_id": 206,
         *           "variant_id": 509
         *         }
         *       }
         *     }
         *     ```
         */
        readonly store_sku_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `"sku"`.
                 * @example sku
                 */
                readonly type?: string;
                /**
                 * @description ID of the SKU.
                 * @example 461
                 */
                readonly id?: number;
                readonly sku?: {
                    /**
                     * @description ID of the product.
                     * @example 206
                     */
                    readonly product_id?: number;
                    /**
                     * @description ID of the variant.
                     * @example 509
                     */
                    readonly variant_id?: number;
                };
            };
        };
        /**
         * store/sku/deleted
         * @description Fires when a SKU is deleted.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/sku/deleted",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "sku",
         *         "id": 461,
         *         "sku": {
         *           "product_id": 206,
         *           "variant_id": 509
         *         }
         *       }
         *     }
         *     ```
         */
        readonly store_sku_deleted: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `"sku"`.
                 * @example sku
                 */
                readonly type?: string;
                /**
                 * @description ID of the SKU.
                 * @example 461
                 */
                readonly id?: number;
                readonly sku?: {
                    /**
                     * @description ID of the product.
                     * @example 206
                     */
                    readonly product_id?: number;
                    /**
                     * @description ID of the variant.
                     * @example 509
                     */
                    readonly variant_id?: number;
                };
            };
        };
        /**
         * store/sku/inventory/updated
         * @description Fires when a SKU is updated.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/sku/inventory/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "sku",
         *         "id": 461,
         *         "inventory": {
         *           "product_id": 167,
         *           "method": "absolute",
         *           "value": 2,
         *           "variant_id": 509
         *         }
         *       }
         *     }
         *     ```
         */
        readonly store_sku_inventory_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `sku`.
                 * @example sku
                 */
                readonly type?: string;
                /**
                 * @description ID of the SKU.
                 * @example 461
                 */
                readonly id?: number;
                readonly inventory?: {
                    /**
                     * @description ID of the product.
                     * @example 167
                     */
                    readonly product_id?: number;
                    /**
                     * @description How the inventory was adjusted. Value will be one of the following:
                     *     * `absolute` - inventory updated by an order.
                     *     * `relative` - inventory updated using the API or the control panel.
                     * @enum {string}
                     */
                    readonly method?: "absolute" | "relative";
                    /**
                     * @description The number of items that the inventory changed by. This can be negative if the inventory is decreased `-3` or positive if an item is returned to the inventory from an order, `2`.
                     * @example 2
                     */
                    readonly value?: number;
                    /**
                     * @description ID of the variant.
                     * @example 509
                     */
                    readonly variant_id?: number;
                };
            };
        };
        /**
         * store/sku/inventory/order/updated
         * @description Fires when the inventory is updated.
         *
         *     Changes to the following fields trigger this event:
         *     * Quantity
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/sku/inventory/order/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "sku",
         *         "id": 461,
         *         "inventory": {
         *           "product_id": 167,
         *           "method": "absolute",
         *           "value": 2,
         *           "variant_id": 509
         *         }
         *       }
         *     }
         *     ```
         */
        readonly store_sku_inventory_order_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `sku`.
                 * @example sku
                 */
                readonly type?: string;
                /**
                 * @description ID of the SKU.
                 * @example 461
                 */
                readonly id?: number;
                readonly inventory?: {
                    /**
                     * @description ID of the product.
                     * @example 167
                     */
                    readonly product_id?: number;
                    /**
                     * @description How the inventory was adjusted. Value will be one of the following:
                     *     * `absolute` - inventory updated by an order.
                     *     * `relative` - inventory updated using the API or the control panel.
                     * @enum {string}
                     */
                    readonly method?: "absolute" | "relative";
                    /**
                     * @description The number of items that the inventory changed by. This can be negative if the inventory is decreased `-3` or positive if an item is returned to the inventory from an order, `2`.
                     * @example 2
                     */
                    readonly value?: number;
                    /**
                     * @description ID of the variant.
                     * @example 509
                     */
                    readonly variant_id?: number;
                };
            };
        };
        /**
         * store/app/uninstalled
         * @description Fires when a client store is canceled and uninstalled from the platform.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/app/uninstalled",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "store"
         *       }
         *     }
         *     ```
         */
        readonly store_app_uninstalled: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `store`.
                 * @example store
                 */
                readonly type?: string;
            };
        };
        /**
         * store/information/updated
         * @description Fires when changes are made to store settings.
         *
         *     Changes to the following fields trigger this event:
         *     * Store Name
         *     * Store Address
         *     * Store Country
         *     * Address Type
         *     * Email
         *     * Phone
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/information/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "store"
         *       }
         *     }
         *     ```
         */
        readonly store_information_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /** @example store */
                readonly type?: string;
            };
        };
        /**
         * store/subscriber/*
         * @description Fires for all `store/subscriber` events.
         */
        readonly store_subscriber_wildcard: unknown;
        /**
         * store/subscriber/created
         * @description Fires when a subscriber is created.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/subscriber/created",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "subscriber",
         *         "id": 5
         *       }
         *     }
         *     ```
         */
        readonly store_subscriber_created: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description Will always be `subscriber`
                 * @example subscriber
                 */
                readonly type?: string;
                /**
                 * @description ID of the subscriber
                 * @example 5
                 */
                readonly id?: number;
            };
        };
        /**
         * store/subscriber/updated
         * @description The webhook fires when a subscriber is updated.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/subscriber/updated",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "subscriber",
         *         "id": 5
         *       }
         *     }
         *     ```
         */
        readonly store_subscriber_updated: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `subscriber`.
                 * @example subscriber
                 */
                readonly type?: string;
                /**
                 * @description ID of the subscriber.
                 * @example 5
                 */
                readonly id?: number;
            };
        };
        /**
         * store/subscriber/deleted
         * @description This webhook is triggered when a subscriber is deleted.
         *
         *     ```json filename="Example callback object" showLineNumbers
         *     {
         *       "created_at": 1561482670,
         *       "store_id": "1025646",
         *       "producer": "stores/{store_hash}",
         *       "scope": "store/subscriber/deleted",
         *       "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
         *       "data": {
         *         "type": "subscriber",
         *         "id": 5
         *       }
         *     }
         *     ```
         */
        readonly store_subscriber_deleted: components["schemas"]["webhook_callback_base"] & {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description The type will always be `subscriber`.
                 * @example subscriber
                 */
                readonly type?: string;
                /**
                 * @description ID of the subscriber.
                 * @example 5
                 */
                readonly id?: number;
            };
        };
        /** error_Full */
        readonly error_Full: {
            /** @description The HTTP status code.
             *      */
            readonly status?: number;
            /** @description The error title describing the particular error.
             *      */
            readonly title?: string;
            /** @description This value is typically a link to BigCommerce API Status codes. */
            readonly type?: string;
        };
        /** errorDetailed_Full */
        readonly errorDetailed_Full: {
            /** @description The HTTP status code.
             *      */
            readonly status?: number;
            /** @description The error title describing the particular error.
             *      */
            readonly title?: string;
            /** @description Typically a link to BigCommerce API Status codes */
            readonly type?: string;
            readonly errors?: unknown;
        };
        /** webhook_Put */
        readonly webhook_Put: {
            /**
             * @description Event you subscribe to.
             * @example store/order/created
             */
            readonly scope?: string;
            /**
             * @description URL must be active, return a 200 response, and be served on port 443. Custom ports arenʼt currently supported.
             * @example https://665b65a6.ngrok.io/webhooks
             */
            readonly destination?: string;
            /**
             * @description Boolean value that indicates whether the webhook is active or not.
             * @example true
             */
            readonly is_active?: boolean;
            /** @description Headers used to validate that webhooks are active. You can pass in any number of custom headers to validate webhooks are being returned. */
            readonly headers?: {
                readonly [key: string]: string;
            } | null;
        };
        /** webhook_Base */
        readonly webhook_Base: {
            /**
             * @description Event you subscribe to.
             * @example store/order/created
             */
            readonly scope: string;
            /**
             * @description URL must be active, return a 200 response, and be served on port 443. Custom ports arenʼt currently supported.
             * @example https://665b65a6.ngrok.io/webhooks
             */
            readonly destination: string;
            /**
             * @description Boolean value that indicates whether the webhook is active or not. A webhook subscription becomes deactivated after 90 days of inactivity.
             * @example true
             */
            readonly is_active?: boolean;
            /** @description Headers used to validate that webhooks are active. You can pass in any number of custom headers to validate webhooks are being returned. */
            readonly headers?: {
                readonly [key: string]: string;
            } | null;
        };
        readonly webhook_Full: {
            /**
             * @description ID of the webhook.
             * @example 18048287
             */
            readonly id?: number;
            /**
             * @description Client ID, unique to the store or app.
             * @example m9r6keqmo7h7f23btnpwernbez1kglkl
             */
            readonly client_id?: string;
            /**
             * @description Permanent ID of the BigCommerce store.
             * @example sftg45fsd
             */
            readonly store_hash?: string;
            /**
             * @description The time the webhook was created, represented in UNIX epoch time.
             * @example 1561488106
             */
            readonly created_at?: number;
            /**
             * @description The time the webhook was most recently updated, represented in UNIX epoch time.
             * @example 1561488106
             */
            readonly updated_at?: number;
        } & components["schemas"]["webhook_Base"];
        /** @description Data about the response, including pagination and collection totals.
         *      */
        readonly Pagination: {
            /** @description Total number of returned items across all pages. */
            readonly total?: number;
            /** @description Number of items on current page. */
            readonly count?: number;
            /** @description Maximum number of items per page. */
            readonly per_page?: number;
            /** @description Current page number. */
            readonly current_page?: number;
            /** @description Total number of pages. */
            readonly total_pages?: number;
            readonly links?: {
                /** @description Link to the previous page returned in the response. */
                readonly previous?: string;
                /** @description Link to the current page returned in the response. */
                readonly current?: string;
                /** @description Link to the next page returned in the response. */
                readonly next?: string;
            };
        };
        readonly webhook_callback_base: {
            /**
             * @description The time the webhook was created, represented in UNIX epoch time.
             * @example 1561488106
             */
            readonly created_at?: number;
            /**
             * @description A numerical identifier that is unique to each store.
             * @example 1025646
             */
            readonly store_id?: string;
            /**
             * @description Will always follow the pattern `stores/store_hash`. This is the store that created the webhook.
             * @example stores/{store_hash}
             */
            readonly producer?: string;
            /**
             * @description The event registered when the webhook was created.
             * @example store/cart/created
             */
            readonly scope?: string;
            /**
             * @description The payload data encoded in JSON format and then passed through SH1 encryption.
             * @example 352e4afc6dd3fc85ea26bfdf3f91852604d57528
             */
            readonly hash?: string;
        };
        /**
         * callback_category_data
         * @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
         */
        readonly callback_category_data: {
            /** @description A lightweight description of the event that triggered the webhook. Will vary depending on the event registered. */
            readonly data?: {
                /**
                 * @description This type will always be `category`.
                 * @default category
                 */
                readonly type: string;
                /**
                 * @description ID of the category.
                 * @example 42
                 */
                readonly id?: number;
            };
        };
    };
    responses: {
        readonly webhooks_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: readonly {
                        readonly id?: number;
                        readonly client_id?: string;
                        readonly store_hash?: string;
                        readonly scope?: string;
                        readonly destination?: string;
                        readonly headers?: {
                            readonly [key: string]: string;
                        } | null;
                        readonly is_active?: boolean;
                        /** @description The time the webhook was created, represented in UNIX epoch time. */
                        readonly created_at?: number;
                        /** @description The time the webhook was most recently updated, represented in UNIX epoch time. */
                        readonly updated_at?: number;
                    }[];
                    readonly meta?: {
                        readonly pagination?: components["schemas"]["Pagination"];
                    };
                };
            };
        };
        /** @description If something happens during the request that causes it to fail, a 502 response will be returned. A new request should be made; however, it could fail. */
        readonly "502_GatewayError": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description If this occurs, you should retry the request. If you are unable to successfully make a request, please check the BigCommerce [system status](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up (in several hours usually) */
        readonly "503_ServiceUnavailable": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description If this occurs, you should retry the request. Typically retrying the request several times will result in a successful request; However, if you are unable to successfully make a request, please check the BigCommerce [system status](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up (in several hours usually) */
        readonly "504_GatewayTimeout": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["errorDetailed_Full"];
            };
        };
        /** @description Malformed request syntax. Typically need to fix the JSON request body to resend successfully. */
        readonly "400_BadRequest": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
        readonly "401_Unauthorized": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        readonly "403_Unauthorized": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description If the requested webhook is not found, return a 404 Not Found. */
        readonly "404_NotFound": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description This occurs when missing or unacceptable data is passed for one or more fields. Please correct the values for the fields listed in the errors object. */
        readonly "422_UnprocessableEntity": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["errorDetailed_Full"];
            };
        };
        /** @description Example response */
        readonly webhook_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: {
                        readonly id?: number;
                        readonly client_id?: string;
                        readonly store_hash?: string;
                        readonly scope?: string;
                        readonly destination?: string;
                        readonly headers?: {
                            readonly [key: string]: string;
                        } | null;
                        readonly is_active?: boolean;
                        /** @description The time the webhook was created, represented in UNIX epoch time. */
                        readonly created_at?: number;
                        /** @description The time the webhook was most recently updated, represented in UNIX epoch time. */
                        readonly updated_at?: number;
                    };
                    readonly meta?: unknown;
                };
            };
        };
    };
    parameters: {
        /** @description The ID of a Webhook. */
        readonly WebhookId: number;
        /** @description Enables user to filter for webhooks that are active or not. A webhook subscription becomes deactivated after 90 days of inactivity.
         *      */
        readonly IsActive: boolean;
        /** @description Enables user to filter for webhooks by scope.
         *      */
        readonly FilterByScope: string;
        /** @description Enables user to filter for webhooks by destination.
         *      */
        readonly FilterByDestination: string;
        /** @description Page number.
         *      */
        readonly FilterPageParam: number;
        /** @description Items count per page.
         *      */
        readonly FilterLimitParam: number;
        readonly Accept: string;
        readonly "Content-Type": string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getWebhooks: {
        readonly parameters: {
            readonly query?: {
                /** @description Page number.
                 *      */
                readonly page?: components["parameters"]["FilterPageParam"];
                /** @description Items count per page.
                 *      */
                readonly limit?: components["parameters"]["FilterLimitParam"];
                /** @description Enables user to filter for webhooks that are active or not. A webhook subscription becomes deactivated after 90 days of inactivity.
                 *      */
                readonly is_active?: components["parameters"]["IsActive"];
                /** @description Enables user to filter for webhooks by scope.
                 *      */
                readonly scope?: components["parameters"]["FilterByScope"];
                /** @description Enables user to filter for webhooks by destination.
                 *      */
                readonly destination?: components["parameters"]["FilterByDestination"];
            };
            readonly header?: {
                readonly Accept?: components["parameters"]["Accept"];
                readonly "Content-Type"?: components["parameters"]["Content-Type"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["webhooks_Resp"];
            readonly 401: components["responses"]["401_Unauthorized"];
        };
    };
    readonly createWebhooks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                readonly Accept?: components["parameters"]["Accept"];
                readonly "Content-Type"?: components["parameters"]["Content-Type"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["webhook_Base"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["webhook_Full"];
                        readonly meta?: unknown;
                    };
                };
            };
            readonly 400: components["responses"]["400_BadRequest"];
            readonly 401: components["responses"]["401_Unauthorized"];
            readonly 422: components["responses"]["422_UnprocessableEntity"];
        };
    };
    readonly getWebhook: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                readonly Accept?: components["parameters"]["Accept"];
                readonly "Content-Type"?: components["parameters"]["Content-Type"];
            };
            readonly path: {
                /** @description The ID of a Webhook. */
                readonly webhook_id: components["parameters"]["WebhookId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["webhook_Resp"];
            readonly 401: components["responses"]["401_Unauthorized"];
            readonly 404: components["responses"]["404_NotFound"];
        };
    };
    readonly updateWebhook: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                readonly Accept?: components["parameters"]["Accept"];
                readonly "Content-Type"?: components["parameters"]["Content-Type"];
            };
            readonly path: {
                /** @description The ID of a Webhook. */
                readonly webhook_id: components["parameters"]["WebhookId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["webhook_Put"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["webhook_Resp"];
        };
    };
    readonly deleteWebhook: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                readonly Accept?: components["parameters"]["Accept"];
                readonly "Content-Type"?: components["parameters"]["Content-Type"];
            };
            readonly path: {
                /** @description The ID of a Webhook. */
                readonly webhook_id: components["parameters"]["WebhookId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["webhook_Resp"];
        };
    };
    readonly getHooksAdmin: {
        readonly parameters: {
            readonly query?: {
                /** @description Enables user to filter for webhooks that are active or not. A webhook subscription becomes deactivated after 90 days of inactivity.
                 *      */
                readonly is_active?: components["parameters"]["IsActive"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful operation. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: {
                            /** @description Email addresses to be sent notifications. */
                            readonly emails?: readonly string[];
                            /** @description List of all the webhooks associated with the provider API account, filtered by the `active` parameter. */
                            readonly hooks_list?: readonly {
                                /** @description ID of the webhook */
                                readonly id?: number;
                                /** @description Client ID, unique to the store or app. */
                                readonly client_id?: string;
                                /** @description Permanent ID of the BigCommerce store. */
                                readonly store_hash?: string;
                                /**
                                 * @description Event you subscribe to
                                 * @example store/order/created
                                 */
                                readonly scope?: string;
                                /** @description URL must be active, return a 200 response, and be served on port 443. Custom ports arenʼt currently supported. */
                                readonly destination?: string;
                                /** @description You can pass in any number of custom headers to validate webhooks being returned. */
                                readonly headers?: {
                                    readonly [key: string]: string;
                                } | null;
                                /**
                                 * @description If the webhook is active or not. A webhook subscription becomes deactivated after 90 days of inactivity.
                                 * @default true
                                 */
                                readonly is_active: boolean;
                                /**
                                 * @description The time the webhook was created, represented in UNIX epoch time.
                                 * @example 1561488106
                                 */
                                readonly created_at?: number;
                                /**
                                 * @description The time the webhook was most recently updated, represented in UNIX epoch time.
                                 * @example 1561488106
                                 */
                                readonly updated_at?: number;
                                /**
                                 * @description The webhook status.
                                 * @enum {string}
                                 */
                                readonly status?: "inactive" | "active" | "deactivated";
                            }[];
                            /** @description List of domains (destinations) that are currently on the denylist and are not being sent webhooks. */
                            readonly blocked_domains?: readonly {
                                /**
                                 * Format: url
                                 * @description Domain URL to which webhooks are sent.
                                 */
                                readonly destination?: string;
                                /** @description Remaining time in seconds that the domain is on the denylist. */
                                readonly time_left?: number;
                                readonly reasons?: readonly {
                                    readonly failure_description?: string;
                                    readonly count?: number;
                                    /**
                                     * Format: int64
                                     * @description UTC timestamp in seconds that the events was created
                                     */
                                    readonly timestamp?: number;
                                }[];
                            }[];
                        };
                        readonly meta?: {
                            readonly pagination?: components["schemas"]["Pagination"];
                        };
                    };
                };
            };
            readonly 401: components["responses"]["401_Unauthorized"];
        };
    };
    readonly updateHooksAdmin: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** @description List of notification emails. */
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    readonly emails?: readonly string[];
                };
            };
        };
        readonly responses: {
            /** @description No Content */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 400: components["responses"]["400_BadRequest"];
            readonly 401: components["responses"]["401_Unauthorized"];
            readonly 422: components["responses"]["422_UnprocessableEntity"];
        };
    };
}
