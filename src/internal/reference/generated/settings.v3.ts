/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/settings/analytics": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Web Analytics Providers
         * @description Returns a list of web analytics providers.
         */
        readonly get: operations["getAnalyticsProviders"];
    };
    readonly "/settings/analytics/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description Web Analytics Provider ID. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        /**
         * Get a Web Analytics Provider
         * @description Returns a single web analytics provider data for a default channel.
         */
        readonly get: operations["getAnalyticsProvider"];
        /**
         * Update a Web Analytics Provider
         * @description Updates a single web analytics provider data for a default channel.
         */
        readonly put: operations["updateAnalyticsProvider"];
    };
    readonly "/settings/catalog": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Catalog Settings
         * @description Returns catalog settings.
         *
         *      - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        readonly get: operations["getSettingsCatalog"];
        /**
         * Update Catalog Settings
         * @description Updates catalog settings.
         *
         *      - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        readonly put: operations["updateSettingsCatalog"];
    };
    readonly "/settings/email-statuses": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Transactional Email Settings
         * @description Get global transactional email settings or channel specific overrides by `channel_id`.
         */
        readonly get: operations["getSettingsEmailStatuses"];
        /**
         * Update Transactional Email Settings
         * @description Update global transactional email settings or create channel specific overrides by `channel_id`.
         */
        readonly put: operations["updateSettingsEmailStatuses"];
    };
    readonly "/settings/favicon/image": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Create Favicon Image
         * @description Uploads an image file to use as the storefront favicon. Supported MIME types include GIF, JPEG, and PNG.
         *
         *       - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
         *       - The uploaded image can be up to 10 MB. Larger files result in an error.
         */
        readonly post: operations["createSettingsFaviconImage"];
    };
    readonly "/settings/inventory/notifications": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Inventory Notifications Settings
         * @description Returns inventory notification settings.
         *     * `channel_id` can be used as a query parameter to get inventory notification settings per channel. If omitted, you will interact with the global settings only.
         */
        readonly get: operations["getSettingsInventoryNotifications"];
        /**
         * Update Inventory Notifications Settings
         * @description Updates inventory notification settings.
         *     * `channel_id` can be used as a query parameter to get inventory notification settings per channel. If omitted, you will interact with the global settings only.
         *     * Supplying `null` settings values per channel will delete overrides per given channel and values will be inherited from global level.
         *     * Partial updates are not supported within the given endpoint. In order to delete overrides per channel, `null` should be supplied for all the settings within the given endpoint.
         */
        readonly put: operations["updateSettingsInventoryNotifications"];
    };
    readonly "/settings/logo": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Store Logo Settings
         * @description Returns store logo settings.
         *
         *      - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        readonly get: operations["getSettingsLogo"];
        /**
         * Update Store Logo Settings
         * @description Updates the logo type and logo text for a textual logo. To upload new images, use the dedicated image POST endpoints.
         *
         *      - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        readonly put: operations["updateSettingsLogo"];
    };
    readonly "/settings/logo/image": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Create Logo Image
         * @description Uploads an image file to use as the storefront logo. Supported MIME types include GIF, JPEG, and PNG.
         *
         *      - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
         */
        readonly post: operations["createSettingsLogoImage"];
    };
    readonly "/settings/search/filters": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Enabled Filters
         * @description Returns a list of enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters. These filters will be used if a store does not have contextual overrides.
         */
        readonly get: operations["getSettingsEnabledSearchFilters"];
        /**
         * Update Enabled Filters
         * @description Updates enabled default [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings) filters.
         */
        readonly put: operations["updateSettingsEnabledSearchFilters"];
    };
    readonly "/settings/search/filters/available": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Available Filters
         * @description Returns a list of filters available to power [Product Filtering](https://support.bigcommerce.com/s/article/Product-Filtering-Settings).
         */
        readonly get: operations["getSettingsAvailableFilters"];
    };
    readonly "/settings/search/filters/contexts": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Contextual Filters
         * @description Returns a list of contextual filters enabled for a particular channel or category.
         *
         *     **Usage Notes**
         *
         *     Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
         *
         *     The order of the returned filters will match the sort order of the filters on the storefront.
         */
        readonly get: operations["getSettingsFiltersContexts"];
        /**
         * Upsert Contextual Filters
         * @description Upserts contextual filters for a particular channel or category.
         *
         *     **Usage Notes**
         *
         *     Contextual filters allow you to configure the enabled filters per channel or category, so that shoppers can filter by the most relevant criteria.
         *
         *     You can change the order of the filters on the live site by changing the order of the filters you send.
         */
        readonly put: operations["upsertSettingsFiltersContexts"];
    };
    readonly "/settings/store/locale": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Locale Settings
         * @description Returns global locale settings.
         */
        readonly get: operations["getSettingsLocale"];
        /**
         * Update Locale Settings
         * @description Updates global locale settings.
         */
        readonly put: operations["updateSettingsLocale"];
    };
    readonly "/settings/store/profile": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Store Profile Settings
         * @description Returns store profile settings.
         *
         *      - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        readonly get: operations["getSettingsStoreProfile"];
        /**
         * Update Store Profile Settings
         * @description Updates store profile settings.
         *
         *      - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        readonly put: operations["updateSettingsStoreProfile"];
    };
    readonly "/settings/storefront/category": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Storefront Category Settings
         * @description Returns category settings.
         *
         *      - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        readonly get: operations["getSettingsStorefrontCategory"];
        /**
         * Update Storefront Category Settings
         * @description Updates category settings.
         *
         *      - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        readonly put: operations["updateSettingsStorefrontCategory"];
    };
    readonly "/settings/storefront/product": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Storefront Product Settings
         * @description Returns product settings.
         *
         *      - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        readonly get: operations["getSettingsStorefrontProduct"];
        /**
         * Update Storefront Product Settings
         * @description Updates product settings.
         *
         *      - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        readonly put: operations["updateSettingsStorefrontProduct"];
    };
    readonly "/settings/storefront/robotstxt": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Robots.txt Settings
         * @description Returns Robots.txt settings.
         *
         *      - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        readonly get: operations["getSettingsRobotsTxt"];
        /**
         * Update Robots.txt Settings
         * @description Updates Robots.txt settings.
         *
         *      - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        readonly put: operations["updateSettingsRobotsTxt"];
    };
    readonly "/settings/storefront/search": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Storefront Search Settings
         * @description Returns search settings.
         *
         *      - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        readonly get: operations["getSettingsStorefrontSearch"];
        /**
         * Update Storefront Search Settings
         * @description Updates search settings.
         *
         *      - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        readonly put: operations["updateSettingsStorefrontSearch"];
    };
    readonly "/settings/storefront/security": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Storefront Security Settings
         * @description Returns security settings.
         *
         *      - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        readonly get: operations["getSettingsStorefrontSecurity"];
        /**
         * Update Storefront Security Settings
         * @description Updates security settings.
         *
         *      - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        readonly put: operations["updateSettingsStorefrontSecurity"];
    };
    readonly "/settings/storefront/seo": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Storefront SEO Settings
         * @description Returns SEO settings.
         *
         *      - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        readonly get: operations["getSettingsStorefrontSeo"];
        /**
         * Update Storefront SEO Settings
         * @description Updates SEO settings.
         *
         *      - You can use `channel_id` as a query parameter to update channel-specific settings. If omitted, you will only interact with the global settings.
         *
         *      - You can use `channel_id` in the request body of a headless channel of this endpoint to control the `www_redirect` settings for the headless channel's unique checkout URL.
         *
         *      - `null` should be supplied to delete overrides per given channel and to inherit values from a global level.
         */
        readonly put: operations["updateSettingsStorefrontSeo"];
    };
    readonly "/settings/storefront/status": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Storefront Status
         * @description Returns storefront status-related settings.
         *
         *      - Channel ID can be used as a query parameter for getting channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested and values are inherited from global level.
         */
        readonly get: operations["getSettingsStorefrontStatus"];
        /**
         * Update Storefront Status
         * @description Updates storefront status-related settings.
         *
         *      - Channel ID can be used as a query parameter for updating channel-specific settings. If omitted, you will interact with the global settings only.
         *
         *      - `null` should be supplied to delete overrides per given channel and to inherit values from global level. Partial updates are not supported and all settings should be supplied with `null` value in order to delete overrides per channel.
         */
        readonly put: operations["updateSettingsStorefrontStatus"];
    };
    readonly "/settings/inventory": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Inventory Settings
         * @description Get Inventory Settings
         */
        readonly get: operations["getSettingsInventory"];
        /**
         * Update Inventory Settings
         * @description Update inventory settings
         */
        readonly put: operations["updateSettingsInventory"];
    };
    readonly "/settings/store/units-of-measurement": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Units of Measurement Settings
         * @description Get settings for [units of measurements](https://support.bigcommerce.com/s/article/Store-Settings?language=en_US#physical).
         */
        readonly get: operations["getSettingsMeasurementUnits"];
        /**
         * Update Units of Measurement Settings
         * @description Update settings for [units of measurements](https://support.bigcommerce.com/s/article/Store-Settings?language=en_US#physical).
         *
         *     The endpoint does not support partial updates. Provide all fields to update global or channel-level settings.
         *
         *     Create channel-level settings, or overrides for a channel, using the `channel_id`  query parameter.
         *
         *     To delete overrides for a channel, supply `null` as a value for all fields. A channel then inherits global values.
         *
         *     The endpoint does not support 'null' as a value for global-level settings.
         */
        readonly put: operations["updateSettingsMeasurementUnits"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AddressTypeEnumValues
         * @description Only supports manipulation on a global level.
         * @default Home Office
         * @enum {string}
         */
        readonly AddressTypeEnumValues: "Home Office" | "Commercial Office" | "Retail" | "Warehouse";
        readonly AnalyticsProvider: {
            /** @description Web Analytics Provider ID. */
            readonly id?: number;
            /** @description Channels ID */
            readonly channel_id?: number;
            /** @description Web Analytics Provider title. */
            readonly name?: string;
            /** @description Web Analytics Provider code. */
            readonly code?: string;
            /** @description Flag indicates if Web Analytics Provider is enabled or not. */
            readonly enabled?: boolean;
            readonly data_tag_enabled?: boolean;
            readonly version?: number;
            readonly api_secret?: string;
        };
        readonly AnalyticsProviders: readonly components["schemas"]["AnalyticsProvider"][];
        /** AvailableFilter */
        readonly AvailableFilter: components["schemas"]["AvailableNormalFilter"] | components["schemas"]["AvailablePriceFilter"] | components["schemas"]["AvailableOtherFilter"];
        /** AvailableNormalFilter */
        readonly AvailableNormalFilter: {
            readonly id?: string;
            readonly name?: string;
            readonly product_count?: number;
            /** @enum {string} */
            readonly type?: "category" | "brand" | "rating" | "product";
        };
        /** AvailableOtherFilter */
        readonly AvailableOtherFilter: {
            readonly id?: string;
            readonly name?: string;
            /** @enum {string} */
            readonly type?: "other";
        };
        /** AvailablePriceFilter */
        readonly AvailablePriceFilter: {
            readonly id?: string;
            readonly name?: string;
            readonly price_range_max?: number;
            readonly price_range_min?: number;
            /** @enum {string} */
            readonly type?: "price";
        };
        /** @description Error payload for the BigCommerce API.
         *      */
        readonly BaseError: {
            readonly instance?: string;
            /** @description The HTTP status code.
             *      */
            readonly status?: number;
            /** @description The error title describing the particular error.
             *      */
            readonly title?: string;
            readonly type?: string;
        };
        readonly CatalogSettings: {
            readonly auto_approve_reviews?: boolean;
            readonly enable_product_comparisons?: boolean;
        };
        /**
         * CategoryListingModeEnumValues
         * @enum {string}
         */
        readonly CategoryListingModeEnumValues: "current_category_only" | "child_categories" | "child_categories_if_category_empty";
        /** ConfiguredFilter */
        readonly ConfiguredFilter: components["schemas"]["EnabledProductFilter"] | components["schemas"]["EnabledPriceFilter"] | components["schemas"]["EnabledCategoryFilter"] | components["schemas"]["EnabledBrandFilter"] | components["schemas"]["EnabledRatingFilter"] | components["schemas"]["EnabledMiscFilter"];
        /** ConfiguredFilters */
        readonly ConfiguredFilters: readonly components["schemas"]["ConfiguredFilter"][];
        /**
         * ConfiguredFiltersOverride
         * @description A new set of enabled Product Filtering filters which should display in a particular context, such as on a particular Channel, or while viewing a particular Category. Array order indicates the display order on the storefront.
         */
        readonly ConfiguredFiltersOverride: {
            readonly context?: components["schemas"]["SearchFilterOverrideContextIdentifier"];
            readonly data?: components["schemas"]["ConfiguredFilters"];
        };
        /**
         * ContentSortEnumValues
         * @default relevance
         * @enum {string}
         */
        readonly ContentSortEnumValues: "relevance" | "alphaasc" | "alphadesc";
        /** Detailed Errors */
        readonly DetailedErrors: {
            readonly [key: string]: unknown;
        };
        /**
         * EnabledBrandFilter
         * @description A storefront filter for product brand
         */
        readonly EnabledBrandFilter: {
            readonly collapsed_by_default?: boolean;
            readonly display_name?: string;
            readonly display_product_count?: boolean;
            /** @description The ID of the filter. */
            readonly id?: string;
            readonly is_enabled?: boolean;
            /** @enum {integer} */
            readonly items_to_show?: 5 | 10 | 15;
            /** @enum {string} */
            readonly sort_by?: "alpha" | "item_count";
            /** @enum {string} */
            readonly type?: "brand";
        };
        /**
         * EnabledCategoryFilter
         * @description A storefront filter for product category
         */
        readonly EnabledCategoryFilter: {
            readonly collapsed_by_default?: boolean;
            readonly display_name?: string;
            readonly display_product_count?: boolean;
            /** @description The ID of the filter. */
            readonly id?: string;
            readonly is_enabled?: boolean;
            /** @enum {integer} */
            readonly items_to_show?: 5 | 10 | 15;
            /** @enum {string} */
            readonly type?: "category";
        };
        /**
         * EnabledMiscFilter
         * @description Miscellaneous filters which appear as a group.
         */
        readonly EnabledMiscFilter: {
            readonly collapsed_by_default?: boolean;
            readonly display_name?: string;
            readonly display_product_count?: boolean;
            /** @description The ID of the filter. */
            readonly id?: string;
            readonly is_enabled?: boolean;
            readonly show_free_shipping_filter?: boolean;
            readonly show_in_stock_filter?: boolean;
            readonly show_is_featured_filter?: boolean;
            readonly show_product_count?: boolean;
            /** @enum {string} */
            readonly type?: "other";
        };
        /**
         * EnabledPriceFilter
         * @description A filter based on the product’s price, shown as a price range on the storefront.
         */
        readonly EnabledPriceFilter: {
            readonly collapsed_by_default?: boolean;
            readonly display_name?: string;
            /** @description The ID of the filter. */
            readonly id?: string;
            readonly is_enabled?: boolean;
            /** @enum {string} */
            readonly type?: "price";
        };
        /**
         * EnabledProductFilter
         * @description A filter that uses product options and custom field data.
         */
        readonly EnabledProductFilter: {
            readonly collapsed_by_default?: boolean;
            readonly display_name?: string;
            readonly display_product_count?: boolean;
            /** @description The ID of the filter. */
            readonly id?: string;
            readonly is_enabled?: boolean;
            /** @enum {integer} */
            readonly items_to_show?: 5 | 10 | 15;
            /** @enum {string} */
            readonly sort_by?: "alpha" | "option_values" | "item_count";
            /** @enum {string} */
            readonly type?: "product";
        };
        /**
         * EnabledRatingFilter
         * @description A filter based on product review ratings.
         */
        readonly EnabledRatingFilter: {
            readonly collapsed_by_default?: boolean;
            readonly display_name?: string;
            /** @description The ID of the filter. */
            readonly id?: string;
            readonly is_enabled?: boolean;
            /** @enum {string} */
            readonly type?: "rating";
        };
        readonly EnabledTransactionalEmails: {
            readonly abandoned_cart_email?: boolean;
            readonly account_details_changed_email?: boolean;
            readonly combined_order_status_email?: boolean;
            readonly create_account_email?: boolean;
            readonly create_guest_account_email?: boolean;
            readonly gift_certificate_email?: boolean;
            readonly invoice_email?: boolean;
            readonly order_message_notification_email?: boolean;
            readonly product_review_email?: boolean;
            readonly return_confirmation_email?: boolean;
            readonly return_statuschange_email?: boolean;
        };
        /** @description A standard error object. */
        readonly Error: {
            readonly code: string;
            readonly message?: string;
        };
        readonly ErrorResponse: components["schemas"]["BaseError"] & {
            readonly errors?: components["schemas"]["DetailedErrors"];
        };
        readonly ErrorResponse400: {
            readonly schema?: components["schemas"]["Error"];
        };
        readonly ErrorResponse404: {
            readonly schema?: components["schemas"]["Error"];
        };
        readonly ErrorResponse409: {
            readonly schema?: components["schemas"]["Error"];
        };
        readonly ErrorResponse422: {
            readonly schema?: components["schemas"]["Error"];
        };
        /**
         * HSTSMaxAgeEnumValues
         * @enum {string}
         */
        readonly HSTSMaxAgeEnumValues: "zero_seconds" | "five_minutes" | "one_year";
        readonly InventoryNotificationsSettings: {
            readonly low_stock_notification_address?: readonly string[];
            readonly out_of_stock_notification_address?: readonly string[];
        };
        readonly InventorySettings: {
            /**
             * @description Describes storefront behavior when product is out of stock.
             * @enum {string}
             */
            readonly product_out_of_stock_behavior?: "do_nothing" | "hide_product" | "hide_product_and_accessible" | "hide_product_and_redirect";
            /**
             * @description Describes storefront behavior when variant is out of stock.
             * @enum {string}
             */
            readonly option_out_of_stock_behavior?: "do_nothing" | "hide_option" | "label_option";
            /**
             * @description Describes when stock levels are updated.
             *
             *     Global settings apply when inventory changes through a [manual order](https://support.bigcommerce.com/s/article/Creating-a-Manual-Order?language=en_US). Settings for a channel apply when inventory changes through an order in a channel. These settings affect webhooks that trigger from order-related events, including [product](/docs/integrations/webhooks/events#products), [SKU](/docs/integrations/webhooks/events#skus), and [inventory](/docs/integrations/webhooks/events/inventory-location#inventory) webhooks.
             * @enum {string}
             */
            readonly update_stock_behavior?: "order_placed" | "order_completed_or_shipped";
            /** @description Describes whether stock levels automatically adjust when you edit an order.
             *
             *     Global settings apply when inventory changes through a [manual order](https://support.bigcommerce.com/s/article/Creating-a-Manual-Order?language=en_US). Settings for a channel apply when inventory changes through an order in a channel. These settings affect webhooks that trigger from order-related events, including [product](/docs/integrations/webhooks/events#products), [SKU](/docs/integrations/webhooks/events#skus), and [inventory](/docs/integrations/webhooks/events/inventory-location#inventory) webhooks.   */
            readonly edit_order_stock_adjustment?: boolean;
            /** @description Describes whether stock levels automatically adjust when you refund or cancel an order.
             *
             *     Global settings apply when inventory changes through a [manual order](https://support.bigcommerce.com/s/article/Creating-a-Manual-Order?language=en_US). Settings for a channel apply when inventory changes through an order in a channel. These settings affect webhooks that trigger from order-related events, including [product](/docs/integrations/webhooks/events#products), [SKU](/docs/integrations/webhooks/events#skus), and [inventory](/docs/integrations/webhooks/events/inventory-location#inventory) webhooks.   */
            readonly refund_order_stock_adjustment?: boolean;
            /**
             * @description Describes whether a storefront displays stock levels.
             * @enum {string}
             */
            readonly stock_level_display?: "dont_show" | "show" | "show_when_low";
            /**
             * @description Out of stock message displayed to shoppers.
             * @example Currently out of stock
             */
            readonly default_out_of_stock_message?: string;
            /** @description Describes whether an option is hidden in product filtering. Applies when `option_out_of_stock_behavior` is set to `label_option`.  */
            readonly hide_in_product_filtering?: boolean;
            /**
             * @description Describes whether pre-order stock levels are shown.
             * @default false
             * @example true
             */
            readonly show_pre_order_stock_levels: boolean;
            /**
             * @description Describes whether out-of-stock messages are shown on product listing pages.
             * @default false
             * @example true
             */
            readonly show_out_of_stock_message: boolean;
        };
        /** @description The basic locale settings for a store, used to give shopper information about languages, countries, etc. */
        readonly Locale: {
            /**
             * @default en
             * @example en, en-us
             */
            readonly default_shopper_language: string;
            /**
             * @description Determines whether to display the storefront content in the shopperʼs browser language or the shopperʼs selected default language.
             *
             *     Available values:
             *     * `browser` - language updates automatically based on the shopper browser language. Multiple languages are supported.
             *     * `default_shopper_language` - content is displayed in a single language based on the set `default_shopper_language`. Only the selected language is supported.
             * @default default_shopper_language
             * @example default_shopper_language
             * @enum {string}
             */
            readonly shopper_language_selection_method: "browser" | "default_shopper_language";
            /** @default United States */
            readonly store_country: string;
        };
        readonly LogoSettings: {
            readonly favicon_url?: string;
            readonly logo_image_url?: string;
            readonly logo_text?: string;
            /** @enum {string} */
            readonly type?: "image" | "text";
        };
        readonly LogoSettingsUpdate: {
            readonly logo_text?: string;
            /** @enum {string} */
            readonly type?: "image" | "text";
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly MetaOpen: {
            readonly [key: string]: unknown;
        };
        readonly MetaPaginationObject: {
            readonly pagination?: {
                /** @example 5 */
                readonly count?: number;
                /** @example 1 */
                readonly current_page?: number;
                readonly links?: {
                    /** @example ?limit=5&page=1 */
                    readonly current?: string;
                    /** @example ?limit=5&page=2 */
                    readonly next?: string;
                };
                /** @example 5 */
                readonly per_page?: number;
                /** @example 246 */
                readonly total?: number;
                /** @example 50 */
                readonly total_pages?: number;
            };
        };
        /**
         * ProductSortEnumValues
         * @description The available sorts for PLP pages.
         * @default bestselling
         * @enum {string}
         */
        readonly ProductSortEnumValues: "featured" | "bestselling" | "newest" | "alphaasc" | "alphadesc" | "pricedesc" | "priceasc" | "avgcustomerreview" | "relevance";
        readonly RobotsTxtSettings: {
            readonly robots_txt_ssl?: string;
        };
        readonly SEOSettings: {
            readonly meta_description?: string;
            readonly meta_keywords?: string;
            readonly page_title?: string;
            /** @enum {string} */
            readonly www_redirect?: "www" | "no-www" | "none";
        };
        /** ContextIdentifier */
        readonly SearchFilterOverrideContextIdentifier: {
            readonly category_id?: number;
            readonly channel_id?: number;
        };
        /**
         * Store Profile
         * @description The basic profile settings for a store, used to give the shopper information about the business from which they are purchasing.
         */
        readonly StoreProfile: {
            readonly store_address?: string;
            readonly store_address_type?: components["schemas"]["AddressTypeEnumValues"];
            readonly store_email?: string;
            readonly store_name?: string;
            readonly store_phone?: string;
        };
        readonly StorefrontCategorySettings: {
            readonly category_tree_depth?: number;
            readonly default_product_sort?: components["schemas"]["ProductSortEnumValues"];
            readonly listing_mode?: components["schemas"]["CategoryListingModeEnumValues"];
        };
        /** StorefrontProductSettings */
        readonly StorefrontProductSettings: {
            /**
             * @description Determines the visibility of the product price.
             *
             * @example true
             */
            readonly show_product_price?: boolean;
            /**
             * @description Determines the visibility of the product SKU.
             *
             * @example true
             */
            readonly show_product_sku?: boolean;
            /**
             * @description Determines the visibility of the productʼs weight.
             *
             * @example false
             */
            readonly show_product_weight?: boolean;
            /**
             * @description Determines the visibility of the productʼs brand.
             *
             * @example true
             */
            readonly show_product_brand?: boolean;
            /**
             * @description Determines the visibility of the productʼs shipping option.
             *
             * @example false
             */
            readonly show_product_shipping?: boolean;
            /**
             * @description Determines the visibility of the productʼs rating.
             *
             * @example true
             */
            readonly show_product_rating?: boolean;
            /**
             * @description Determines the visibility of the Add to Cart link.
             *
             * @example true
             */
            readonly show_add_to_cart_link?: boolean;
            /**
             * @description The productʼs pre-order message. If undefined, the message defaults to the storewide setting.
             *
             * @example Preorder message
             */
            readonly default_preorder_message?: string;
            /**
             * @example show_one
             * @enum {string}
             */
            readonly show_breadcrumbs_product_pages?: "show_one" | "show_none";
            /**
             * @description Determines the visibility of the Add to Cart quantity setting.
             *
             * @example true
             */
            readonly show_add_to_cart_qty_box?: boolean;
            /**
             * @description Determines the visibility of the Add to Wishlist setting.
             *
             * @example true
             */
            readonly show_add_to_wishlist?: boolean;
            /**
             * @description Determines the visibility of the price.
             *
             * @example false
             */
            readonly hide_price_from_guests?: boolean;
        };
        readonly StorefrontSearchSettings: {
            readonly content_product_sort: components["schemas"]["ContentSortEnumValues"];
            readonly default_product_sort: components["schemas"]["ProductSortEnumValues"];
            /** @description Controls whether Product Filtering feature is active on the storefront. Only supports manipulation on a global level. */
            readonly product_filtering_enabled: boolean;
            readonly search_suggest: boolean;
        };
        /** StorefrontSecuritySettings */
        readonly StorefrontSecuritySettings: {
            readonly csp_header?: {
                readonly enabled?: boolean;
                readonly header_value?: string;
            };
            readonly hsts?: {
                readonly enabled?: boolean;
                readonly include_preload?: boolean;
                readonly include_subdomains?: boolean;
                readonly max_age?: components["schemas"]["HSTSMaxAgeEnumValues"];
            };
            readonly sitewide_https_enabled?: boolean;
            readonly x_frame_options_header?: {
                readonly allowed_url?: string;
                readonly enabled?: boolean;
                /** @enum {string} */
                readonly setting?: "deny" | "same_origin" | "allow_from_url";
            };
        };
        readonly StorefrontStatus: {
            readonly down_for_maintenance_message?: string;
            readonly prelaunch_message?: string;
            /** @description A read-only value representing the auto-generated storefront password. */
            readonly prelaunch_password?: string;
        };
        readonly MeasurementUnitsSettings: {
            /**
             * @example Ounces
             * @enum {string}
             */
            readonly weight_measurement?: "LBS" | "Ounces" | "KGS" | "Grams" | "Tonnes";
            /**
             * @example Inches
             * @enum {string}
             */
            readonly length_measurement?: "Inches" | "Centimeters";
            /** @example . */
            readonly decimal_token?: string;
            /** @example , */
            readonly thousands_token?: string;
            /** @example 2 */
            readonly decimal_places?: number;
            /**
             * @example depth
             * @enum {string}
             */
            readonly factoring_dimension?: "depth" | "height" | "width";
        };
    };
    responses: {
        /** @description OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
        readonly "200-storefront-product-settings": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["StorefrontProductSettings"];
                    readonly meta?: components["schemas"]["MetaOpen"];
                };
            };
        };
        /** @description `422 Unprocessable Entity` Provided settings could not be applied for some reason - detailed errors in the response.
         *      */
        readonly "422ErrorResp": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly errors?: {
                        /** @example Incorrect value [current__only], it should match one of: current_category_only,child_categories_if_category_empty,child_categories; Incorrect value [besling], it should match one of: featured, newest, bestselling, alphaasc, alphadesc, avgcustomerreview, priceasc, pricedesc, relevance */
                        readonly ""?: string;
                    };
                    /** @example 422 */
                    readonly status?: number;
                    /** @example JSON data is missing or invalid */
                    readonly title?: string;
                    /** @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes */
                    readonly type?: string;
                };
            };
        };
    };
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
        /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
        readonly ChannelIdParam: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getAnalyticsProviders: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["AnalyticsProviders"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly getAnalyticsProvider: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description Web Analytics Provider ID. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Successful operation. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["AnalyticsProvider"];
                };
            };
            /** @description Bad request. Authentication Required. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse400"];
                };
            };
            /** @description The requested resource was not found. Please specify valid Web Analytics Provider ID. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse404"];
                };
            };
        };
    };
    readonly updateAnalyticsProvider: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description Web Analytics Provider ID. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly code?: string;
                    readonly data_tag_enabled?: boolean;
                    readonly enabled?: boolean;
                    readonly is_oauth_connected?: unknown;
                    readonly name?: string;
                    readonly version?: number;
                };
            };
        };
        readonly responses: {
            /** @description Successful operation. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["AnalyticsProvider"];
                };
            };
            /** @description Bad request. Authentication Required. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse400"];
                };
            };
            /** @description The requested resource was not found. Please specify valid Web Analytics Provider ID. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse404"];
                };
            };
            /** @description Web Analytics Provider was in conflict with another Web Analytics Provider. This can be caused by duplicated unique values (such as ID). */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse409"];
                };
            };
            /** @description Web Analytics Provider data was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse422"];
                };
            };
        };
    };
    readonly getSettingsCatalog: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["CatalogSettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly updateSettingsCatalog: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /** @description null set for a particular field removes override on a channel level and means inheritance from a global level */
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["CatalogSettings"];
            };
        };
        readonly responses: {
            /** @description OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["CatalogSettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly getSettingsEmailStatuses: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["EnabledTransactionalEmails"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly updateSettingsEmailStatuses: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["EnabledTransactionalEmails"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["EnabledTransactionalEmails"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly createSettingsFaviconImage: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "multipart/form-data": {
                    /** Format: binary */
                    readonly FaviconFile?: string;
                };
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to save! */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getSettingsInventoryNotifications: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["InventoryNotificationsSettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly updateSettingsInventoryNotifications: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /** @description null set for a particular field removes override on a channel level and means inheritance from a global level */
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["InventoryNotificationsSettings"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getSettingsLogo: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["LogoSettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly updateSettingsLogo: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["LogoSettingsUpdate"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["LogoSettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly createSettingsLogoImage: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "multipart/form-data": {
                    /** Format: binary */
                    readonly LogoFile?: string;
                };
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getSettingsEnabledSearchFilters: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ConfiguredFilters"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly updateSettingsEnabledSearchFilters: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ConfiguredFilters"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["ConfiguredFilters"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly getSettingsAvailableFilters: {
        readonly parameters: {
            readonly query?: {
                /** @description Narrows the list of available filters based on channel ID. Only products currently assigned to the given Channel will be considered. */
                readonly channel_id?: number;
                /** @description Narrows the list of available filters based on category ID. You can display settings to show products from the provided category, subcategories only, or both the category and its child categories. */
                readonly category_id?: number;
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["AvailableFilter"][];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly getSettingsFiltersContexts: {
        readonly parameters: {
            readonly query?: {
                /** @description Only return contextual overrides related to a particular Channel. */
                readonly channel_id?: number;
                /** @description Only return contextual overrides related to a particular Category. */
                readonly category_id?: number;
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ConfiguredFiltersOverride"][];
                        readonly meta?: components["schemas"]["MetaPaginationObject"];
                    };
                };
            };
        };
    };
    readonly upsertSettingsFiltersContexts: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ConfiguredFiltersOverride"][];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ConfiguredFiltersOverride"][];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly getSettingsLocale: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Locale"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly updateSettingsLocale: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["Locale"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Locale"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
            /** @description Provided settings could not be applied for some reason - detailed errors in the response. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readonly getSettingsStoreProfile: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["StoreProfile"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly updateSettingsStoreProfile: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["StoreProfile"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["StoreProfile"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
            /** @description Provided settings could not be applied for some reason - detailed errors in the response. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readonly getSettingsStorefrontCategory: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK. `null` indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["StorefrontCategorySettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly updateSettingsStorefrontCategory: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["StorefrontCategorySettings"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["StorefrontCategorySettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
            readonly 422: components["responses"]["422ErrorResp"];
        };
    };
    readonly getSettingsStorefrontProduct: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["200-storefront-product-settings"];
        };
    };
    readonly updateSettingsStorefrontProduct: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["StorefrontProductSettings"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["200-storefront-product-settings"];
            readonly 422: components["responses"]["422ErrorResp"];
        };
    };
    readonly getSettingsRobotsTxt: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["RobotsTxtSettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly updateSettingsRobotsTxt: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["RobotsTxtSettings"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["RobotsTxtSettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly getSettingsStorefrontSearch: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["StorefrontSearchSettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly updateSettingsStorefrontSearch: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["StorefrontSearchSettings"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["StorefrontSearchSettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly getSettingsStorefrontSecurity: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["StorefrontSecuritySettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly updateSettingsStorefrontSecurity: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["StorefrontSecuritySettings"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["StorefrontSecuritySettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly getSettingsStorefrontSeo: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["SEOSettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly updateSettingsStorefrontSeo: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["SEOSettings"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["SEOSettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
            readonly 422: components["responses"]["422ErrorResp"];
        };
    };
    readonly getSettingsStorefrontStatus: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["StorefrontStatus"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly updateSettingsStorefrontStatus: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["StorefrontStatus"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["StorefrontStatus"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly getSettingsInventory: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["InventorySettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
            /** @description Provided settings could not be applied for some reason - detailed errors in the response. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readonly updateSettingsInventory: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /** @description null set for a particular field removes override on a channel level and means inheritance from a global level */
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["InventorySettings"];
            };
        };
        readonly responses: {
            /** @description OK, null indicates that a particular field has not been overridden on a channel level when channel level settings are requested */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["InventorySettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly getSettingsMeasurementUnits: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK. When you request channel-level settings, `null` indicates that a channel does not have overrides. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["MeasurementUnitsSettings"];
                        readonly meta?: {
                            readonly [key: string]: unknown;
                        };
                    };
                };
            };
            /** @description The provided settings could not be applied. See detailed errors in the response. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readonly updateSettingsMeasurementUnits: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-specific settings. If omitted, you will interact with the global settings only. */
                readonly channel_id?: components["parameters"]["ChannelIdParam"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["MeasurementUnitsSettings"];
            };
        };
        readonly responses: {
            /** @description OK. When you request channel-level settings, `null` indicates that a channel does not have overrides. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["MeasurementUnitsSettings"];
                        readonly meta?: {
                            readonly [key: string]: unknown;
                        };
                    };
                };
            };
        };
    };
}
