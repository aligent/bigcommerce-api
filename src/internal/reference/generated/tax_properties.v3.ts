/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/tax/properties": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Tax Properties
         * @description Retrieve all tax properties defined in this store.
         */
        readonly get: operations["getTaxProperties"];
        /**
         * Update Tax Properties
         * @description Update one or more tax properties. Only fields specified will be adjusted.
         */
        readonly put: operations["updateTaxProperties"];
        /**
         * Create Tax Properties
         * @description Create one or more tax properties. A **code** and a **display name** must be included when creating tax properties.
         */
        readonly post: operations["createTaxProperties"];
        /**
         * Delete Tax Properties
         * @description Delete one or multiple tax properties. A tax property must have zero usages within product tax properties before you can delete it.
         */
        readonly delete: operations["deleteTaxProperties"];
    };
    readonly "/tax/products/properties": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Product Tax Properties
         * @description Retrieve the tax properties that are associated with one or more products.
         */
        readonly get: operations["getProductsTaxProperties"];
        /**
         * Update Product Tax Properties
         * @description Update the tax properties associated with one or more products. This operation will be additive to any tax property values already associated with the product, overwriting any existing tax property values.
         */
        readonly put: operations["updateProductTaxProperties"];
        /**
         * Delete Product Tax Properties
         * @description Delete tax properties that are associated with one or more products.
         */
        readonly delete: operations["deleteProductTaxProperties"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        readonly Property: {
            /**
             * @description An internal identifier used by other operations.
             * @example 1
             */
            readonly id?: number;
            /**
             * @description The unique string programmatically references this unique tax property by the tax provider. Merchants should liaise with their tax provider to explore supported values and functions.
             * @example A-123456789
             */
            readonly code?: string;
            /**
             * @description The human-readable name for this property. This string will be displayed on the Products screen as a field label.
             * @example Example Tax Property 1
             */
            readonly display_name?: string;
            /**
             * @description Optional. Additional detail about this tax property may help guide merchants. This string will be displayed on the Products screen as a tooltip associated with the relevant field.
             * @example Food Industry
             */
            readonly description?: string;
            /**
             * Format: date-time
             * @description Datetime.
             * @example 2022-07-21T19:33:57+00:00
             */
            readonly created_at?: string;
            /**
             * Format: date-time
             * @description Datetime.
             * @example 2022-07-21T19:33:57+00:00
             */
            readonly updated_at?: string;
            /**
             * @description The type of entity that the tax property can be associated with.
             * @example PRODUCT
             * @enum {string}
             */
            readonly type?: "PRODUCT" | "CUSTOMER";
        };
        readonly PropertyPOST: {
            /**
             * @description The unique string programmatically references this unique tax property by the tax provider. Merchants should liaise with their tax provider to explore supported values and functions.
             * @example A-123456789
             */
            readonly code: string;
            /**
             * @description The human-readable name for this property. This string will be displayed on the Products screen as a field label.
             * @example Example Tax Property 1
             */
            readonly display_name: string;
            /**
             * @description Additional detail about this tax property may help guide merchants. This string will be displayed on the Products screen as a tooltip associated with the relevant field.
             * @example Food Industry
             */
            readonly description?: string;
            /**
             * @description The type of entity that the tax property can be associated with. Default
             * @example PRODUCT
             * @enum {string}
             */
            readonly type: "PRODUCT" | "CUSTOMER";
        };
        readonly PropertyPUT: {
            /**
             * @description An internal identifier used by other operations.
             * @example 1
             */
            readonly id: number;
            /**
             * @description The unique string programmatically references this unique tax property by the tax provider. Merchants should liaise with their tax provider to explore supported values and functions.
             * @example A-123456789
             */
            readonly code?: string;
            /**
             * @description The human-readable name for this property. This string will be displayed on the Products screen as a field label.
             * @example Example Tax Property 1
             */
            readonly display_name?: string;
            /**
             * @description Optional. Additional detail about this tax property may help guide merchants. This string will be displayed on the Products screen as a tooltip associated with the relevant field.
             * @example Food Industry
             */
            readonly description?: string;
        };
        /** @description A collection of tax property values associated with a product. */
        readonly ProductTaxProperty: {
            /**
             * @description A reference to the product that the product tax properties are associated with.
             * @example 157
             */
            readonly product_id: number;
            /**
             * @description A simple key-value pairing. The tax property must be defined to associate a value. These values will be sent to the active tax provider during Tax Provider API operations whenever the associated product is included in the operation.
             * @example {
             *       "A-123456789": "26",
             *       "B-6731789": "200"
             *     }
             */
            readonly tax_properties: {
                readonly [key: string]: unknown;
            };
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly MetaOpen: {
            readonly [key: string]: unknown;
        };
    };
    responses: never;
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
        /** @description ID of product. To target multiple products, provide a comma-separated list of IDs such as `12,34,56`. */
        readonly product_idin: readonly number[];
        /** @description ID of tax property. To target multiple tax properties, provide a comma-separated list of IDs such as `12,34,56`. */
        readonly idin: readonly number[];
        /** @description ID of tax property. To target multiple tax properties, provide a comma-separated list of IDs such as `12,34,56`. */
        readonly idin_required: readonly number[];
        /** @description Filter result by the type of tax property. To target multiple types, provide a comma-separated list of types such as `customer,product`. */
        readonly typein: readonly string[];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getTaxProperties: {
        readonly parameters: {
            readonly query?: {
                /** @description ID of tax property. To target multiple tax properties, provide a comma-separated list of IDs such as `12,34,56`. */
                readonly "id:in"?: components["parameters"]["idin"];
                /** @description Filter result by the type of tax property. To target multiple types, provide a comma-separated list of types such as `customer,product`. */
                readonly "type:in"?: components["parameters"]["typein"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Property"][];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
            /** @description Request parameters invalid */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly updateTaxProperties: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["PropertyPUT"][];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Property"][];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
            /** @description The request body does not meet specifications. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly createTaxProperties: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["PropertyPOST"][];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Property"][];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
            /** @description The request body does not meet specifications. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly deleteTaxProperties: {
        readonly parameters: {
            readonly query: {
                /** @description ID of tax property. To target multiple tax properties, provide a comma-separated list of IDs such as `12,34,56`. */
                readonly "id:in": components["parameters"]["idin_required"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description No Content */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request parameters invalid */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tax Property is in use and cannot be deleted. */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getProductsTaxProperties: {
        readonly parameters: {
            readonly query: {
                /** @description ID of product. To target multiple products, provide a comma-separated list of IDs such as `12,34,56`. */
                readonly "product_id:in": components["parameters"]["product_idin"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ProductTaxProperty"][];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
            /** @description Request parameters invalid */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly updateProductTaxProperties: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ProductTaxProperty"][];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ProductTaxProperty"][];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
            /** @description The request body does not meet specifications. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly deleteProductTaxProperties: {
        readonly parameters: {
            readonly query: {
                /** @description ID of product. To target multiple products, provide a comma-separated list of IDs such as `12,34,56`. */
                readonly "product_id:in": components["parameters"]["product_idin"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description No Content */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request parameters invalid */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
