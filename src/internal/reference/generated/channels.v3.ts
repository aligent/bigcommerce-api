/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/channels": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Channels
         * @description Returns a list of *Channels*.
         *
         *     Will always return the default BigCommerce storefront with an ID of `1`. This storefront is created by default when you provision a BigCommerce store.
         */
        readonly get: operations["getChannels"];
        /**
         * Create a Channel
         * @description Creates a *Channel*.
         */
        readonly post: operations["createChannel"];
    };
    readonly "/channels/{channel_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Channel
         * @description Returns a *Channel*. Channel ID `1` returns the default BigCommerce storefront.
         */
        readonly get: operations["getChannel"];
        /**
         * Update a Channel
         * @description Updates a *Channel*.
         *
         *     ## Updatable Fields
         *
         *     The following fields can be updated.
         *     * `name`
         *     * `external_id`
         *     * `status`
         *     * `is_listable_from_ui`
         *     * `is_visible`
         *
         *
         *     > #### Note
         *     > * Partial updates are supported. In most cases, if a field that *cannot* be updated is passed in, the API **will not** respond with an error. It returns a 200 response with the object, in which you will see the field(s) were not updated.
         *     > * `platform` and `type` cannot be updated after a channel is created.
         *     > * A channel with status `deleted` or `terminated` cannot be updated.
         */
        readonly put: operations["updateChannel"];
    };
    readonly "/channels/{channel_id}/active-theme": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Channel Active Theme
         * @description Returns details of the theme active on the specified channel.
         *     Does not support active Blueprint (legacy) themes.
         */
        readonly get: operations["getChannelActiveTheme"];
    };
    readonly "/channels/currency-assignments": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Channels Currency Assignments
         * @description Returns a list of currency assignments for all channels.
         */
        readonly get: operations["getAllCurrencyAssignments"];
        /**
         * Update Multiple Channels Currency Assignments
         * @description Updates enabled currencies and default currency for multiple channels. Note that currencies must be added first in the **Settings > Setup > Currencies** settings from an active MSF-enabled BigCommerce store control panel before the currencies can be assigned to a channel.
         */
        readonly put: operations["updateMultipleChannelsCurrencyAssignments"];
        /**
         * Create Multiple Channels Currency Assignments
         * @description Sets enabled currencies and default currency for multiple channels. Note that currencies must be added first in the **Settings > Setup > Currencies** settings from an active MSF-enabled BigCommerce store control panel before the currencies can be assigned to a channel.
         */
        readonly post: operations["createMultipleChannelsCurrencyAssignments"];
    };
    readonly "/channels/{channel_id}/currency-assignments": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        /**
         * Get Channel Currency Assignments
         * @description Returns a list of currency assignments for a specific channel.
         */
        readonly get: operations["getSingleChannelCurrencyAssignments"];
        /**
         * Update Channel Currency Assignments
         * @description Updates enabled currencies and default currency for a specific channel. Note that currencies must be added first in the **Settings > Setup > Currencies** settings from an active MSF-enabled BigCommerce store control panel before the currencies can be assigned to a channel.
         */
        readonly put: operations["updateSingleChannelCurrencyAssignments"];
        /**
         * Create Channel Currency Assignments
         * @description Sets enabled currencies and default currency for a specific channel. Note that currencies must be added first in the **Settings > Setup > Currencies** settings from an active MSF-enabled BigCommerce store control panel before the currencies can be assigned to a channel.
         */
        readonly post: operations["createSingleChannelCurrencyAssignments"];
        /**
         * Delete Channel Currency Assignments
         * @description Deletes currency assignments for a specific channel. Once done, this channel will inherit the store’s currency settings.
         */
        readonly delete: operations["deleteSingleChannelCurrencyAssignments"];
    };
    readonly "/channels/{channel_id}/listings": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        /**
         * Get Channel Listings
         * @description Returns a list of all *Channel Listings* for a specific channel. We recommend using this endpoint for non-storefront channels like marketplaces, marketing channels, and point of sale (POS) channels. Note that if the *Channel* is not found or there is no listing associated with the *Channel*, it will return a 200 response with empty data.
         */
        readonly get: operations["getChannelListings"];
        /**
         * Update Channel Listings
         * @description Updates one or more *Channel Listings* for a specific channel. We recommend using this endpoint for non-storefront channels like marketplaces, marketing channels, and point of sale (POS) channels.
         *
         *     > #### Note
         *     > * Partial updates are supported. In most cases, if a field that *cannot* be updated is passed in, the API **will not** respond with an error. It returns a 200 response with the object, in which you will see the field(s) were not updated.
         *     > * If a new variant is provided, the API will append the variant to the list. If a variant already exists, the API will update the existing variant. Other variants that are not provided in the payload remains unchanged.
         *     > * If `listing_id` does not exist, the API will return a 200 response with empty data.
         *     > * `listing_id` is required and cannot be less than or equal to zero.
         *     > * `product_id` cannot be updated after a channel listing is created.
         *     > * `product_id` of a variant must match the `product_id` of the channel listing.
         */
        readonly put: operations["updateChannelListings"];
        /**
         * Create Channel Listings
         * @description Creates one or more *Channel Listings* for a specific channel. We recommend using this endpoint for non-storefront channels like marketplaces, marketing channels, and point of sale (POS) channels.
         */
        readonly post: operations["createChannelListings"];
    };
    readonly "/channels/{channel_id}/listings/{listing_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
                /** @description The ID of a channel listing. */
                readonly listing_id: components["parameters"]["listing_id_path_param"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Channel Listing
         * @description Returns a *Channel Listing* for a specific channel. We recommend using this endpoint for non-storefront channels like marketplaces, marketing channels, and point of sale (POS) channels.
         */
        readonly get: operations["getChannelListing"];
    };
    readonly "/channels/{channel_id}/site/checkout-url": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        /**
         * Upsert a Siteʼs Checkout URL
         * @description Creates or updates (upserts) a siteʼs checkout URL
         */
        readonly put: operations["updateCheckoutUrl"];
        /**
         * Delete a Siteʼs Checkout URL
         * @description Deletes a siteʼs checkout URL. After deletion, a shared checkout URL is used.
         */
        readonly delete: operations["deleteCheckoutUrl"];
    };
    readonly "/channels/{channel_id}/site": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Channel Site
         * @description Alias of `GET /sites?channel_id=channel_id`
         *
         *     Returns site data for the specified channel.
         *
         */
        readonly get: operations["getChannelSite"];
        /**
         * Update a Channel Site
         * @description Updates a site for provided channel.
         */
        readonly put: operations["updateChannelSite"];
        /**
         * Create a Channel Site
         * @description Alias of POST `/sites`. Creates a site for provided channel.
         */
        readonly post: operations["createChannelSite"];
        /**
         * Delete a Channel Site
         * @description Deletes the Channelʼs site.
         */
        readonly delete: operations["deleteChannelSite"];
    };
    readonly "/channels/{channel_id}/channel-menus": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        /**
         * Get Channel Menus
         * @description Returns list of Control Panel side navigation menus for a channel.
         *
         */
        readonly get: operations["getChannelMenus"];
        /**
         * Create Channel Menus
         * @description Creates or replaces list of control panel side navigation menus for a channel.
         */
        readonly post: operations["createChannelMenus"];
        /**
         * Delete Channel Menus
         * @description Deletes control panel side navigation menus for a channel.
         */
        readonly delete: operations["deleteChannelMenus"];
    };
    readonly "/channels/{channel_id}/metafields": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        /**
         * Get Channel Metafields
         * @description Returns a list of metafields on a channel. Optional filter parameters can be passed in.
         */
        readonly get: operations["getChannelMetafields"];
        /**
         * Create a Channel Metafield
         * @description Creates a channel metafield.
         *
         *     **Note:** The maxiumum number of metafields allowed on each order, product, category, variant, channel, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        readonly post: operations["createChannelMetafield"];
    };
    readonly "/channels/{channel_id}/metafields/{metafield_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
                readonly metafield_id: string;
            };
            readonly cookie?: never;
        };
        /**
         * Get a Channel Metafield
         * @description Returns a single channel metafield.
         */
        readonly get: operations["getChannelMetafield"];
        /**
         * Update a Channel Metafield
         * @description Updates a single channel metafield.
         *
         *     **Usage Notes**
         *     * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a `403` error message.
         */
        readonly put: operations["updateChannelMetafield"];
        /**
         * Delete a Channel Metafield
         * @description Deletes a single channel metafield.
         */
        readonly delete: operations["deleteChannelMetafield"];
    };
    readonly "/channels/metafields": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Channel Metafields
         * @description Get all channel metafields.
         */
        readonly get: operations["getChannelsMetafields"];
        /**
         * Update multiple Metafields
         * @description Update multiple metafields.
         */
        readonly put: operations["updateChannelsMetafields"];
        /**
         * Create multiple Metafields
         * @description Create multiple metafields.
         */
        readonly post: operations["createChannelsMetafields"];
        /**
         * Delete Multiple Metafields
         * @description Delete all channel metafields.
         */
        readonly delete: operations["deleteChannelsMetafields"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Format: int64
         * @description The ID of the channel.
         */
        readonly ChannelId: number;
        /** metafield_Base */
        readonly metafield_Base: {
            /**
             * @description Unique ID of the *Metafield*.
             * @example 6
             */
            readonly id?: number;
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *
             *     |Value|Description
             *     |-|-|
             *     |`app_only`|Private to the app that owns the field|
             *     |`read`|Visible to other API consumers|
             *     |`write`|Open for reading and writing by other API consumers|
             *     |`read_and_sf_access`|Visible to other API consumers, including on storefront|
             *     |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
             * @enum {string}
             */
            readonly permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             * @example Warehouse Locations
             */
            readonly namespace?: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Location
             */
            readonly key?: string;
            /**
             * @description The value of the field.
             *
             * @example 4HG
             */
            readonly value?: string;
            /**
             * @description Description for the metafields.
             *
             * @example Location in the warehouse
             */
            readonly description?: string;
            /**
             * @description The type of resource with which the metafield is associated.
             *
             * @example product
             * @enum {string}
             */
            readonly resource_type?: "category" | "brand" | "product" | "variant";
            /**
             * @description The ID for the resource with which the metafield is associated.
             *
             * @example 111
             */
            readonly resource_id?: number;
            /**
             * Format: date-time
             * @description Date and time of the metafieldʼs creation. Read-Only.
             *
             * @example 2018-05-07T20:14:17.000Z
             */
            readonly date_created?: string;
            /**
             * Format: date-time
             * @description Date and time when the metafield was last updated. Read-Only.
             *
             * @example 2018-05-07T20:14:17.000Z
             */
            readonly date_modified?: string;
        };
        /** @description Common Metafield properties.
         *      */
        readonly Metafield: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value: string;
            /**
             * @description Description for the metafields.
             *
             * @example order
             */
            readonly description: string;
            /**
             * @description The type of resource with which the metafield is associated.
             *
             * @example cart
             * @enum {string}
             */
            readonly resource_type: "brand" | "product" | "variant" | "category" | "cart" | "channel" | "location" | "order" | "customer";
            /**
             * @description The unique identifier for the resource with which the metafield is associated.
             *
             * @example 424242
             */
            readonly resource_id: number;
            /** @description The unique identifier for the metafield. */
            readonly id: number;
            /**
             * Format: date-time
             * @description Date and time of the metafieldʼs creation.
             * @example 2022-06-16T18:39:00+00:00
             */
            readonly date_created: string;
            /**
             * Format: date-time
             * @description Date and time when the metafield was last updated.
             * @example 2022-06-16T18:39:00+00:00
             */
            readonly date_modified: string;
            /**
             * @description Client ID for the metafieldʼs creator.
             * @example asdfasdfasdfasdfasdfasdfasdf
             */
            readonly owner_client_id?: string;
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponse: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            readonly meta?: components["schemas"]["CollectionMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponse_POST_PUT: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            /**
             * @description Empty for 200 responses.
             * @example []
             */
            readonly errors?: readonly unknown[];
            readonly meta?: components["schemas"]["CollectionMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponsePartialSuccess_POST_PUT: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            readonly errors?: readonly components["schemas"]["Error"][];
            readonly meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponsePartialSuccess_DELETE: {
            /** @example [
             *       123
             *     ] */
            readonly data?: readonly number[];
            readonly errors?: readonly components["schemas"]["Error"][];
            readonly meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionDeleteResponseSuccess: {
            /** @example [
             *       123,
             *       124,
             *       125
             *     ] */
            readonly data?: readonly number[];
            /**
             * @description Empty for 200 responses.
             * @example []
             */
            readonly errors?: readonly unknown[];
            readonly meta?: components["schemas"]["WriteCollectionSuccessMeta"];
        };
        /**
         * Collection Meta
         * @description Additional data about the response.
         */
        readonly WriteCollectionPartialSuccessMeta: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 3
             */
            readonly total?: number;
            /**
             * @description Total number of items that were successfully deleted.
             *
             * @example 1
             */
            readonly success?: number;
            /**
             * @description Total number of items that failed to be deleted.
             *
             * @example 2
             */
            readonly failed?: number;
        };
        /**
         * Collection Meta
         * @description Additional data about the response.
         */
        readonly WriteCollectionSuccessMeta: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 3
             */
            readonly total?: number;
            /**
             * @description Total number of items that were successfully deleted.
             *
             * @example 3
             */
            readonly success?: number;
            /**
             * @description Total number of items that failed to be deleted.
             *
             * @example 0
             */
            readonly failed?: number;
        };
        /**
         * @description Total number of items in the result set.
         *
         * @example 3
         */
        readonly Total: number;
        /**
         * @description Total number of items that were successfully deleted.
         *
         * @example 1
         */
        readonly Success: number;
        /**
         * @description Total number of items that failed to be deleted.
         *
         * @example 2
         */
        readonly Failed: number;
        /** @description Error response payload for the BigCommerce API.
         *      */
        readonly Error: {
            /**
             * Format: int32
             * @description The HTTP status code for the error.
             *
             * @example 422
             */
            readonly status?: number;
            /**
             * @description The error title describing the particular error.
             *
             * @example Bulk operation has failed
             */
            readonly title?: string;
            /**
             * @description The error type.
             *
             * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
             */
            readonly type?: string;
            readonly errors?: components["schemas"]["ErrorDetail"];
        };
        /**
         * @description Error detail response payload for the BigCommerce API.
         *
         * @example {
         *       "1": "Unauthorized to delete",
         *       "2": "Metafield does not exist"
         *     }
         */
        readonly ErrorDetail: {
            readonly [key: string]: unknown;
        };
        readonly ErrorResponse: {
            readonly status?: number;
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
            readonly errors?: {
                readonly [key: string]: unknown;
            };
        };
        /**
         * Collection Meta
         * @description Data about the response, including pagination and collection totals.
         */
        readonly CollectionMeta: {
            /**
             * Pagination
             * @description Data about the response, including pagination and collection totals.
             */
            readonly pagination?: {
                /**
                 * @description Total number of items in the result set.
                 *
                 * @example 36
                 */
                readonly total?: number;
                /**
                 * @description Total number of items in the collection response.
                 *
                 * @example 36
                 */
                readonly count?: number;
                /**
                 * @description The amount of items returned in the collection per page, controlled by the limit parameter.
                 *
                 * @example 50
                 */
                readonly per_page?: number;
                /**
                 * @description The page you are currently on within the collection.
                 *
                 * @example 1
                 */
                readonly current_page?: number;
                /**
                 * @description The total number of pages in the collection.
                 *
                 * @example 1
                 */
                readonly total_pages?: number;
                /** @description Pagination links for the previous and next parts of the whole collection.
                 *      */
                readonly links?: {
                    /** @description Link to the previous page returned in the response.
                     *      */
                    readonly previous?: string;
                    /**
                     * @description Link to the current page returned in the response.
                     *
                     * @example ?page=1&limit=50
                     */
                    readonly current?: string;
                    /** @description Link to the next page returned in the response.
                     *      */
                    readonly next?: string;
                };
            };
        } & {
            readonly [key: string]: unknown;
        };
        /** @description Common Metafield properties.
         *      */
        readonly MetafieldBase_Post: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value: string;
            /**
             * @description Description for the metafields.
             *
             * @example Name of Staff Member
             */
            readonly description?: string;
        };
        /** @description The model for a POST to create metafield.
         *      */
        readonly MetafieldPost: components["schemas"]["MetafieldBase_Post"] & {
            /**
             * @description The ID for the resource with which the metafield is associated.
             *
             * @example 42
             */
            readonly resource_id: number;
        };
        /** @description Common Metafield properties.
         *      */
        readonly MetafieldBase_Put: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace?: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key?: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value?: string;
            /**
             * @description Description for the metafields.
             *
             * @example Name of Staff Member
             */
            readonly description?: string;
        };
        /** @description The model for a PUT to create metafield.
         *      */
        readonly MetafieldPut: components["schemas"]["MetafieldBase_Put"] & {
            /**
             * @description The ID of metafield to update.
             *
             * @example 42
             */
            readonly id: number;
        };
        /**
         * Not Found
         * @description Error payload for the BigCommerce API.
         */
        readonly NotFound: {
            /** @description 404 HTTP status code.
             *      */
            readonly status?: number;
            /** @description The error title describing the particular error. */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
        };
        readonly PutCheckoutUrl: {
            /**
             * Format: uri
             * @description Unique site checkout URL. It must be valid and a sub-domain of the primary channel URL. Note: The API will change all URLs using the HTTP protocol to HTTPS.
             * @example https://checkout.kittens.mybigcommerce.com
             */
            readonly url?: string;
        };
        /**
         * Format: int64
         * @description The ID of the channel associated with this channel listing.
         */
        readonly ChannelIdForListing: number;
        /**
         * Format: int64
         * @description The ID of the channel listing that has been created, returned, or updated. In a 422 error, you may receive a response that references the `group_id`. The `group_id` in the Invalid Listing ID example refers to the `listing_id`. Please use `listing_id` instead of `group_id` in the request payload.
         */
        readonly ListingId: number;
        /**
         * Format: int64
         * @description The ID of the product associated with this channel listing.
         */
        readonly ProductId: number;
        /**
         * Format: int64
         * @description The ID of the product variant associated with this channel listing.
         */
        readonly VariantId: number;
        /** @description Associated ID within a system / platform outside of BC. */
        readonly ExternalId: string;
        /** @description Indicates if a channel can create listings from the BigCommerce UI. Default value for this field is based on the channel type and platform combination if not specified on create. */
        readonly IsListableFromUI: boolean;
        /** @description Indicates if a channel is visible within the BigCommerce merchant admin UI (control panel). If `false`, the channel will not show in Channel Manager nor in any channels dropdown throughout the UI. Default value for this field is `true` if not specified on create. */
        readonly IsVisible: boolean;
        /**
         * @description The status of the channel; channel `type`, `platform`, and `status` must be a [valid combination](/docs/rest-management/channels#status). `terminated` is not valid for `PUT` or `POST` requests. `deleted` is not valid for `POST` requests. `prelaunch` is not valid for `PUT` requests.
         * @enum {string}
         */
        readonly ChannelStatus: "active" | "prelaunch" | "inactive" | "connected" | "disconnected" | "archived" | "deleted" | "terminated";
        /** @description Name of the channel as it will appear in the store control panel. The only characters it can include are Latin alphabet letters, Arabic numerals, dashes, and underscores. */
        readonly ChannelName: string;
        /**
         * @description The type of channel; channel `platform` and `type` must be a [valid combination](/docs/rest-management/channels#status).
         * @enum {string}
         */
        readonly ChannelType: "pos" | "marketplace" | "storefront" | "marketing";
        /** @description The name of the platform for the channel; channel `platform` and `type` must be a [valid combination](/docs/rest-management/channels#status). */
        readonly ChannelPlatform: string;
        /**
         * Format: date-time
         * @description Date on which the channel was first created.
         */
        readonly ChannelDateCreated: string;
        /**
         * Format: date-time
         * @description Date on which the channel was most recently changed.
         */
        readonly ChannelDateModified: string;
        /**
         * Format: url
         * @description Link to the platform icon.
         */
        readonly IconUrl: string;
        /** @description Currencies that are enabled for the specified channel in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) three character alphabetic format. */
        readonly EnabledCurrencies: readonly string[];
        /** @description Default currency for the channel in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) three character alphabetic format. Will be used on storefront when other currencies cannot. */
        readonly DefaultCurrency: string;
        /** @description Name of the product for this channel listing specifically. This is an optional field that can be used to override the product name in the catalog. */
        readonly ChannelProductName: string;
        /** @description Name of the product variant for this channel listing specifically. This is an optional field that can be used to override the name of the product variant in the catalog. */
        readonly ChannelProductVariantName: string;
        /** @description Description of the product for this channel listing specifically. This is an optional field that can be used to override the product description in the catalog. */
        readonly ChannelProductDescription: string;
        /** @description Description of the product variant for this channel listing specifically. This is an optional field that can be used to override the description of the product variant in the catalog. */
        readonly ChannelProductVariantDescription: string;
        /**
         * Format: date-time
         * @description Date on which the channel listing was first created.
         */
        readonly ChannelListingDateCreated: string;
        /**
         * Format: date-time
         * @description Date on which the channel listing variant was first created.
         */
        readonly ChannelListingVariantDateCreated: string;
        /**
         * Format: date-time
         * @description Date on which the channel listing was most recently changed.
         */
        readonly ChannelListingDateModified: string;
        /**
         * Format: date-time
         * @description Date on which the channel listing variant was most recently changed.
         */
        readonly ChannelListingVariantDateModified: string;
        /**
         * @description The state of the product assignment or channel listing.
         * @enum {string}
         */
        readonly ListingState: "active" | "disabled" | "error" | "pending" | "pending_disable" | "pending_delete" | "partially_rejected" | "queued" | "rejected" | "submitted" | "deleted";
        /**
         * @description The state of the channel listing variant.
         * @enum {string}
         */
        readonly VariantState: "active" | "disabled" | "error" | "pending" | "pending_disable" | "pending_delete" | "queued" | "rejected" | "submitted" | "deleted";
        /** @description Details about currency assignments for a specific channel. */
        readonly CurrencyNotRequiredWithChannelId: {
            readonly channel_id?: components["schemas"]["ChannelId"];
            readonly enabled_currencies?: components["schemas"]["EnabledCurrencies"];
            readonly default_currency?: components["schemas"]["DefaultCurrency"];
        };
        /** @description Details about currency assignments for a specific channel. */
        readonly CurrencyRequiredWithChannelId: {
            readonly channel_id: components["schemas"]["ChannelId"];
            readonly enabled_currencies: components["schemas"]["EnabledCurrencies"];
            readonly default_currency: components["schemas"]["DefaultCurrency"];
        };
        /** @description Details about currency assignments for a specific channel. */
        readonly CurrencyRequiredWithoutChannelId: {
            readonly enabled_currencies: components["schemas"]["EnabledCurrencies"];
            readonly default_currency: components["schemas"]["DefaultCurrency"];
        };
        readonly CreateChannelReq: {
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly is_listable_from_ui?: components["schemas"]["IsListableFromUI"];
            readonly is_visible?: components["schemas"]["IsVisible"];
            readonly status?: components["schemas"]["ChannelStatus"];
            readonly name: components["schemas"]["ChannelName"];
            readonly type: components["schemas"]["ChannelType"];
            readonly platform: components["schemas"]["ChannelPlatform"];
        };
        readonly UpdateChannelReq: {
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly is_listable_from_ui?: components["schemas"]["IsListableFromUI"];
            readonly is_visible?: components["schemas"]["IsVisible"];
            readonly name?: components["schemas"]["ChannelName"];
            readonly status?: components["schemas"]["ChannelStatus"];
        };
        readonly UpsertMultipleChannelsCurrencyAssignmentsReq: readonly components["schemas"]["CurrencyRequiredWithChannelId"][];
        readonly CreateMultipleListingsReq: readonly components["schemas"]["UpsertListingWithoutListingIdReq"][];
        readonly UpdateMultipleListingsReq: readonly components["schemas"]["UpsertListingWithListingIdReq"][];
        /** @description Details about assigning a product to a specific channel. */
        readonly UpsertListingWithoutListingIdReq: {
            readonly product_id: components["schemas"]["ProductId"];
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly state: components["schemas"]["ListingState"];
            readonly name?: components["schemas"]["ChannelProductName"];
            readonly description?: components["schemas"]["ChannelProductDescription"];
            readonly variants: components["schemas"]["ChannelProductMultipleVariants"];
        };
        /** @description Details about assigning a product to a specific channel. */
        readonly UpsertListingWithListingIdReq: {
            readonly listing_id: components["schemas"]["ListingId"];
            readonly product_id: components["schemas"]["ProductId"];
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly state: components["schemas"]["ListingState"];
            readonly name?: components["schemas"]["ChannelProductName"];
            readonly description?: components["schemas"]["ChannelProductDescription"];
            readonly variants: components["schemas"]["ChannelProductMultipleVariants"];
        };
        readonly ChannelProductMultipleVariants: readonly components["schemas"]["ChannelProductVariantPartial"][];
        /** @description Details about a variant of the product for this channel listing. */
        readonly ChannelProductVariantPartial: {
            readonly product_id: components["schemas"]["ProductId"];
            readonly variant_id: components["schemas"]["VariantId"];
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly state: components["schemas"]["VariantState"];
            readonly name?: components["schemas"]["ChannelProductVariantName"];
            readonly description?: components["schemas"]["ChannelProductVariantDescription"];
        };
        /** @description Details about a variant of the product for this channel listing. */
        readonly ChannelProductVariantFull: {
            readonly channel_id?: components["schemas"]["ChannelIdForListing"];
            readonly product_id?: components["schemas"]["ProductId"];
            readonly variant_id?: components["schemas"]["VariantId"];
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly state?: components["schemas"]["VariantState"];
            readonly name?: components["schemas"]["ChannelProductVariantName"];
            readonly description?: components["schemas"]["ChannelProductVariantDescription"];
            readonly date_created?: components["schemas"]["ChannelListingVariantDateCreated"];
            readonly date_modified?: components["schemas"]["ChannelListingVariantDateModified"];
        };
        readonly ChannelWithoutCurrencies: {
            readonly id: components["schemas"]["ChannelId"];
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly is_listable_from_ui?: components["schemas"]["IsListableFromUI"];
            /**
             * @deprecated
             * @description This deprecated field was originally used to enable or disable a channel. Use the `status` field instead of `is_enabled`. If the channel status is `prelaunch`, `active`, or `connected`, then `is_enabled` will be `true`. If the status is `inactive`, `disconnected`, `archived`, `deleted`, or `terminated`, then `is_enabled` will be false.
             */
            readonly is_enabled?: boolean;
            readonly is_visible?: components["schemas"]["IsVisible"];
            readonly status?: components["schemas"]["ChannelStatus"];
            readonly name: components["schemas"]["ChannelName"];
            readonly type?: components["schemas"]["ChannelType"];
            readonly platform?: components["schemas"]["ChannelPlatform"];
            readonly date_created?: components["schemas"]["ChannelDateCreated"];
            readonly date_modified?: components["schemas"]["ChannelDateModified"];
            readonly icon_url?: components["schemas"]["IconUrl"];
        };
        readonly ChannelWithCurrencies: {
            readonly id?: components["schemas"]["ChannelId"];
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly is_listable_from_ui?: components["schemas"]["IsListableFromUI"];
            /**
             * @deprecated
             * @description This deprecated field was originally used to enable or disable a channel. Use the `status` field instead of `is_enabled`. If the channel status is `prelaunch`, `active`, or `connected`, then `is_enabled` will be `true`. If the status is `inactive`, `disconnected`, `archived`, `deleted`, or `terminated`, then `is_enabled` will be `false`.
             */
            readonly is_enabled?: boolean;
            readonly is_visible?: components["schemas"]["IsVisible"];
            readonly status?: components["schemas"]["ChannelStatus"];
            readonly name?: components["schemas"]["ChannelName"];
            readonly type?: components["schemas"]["ChannelType"];
            readonly platform?: components["schemas"]["ChannelPlatform"];
            readonly date_created?: components["schemas"]["ChannelDateCreated"];
            readonly date_modified?: components["schemas"]["ChannelDateModified"];
            readonly icon_url?: components["schemas"]["IconUrl"];
            readonly currencies?: components["schemas"]["CurrencyNotRequiredWithChannelId"];
        };
        /** @description Details about the Channelʼs relationship to Themes. */
        readonly ActiveTheme: {
            /** @description The UUID of the currently active Theme on the Channel. */
            readonly active_theme_uuid?: string;
            /** @description The UUID of the currently active Theme Configuration on the Channel. */
            readonly active_theme_configuration_uuid?: string;
            /** @description The UUID of the currently active Theme Version on the Channel. Needed to look up the available Custom Templates for the Theme. */
            readonly active_theme_version_uuid?: string;
            /** @description The UUID of the most recently saved Theme Configuration. If this is different from the active Theme Configuration UUID, this indicates that some changes have been saved in the control panel Theme Editor that have not yet been published. */
            readonly saved_theme_configuration_uuid?: string;
        };
        readonly Listing: {
            readonly channel_id?: components["schemas"]["ChannelIdForListing"];
            readonly listing_id?: components["schemas"]["ListingId"];
            readonly external_id?: components["schemas"]["ExternalId"];
            readonly product_id?: components["schemas"]["ProductId"];
            readonly state?: components["schemas"]["ListingState"];
            readonly name?: components["schemas"]["ChannelProductName"];
            readonly description?: components["schemas"]["ChannelProductDescription"];
            readonly date_created?: components["schemas"]["ChannelListingDateCreated"];
            readonly date_modified?: components["schemas"]["ChannelListingDateModified"];
            readonly variants?: readonly components["schemas"]["ChannelProductVariantFull"][];
        };
        /** @description List of channel-specific control panel menu navigation items and corresponding settings pages an app developer can choose to enable for the subject channel. Protected settings override any settings set in those UI sections at the storewide level. Learn more in the [Building Storefront Channels](/docs/integrations/channels/guide/storefronts#protected-ui-sections) tutorial. */
        readonly BigCommerceProtectedAppSections: readonly ("overview" | "storefront_settings" | "localization" | "carousel" | "script_manager" | "currencies" | "payments" | "checkout" | "domains" | "notifications" | "social" | "pages" | "data_solutions")[];
        readonly channel_menus_Post: {
            readonly bigcommerce_protected_app_sections?: components["schemas"]["BigCommerceProtectedAppSections"];
            readonly custom_app_sections?: components["schemas"]["CustomAppSections"];
        };
        readonly CustomAppSections: readonly {
            /** @description Text displayed to the merchant. */
            readonly title?: string;
            /** @description Value used in the `section` query param. */
            readonly query_path?: string;
        }[];
        /** @description Data about the response, including pagination. */
        readonly MetaWithFullPagination: {
            readonly pagination?: components["schemas"]["pagination_Full"];
        };
        /** @description Data about the response, including pagination. */
        readonly MetaWithPartialPagination: {
            readonly pagination?: components["schemas"]["pagination_Partial"];
        };
        /**
         * Empty meta response.
         * @description Response metadata.
         */
        readonly EmptyMeta: {
            readonly [key: string]: unknown;
        };
        /** @description Data about the pagination.
         *      */
        readonly pagination_Full: {
            /** @description The maximum number of items per page.
             *      */
            readonly per_page?: number;
            /** @description Total number of items in the result set.
             *      */
            readonly total?: number;
            /** @description Total number of items in the collection response.
             *      */
            readonly count?: number;
            /** @description The total number of pages in the collection.
             *      */
            readonly total_pages?: number;
            /** @description The current page number. */
            readonly current_page?: number;
            /** @description Pagination links for the previous, current, or next parts of the whole collection.
             *      */
            readonly links?: {
                /** @description Link to the previous page returned in the response.
                 *      */
                readonly previous?: string;
                /** @description Link to the current page returned in the response.
                 *      */
                readonly current?: string;
                /** @description Link to the next page returned in the response.
                 *      */
                readonly next?: string;
            };
        };
        /** @description Data about the pagination.
         *      */
        readonly pagination_Partial: {
            /** @description Total number of items in the collection response.
             *      */
            readonly count?: number;
            /** @description Total number of items in the result set.
             *      */
            readonly total?: number;
            /** @description Pagination links for the previous, current, or next parts of the whole collection.
             *      */
            readonly links?: {
                /** @description Link to the previous page returned in the response.
                 *      */
                readonly previous?: string;
                /** @description Link to the current page returned in the response.
                 *      */
                readonly current?: string;
                /** @description Link to the next page returned in the response.
                 *      */
                readonly next?: string;
            };
            /** @description The total number of pages in the collection.
             *      */
            readonly total_pages?: number;
        };
        readonly Site: {
            /** @description The ID of the site. */
            readonly id?: number;
            /**
             * @description The fully qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
             * @example https://kittens.mybigcommerce.com/
             */
            readonly url?: string;
            /** @description The channel to which this site is attached. Each site belongs to a single channel, and each channel can have either zero or more sites. */
            readonly channel_id?: number;
            /**
             * Format: date-time
             * @description The date-time that this site was created, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
             * @example 2018-01-04T04:15:50.000Z
             */
            readonly created_at?: string;
            /**
             * Format: date-time
             * @description The date-time that this site was last updated, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
             * @example 2018-01-04T04:15:50.000Z
             */
            readonly updated_at?: string;
            /**
             * @description Indicates if a private/dedicated SSL is installed on this site, or if itʼs using shared SSL.
             * @enum {string}
             */
            readonly ssl_status?: "dedicated" | "shared";
            /** @description All URLs that belong to the site, including `primary`, `canonical`, and `checkout` URLs. */
            readonly urls?: readonly components["schemas"]["Url"][];
            /** @description Indicates whether the channel uses a custom checkout domain. When `false`, the checkout domain falls back to the default channel’s primary URL. */
            readonly is_checkout_url_customized?: boolean;
        };
        readonly Url: {
            /**
             * @description URL of site
             * @example https://kittens.mybigcommerce.com/
             */
            readonly url?: string;
            /**
             * @description URL type
             * @enum {string}
             */
            readonly type?: "checkout" | "primary" | "canonical";
            /**
             * Format: date-time
             * @description The date-time that this URL was created, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
             * @example 2018-01-04T04:15:50.000Z
             */
            readonly created_at?: string;
            /**
             * Format: date-time
             * @description The date-time that this URL was last updated, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
             * @example 2018-01-04T04:15:50.000Z
             */
            readonly updated_at?: string;
        };
        /** site_Put */
        readonly site_Put: {
            /** @description The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this. */
            readonly url?: string;
        };
        /** site_Post */
        readonly site_Post: {
            /**
             * @description The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
             * @example https://kittens.mybigcommerce.com/
             */
            readonly url?: string;
            /** @description The channel this site is attached to. Each site belongs to a single channel, and each channel can have either zero or one sites. */
            readonly channel_id?: number;
        };
        /** site_Full */
        readonly site_Full: {
            readonly id?: number;
            /**
             * @description The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
             * @example http://kittens.mybigcommerce.com/
             */
            readonly url?: string;
            /** @description The channel this site is attached to. Each site belongs to a single channel, and each channel can have either zero or one sites. */
            readonly channel_id?: number;
            /**
             * @description When was this site created? RFC 3339
             * @example 2018-01-04T04:15:50.000Z
             */
            readonly created_at?: string;
            /**
             * @description When was this site defintion last updated? RFC 3339
             * @example 2018-01-04T04:15:50.000Z
             */
            readonly updated_at?: string;
            /** @description (optional - if included) collection of routes defined for this site. Limited to 200 routes side loaded (query routes direction via `/routes` for bulk) */
            readonly routes?: readonly {
                /** @description Unique ID for this route. Required when updating an existing route */
                readonly id?: number;
                /**
                 * @description What type of resource are we routing to?
                 * @enum {string}
                 */
                readonly type?: "product" | "brand" | "category" | "page" | "blog" | "home" | "cart" | "checkout" | "search" | "account" | "login" | "returns" | "static";
                /**
                 * @description (entity_id?) For the specified type, which resources should match this route? e.g For a route with the type: "product" and matching: "5" this route would be used for the product with the ID of 5.
                 *
                 *     Depending on the type of resource, this may be an ID (matching a specific item), or a "*" wildcard matching all items of that type.
                 * @example 5
                 */
                readonly matching?: string;
                /**
                 * @description The route template that will be used to generate the URL for the requested resource.
                 *
                 *     Supports several tokens:
                 *
                 *     - {id} The ID of the requested item
                 *     - {slug} The slug for the requested item (if available). Note: the `slug` value may contain `/` slash
                 *     - {language} The language string that the client is using
                 * @example /my-amazing-product
                 */
                readonly route?: string;
            }[];
        };
        /**
         * metafield_Post
         * @description Metafield for products, categories, variants, and brands. The max number of metafields allowed on each product, category, variant, or brand is 250. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        readonly metafield_Post: {
            /**
             * @description Namespace for the metafield, for organizational purposes. This is set by the developer.
             * @example Warehouse Locations
             */
            readonly namespace: string;
            /**
             * @description The name of the field.
             *
             * @example Location
             */
            readonly key: string;
            /**
             * @description The value of the field.
             *
             * @example 4HG
             */
            readonly value: string;
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *
             *     |Value|Description
             *     |-|-|
             *     |`app_only`|Private to the app that owns the field|
             *     |`read`|Visible to other API consumers|
             *     |`write`|Open for reading and writing by other API consumers|
             *     |`read_and_sf_access`|Visible to other API consumers, including on storefront|
             *     |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
             * @enum {string}
             */
            readonly permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Description for the metafield.
             *
             * @example Location in the warehouse
             */
            readonly description?: string;
        };
        /**
         * metafield_Put
         * @description Metafield for products, categories, variants, and brands. The max number of metafields allowed on each product, category, variant, or brand 250. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        readonly metafield_Put: {
            /**
             * @description Namespace for the metafield, for organizational purposes.
             * @example Warehouse Locations
             */
            readonly namespace?: string;
            /**
             * @description The name of the field.
             *
             * @example Location
             */
            readonly key?: string;
            /**
             * @description The value of the field.
             *
             * @example 4HG
             */
            readonly value?: string;
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *
             *     |Value|Description
             *     |-|-|
             *     |`app_only`|Private to the app that owns the field|
             *     |`read`|Visible to other API consumers|
             *     |`write`|Open for reading and writing by other API consumers|
             *     |`read_and_sf_access`|Visible to other API consumers, including on storefront|
             *     |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
             * @enum {string}
             */
            readonly permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Description for the metafield.
             *
             * @example Location in the warehouse.
             */
            readonly description?: string;
        };
    };
    responses: {
        readonly multiple_channels_without_currencies_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data: readonly components["schemas"]["ChannelWithoutCurrencies"][];
                    readonly meta: components["schemas"]["MetaWithFullPagination"];
                };
            };
        };
        readonly single_channel_without_currencies_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["ChannelWithoutCurrencies"];
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        readonly single_channel_with_currencies_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["ChannelWithCurrencies"];
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        readonly channel_active_theme_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["ActiveTheme"];
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        readonly multiple_channels_currency_assignments_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["CurrencyNotRequiredWithChannelId"][];
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        readonly single_channel_currency_assignments_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["CurrencyNotRequiredWithChannelId"];
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        readonly delete_currency_assignments_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["ChannelId"];
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        readonly single_and_multiple_listings_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["Listing"][];
                    readonly meta?: components["schemas"]["MetaWithPartialPagination"];
                };
            };
        };
        readonly single_listing_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["Listing"];
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        readonly site_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["Site"];
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        readonly channel_menus_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: {
                        readonly bigcommerce_protected_app_sections?: components["schemas"]["BigCommerceProtectedAppSections"];
                        readonly custom_app_sections?: components["schemas"]["CustomAppSections"];
                    };
                    readonly meta?: components["schemas"]["EmptyMeta"];
                };
            };
        };
        /** @description Invalid channel ID is provided. */
        readonly invalid_channel_id_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Invalid value is provided to the query parameter(s). */
        readonly invalid_filter_value_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** @description The request is missing one or more required fields or invalid data is submitted. Commonly, an invalid combination of `type` and `platform` was provided. */
        readonly missing_or_invalid_channel_data_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** @description A *Channel* with the provided ID was not found. */
        readonly channel_not_found_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** @description A *Channel Listing* with the provided channel ID and listing ID was not found. */
        readonly listing_not_found_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Active Theme of the *Channel* was not found. */
        readonly active_theme_not_found_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** @description A *Channel* with the provided ID was not found. */
        readonly channel_entity_not_found_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** @description A *Channel* with the same combination of `name`, `platform`, and `type` already exists. */
        readonly duplicate_channel_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** @description When an invalid value or invalid field is submitted, a 422 response will be sent. Note that attempt to update a deleted or terminated channel will also result in 422 response. */
        readonly invalid_channel_update_field_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** @description The request is missing one or more required fields or invalid data is submitted. */
        readonly missing_or_invalid_multiple_channels_currency_assignments_data_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** @description The request is missing one or more required fields or invalid data is submitted. */
        readonly missing_or_invalid_single_channel_currency_assignments_data_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** @description The request is missing one or more required fields or invalid data is submitted. */
        readonly missing_or_invalid_multiple_listings_data_for_post_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** @description The request is missing one or more required fields or invalid data is submitted. Note that the `group_id` in the Invalid Listing ID example refers to `listing_id`. Please use `listing_id` instead of `group_id` in the request payload. */
        readonly missing_or_invalid_multiple_listings_data_for_put_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** @description When an invalid value or invalid query parameter is submitted, a 422 response will be sent. */
        readonly invalid_filters_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** @description OK */
        readonly metafield_200: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    /**
                     * @description Unique ID of the *Metafield*.
                     * @example 6
                     */
                    readonly id?: number;
                    /**
                     * @description Determines the visibility and writeability of the field by other API consumers.
                     *
                     *     |Value|Description
                     *     |-|-|
                     *     |`app_only`|Private to the app that owns the field|
                     *     |`read`|Visible to other API consumers|
                     *     |`write`|Open for reading and writing by other API consumers|
                     *     |`read_and_sf_access`|Visible to other API consumers, including on storefront|
                     *     |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
                     * @enum {string}
                     */
                    readonly permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
                    /**
                     * @description Namespace for the metafield, for organizational purposes.
                     * @example Warehouse Locations
                     */
                    readonly namespace?: string;
                    /**
                     * @description The name of the field, for example: `location_id`, `color`.
                     *
                     * @example Location
                     */
                    readonly key?: string;
                    /**
                     * @description The value of the field.
                     *
                     * @example 4HG
                     */
                    readonly value?: string;
                    /**
                     * @description Description for the metafields.
                     *
                     * @example Location in the warehouse
                     */
                    readonly description?: string;
                    /**
                     * @description The type of resource with which the metafield is associated.
                     *
                     * @example product
                     * @enum {string}
                     */
                    readonly resource_type?: "category" | "brand" | "product" | "variant";
                    /**
                     * @description The ID for the resource with which the metafield is associated.
                     *
                     * @example 111
                     */
                    readonly resource_id?: number;
                    /**
                     * Format: date-time
                     * @description Date and time of the metafieldʼs creation. Read-Only.
                     *
                     * @example 2018-05-07T20:14:17.000Z
                     */
                    readonly date_created?: string;
                    /**
                     * Format: date-time
                     * @description Date and time when the metafield was last updated. Read-Only.
                     *
                     * @example 2018-05-07T20:14:17.000Z
                     */
                    readonly date_modified?: string;
                };
            };
        };
        /** @description Example response */
        readonly metafields_200: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["metafield_Base"][];
                } & {
                    readonly meta?: components["schemas"]["MetaWithFullPagination"];
                };
            };
        };
    };
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
        /** @description Specifies the page number in a limited (paginated) list of products.
         *      */
        readonly PageParam: number;
        /** @description The ID of the `Metafield`.
         *      */
        readonly MetafieldIdParam: number;
        /** @description Filter based on a metafieldʼs key.
         *      */
        readonly MetafieldKeyParam: string;
        /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
        readonly MetafieldKeyInParam: readonly string[];
        /** @description Filter based on a metafieldʼs namespace. */
        readonly MetafieldNamespaceParam: string;
        /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter. */
        readonly MetafieldNamespaceInParam: readonly string[];
        /** @description Controls the number of items per page in a limited (paginated) list of products.
         *      */
        readonly LimitParam: number;
        /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
        readonly DirectionParam: "asc" | "desc";
        /** @description Channels subresources that can be included in the response. */
        readonly include: "currencies";
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly IncludeFieldsParamMetafields: readonly ("resource_id" | "key" | "value" | "namespace" | "permission_set" | "resource_type" | "description" | "owner_client_id" | "date_created" | "date_modified")[];
        /** @description Filter items based on whether the channel is currently available for integration. Setting this query parameter to `true` will return channels with the status of `prelaunch`, `active` , `inactive`, and `connected`. Setting this query parameter to `false` will return channels with the status of `disconnected`, `archived`, `deleted`, and `terminated`. */
        readonly available: boolean;
        /** @description Filter items by a comma-separated list of statuses. */
        readonly status_in: readonly ("prelaunch" | "active" | "inactive" | "connected" | "disconnected" | "archived" | "deleted" | "terminated")[];
        /** @description Filter items by a comma-separated list of types. */
        readonly type_in: readonly ("marketplace" | "marketing" | "pos" | "storefront")[];
        /** @description Filter items by a comma-separated list of platforms. For a list of supported platforms, see [Platform](/docs/rest-management/channels#platform). */
        readonly platform_in: readonly string[];
        /** @description Filter items by date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. */
        readonly date_created: string;
        /** @description Filter items by minimum date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields created after this date. */
        readonly date_created_min: string;
        /** @description Filter items by maximum date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields created before this date. */
        readonly date_created_max: string;
        /** @description Filter items by date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. */
        readonly date_modified: string;
        /** @description Filter items by minimum date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields modified after this date. */
        readonly date_modified_min: string;
        /** @description Filter items by maximum date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields modified before this date. */
        readonly date_modified_max: string;
        /** @description Controls the number of items per page for paginated responses. */
        readonly limit: number;
        /** @description Specifies the page number for a paginated response. */
        readonly page: number;
        /** @description Specifies the prior listing ID in a limited (paginated) list of listings. */
        readonly after: number;
        /** @description Filter items by a comma-separated list of product IDs. */
        readonly product_id_in: readonly number[];
        /** @description The ID of a channel. */
        readonly channel_id_path_param: number;
        /** @description The ID of a channel listing. */
        readonly listing_id_path_param: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getChannels: {
        readonly parameters: {
            readonly query?: {
                /** @description Channels subresources that can be included in the response. */
                readonly include?: components["parameters"]["include"];
                /** @description Filter items based on whether the channel is currently available for integration. Setting this query parameter to `true` will return channels with the status of `prelaunch`, `active` , `inactive`, and `connected`. Setting this query parameter to `false` will return channels with the status of `disconnected`, `archived`, `deleted`, and `terminated`. */
                readonly available?: components["parameters"]["available"];
                /** @description Filter items by a comma-separated list of statuses. */
                readonly "status:in"?: components["parameters"]["status_in"];
                /** @description Filter items by a comma-separated list of types. */
                readonly "type:in"?: components["parameters"]["type_in"];
                /** @description Filter items by a comma-separated list of platforms. For a list of supported platforms, see [Platform](/docs/rest-management/channels#platform). */
                readonly "platform:in"?: components["parameters"]["platform_in"];
                /** @description Filter items by date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. */
                readonly date_created?: components["parameters"]["date_created"];
                /** @description Filter items by minimum date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields created after this date. */
                readonly "date_created:min"?: components["parameters"]["date_created_min"];
                /** @description Filter items by maximum date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields created before this date. */
                readonly "date_created:max"?: components["parameters"]["date_created_max"];
                /** @description Filter items by date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. */
                readonly date_modified?: components["parameters"]["date_modified"];
                /** @description Filter items by minimum date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields modified after this date. */
                readonly "date_modified:min"?: components["parameters"]["date_modified_min"];
                /** @description Filter items by maximum date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields modified before this date. */
                readonly "date_modified:max"?: components["parameters"]["date_modified_max"];
                /** @description Controls the number of items per page for paginated responses. */
                readonly limit?: components["parameters"]["limit"];
                /** @description Specifies the page number for a paginated response. */
                readonly page?: components["parameters"]["page"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["multiple_channels_without_currencies_resp"];
            readonly 422: components["responses"]["invalid_filter_value_resp"];
        };
    };
    readonly createChannel: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CreateChannelReq"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["single_channel_without_currencies_resp"];
            readonly 422: components["responses"]["missing_or_invalid_channel_data_resp"];
        };
    };
    readonly getChannel: {
        readonly parameters: {
            readonly query?: {
                /** @description Channels subresources that can be included in the response. */
                readonly include?: components["parameters"]["include"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["single_channel_with_currencies_resp"];
            readonly 404: components["responses"]["channel_not_found_resp"];
        };
    };
    readonly updateChannel: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["UpdateChannelReq"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["single_channel_without_currencies_resp"];
            readonly 404: components["responses"]["channel_entity_not_found_resp"];
            readonly 409: components["responses"]["duplicate_channel_resp"];
            readonly 422: components["responses"]["invalid_channel_update_field_resp"];
        };
    };
    readonly getChannelActiveTheme: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["channel_active_theme_resp"];
            readonly 404: components["responses"]["active_theme_not_found_resp"];
        };
    };
    readonly getAllCurrencyAssignments: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["multiple_channels_currency_assignments_resp"];
        };
    };
    readonly updateMultipleChannelsCurrencyAssignments: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["UpsertMultipleChannelsCurrencyAssignmentsReq"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["multiple_channels_currency_assignments_resp"];
            readonly 422: components["responses"]["missing_or_invalid_multiple_channels_currency_assignments_data_resp"];
        };
    };
    readonly createMultipleChannelsCurrencyAssignments: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["UpsertMultipleChannelsCurrencyAssignmentsReq"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["multiple_channels_currency_assignments_resp"];
            readonly 422: components["responses"]["missing_or_invalid_multiple_channels_currency_assignments_data_resp"];
        };
    };
    readonly getSingleChannelCurrencyAssignments: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["single_channel_currency_assignments_resp"];
            readonly 404: components["responses"]["channel_not_found_resp"];
        };
    };
    readonly updateSingleChannelCurrencyAssignments: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CurrencyRequiredWithoutChannelId"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["single_channel_currency_assignments_resp"];
            readonly 422: components["responses"]["missing_or_invalid_single_channel_currency_assignments_data_resp"];
        };
    };
    readonly createSingleChannelCurrencyAssignments: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CurrencyRequiredWithoutChannelId"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["single_channel_currency_assignments_resp"];
            readonly 422: components["responses"]["missing_or_invalid_single_channel_currency_assignments_data_resp"];
        };
    };
    readonly deleteSingleChannelCurrencyAssignments: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["delete_currency_assignments_resp"];
            readonly 404: components["responses"]["channel_not_found_resp"];
        };
    };
    readonly getChannelListings: {
        readonly parameters: {
            readonly query?: {
                /** @description Controls the number of items per page for paginated responses. */
                readonly limit?: components["parameters"]["limit"];
                /** @description Specifies the prior listing ID in a limited (paginated) list of listings. */
                readonly after?: components["parameters"]["after"];
                /** @description Filter items by a comma-separated list of product IDs. */
                readonly "product_id:in"?: components["parameters"]["product_id_in"];
                /** @description Filter items by date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. */
                readonly date_created?: components["parameters"]["date_created"];
                /** @description Filter items by minimum date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields created after this date. */
                readonly "date_created:min"?: components["parameters"]["date_created_min"];
                /** @description Filter items by maximum date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields created before this date. */
                readonly "date_created:max"?: components["parameters"]["date_created_max"];
                /** @description Filter items by date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. */
                readonly date_modified?: components["parameters"]["date_modified"];
                /** @description Filter items by minimum date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields modified after this date. */
                readonly "date_modified:min"?: components["parameters"]["date_modified_min"];
                /** @description Filter items by maximum date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields modified before this date. */
                readonly "date_modified:max"?: components["parameters"]["date_modified_max"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["single_and_multiple_listings_resp"];
            readonly 400: components["responses"]["invalid_channel_id_resp"];
            readonly 422: components["responses"]["invalid_filters_resp"];
        };
    };
    readonly updateChannelListings: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["UpdateMultipleListingsReq"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["single_and_multiple_listings_resp"];
            readonly 422: components["responses"]["missing_or_invalid_multiple_listings_data_for_put_resp"];
        };
    };
    readonly createChannelListings: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CreateMultipleListingsReq"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["single_and_multiple_listings_resp"];
            readonly 422: components["responses"]["missing_or_invalid_multiple_listings_data_for_post_resp"];
        };
    };
    readonly getChannelListing: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
                /** @description The ID of a channel listing. */
                readonly listing_id: components["parameters"]["listing_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["single_listing_resp"];
            readonly 404: components["responses"]["listing_not_found_resp"];
        };
    };
    readonly updateCheckoutUrl: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["PutCheckoutUrl"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Site"];
                    readonly "Example 1": unknown;
                };
            };
            /** @description Unprocessable Entity. Your checkout and storefront must be within the same main domain like `example.com` and `subdomain.example.com` */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @default 422 */
                        readonly status: number;
                        /** @example Incorrect checkout url https://checkout.example.com. Your checkout and storefront must be within the same main domain like “main.com” and “subdomain.main.com */
                        readonly title?: string;
                        /** @default https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes */
                        readonly type: string;
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                    };
                };
            };
        };
    };
    readonly deleteCheckoutUrl: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK. `data` and `meta` are empty objects. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: Record<string, unknown>;
                        readonly meta?: components["schemas"]["EmptyMeta"];
                    };
                };
            };
        };
    };
    readonly getChannelSite: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["site_Resp"];
        };
    };
    readonly updateChannelSite: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["site_Put"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["site_Resp"];
        };
    };
    readonly createChannelSite: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["site_Post"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["site_Resp"];
        };
    };
    readonly deleteChannelSite: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": Record<string, unknown>;
                };
            };
        };
    };
    readonly getChannelMenus: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["channel_menus_Resp"];
        };
    };
    readonly createChannelMenus: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["channel_menus_Post"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["channel_menus_Resp"];
            /** @description Unprocessable entity (The following fields are invalid.)
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readonly deleteChannelMenus: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: number;
                        readonly meta?: components["schemas"]["EmptyMeta"];
                    };
                };
            };
        };
    };
    readonly getChannelMetafields: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Filter based on a metafieldʼs key.
                 *      */
                readonly key?: components["parameters"]["MetafieldKeyParam"];
                /** @description Filter based on a metafieldʼs namespace. */
                readonly namespace?: components["parameters"]["MetafieldNamespaceParam"];
                /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
                readonly direction?: components["parameters"]["DirectionParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["metafield_200"];
        };
    };
    readonly createChannelMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["metafield_Post"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["metafield_200"];
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description The `Metafield` conflicts with another `Metafield`. This can result from duplicate unique key combinations of the appʼs client id, namespace, key, resource_type, and resource_id.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readonly getChannelMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
                readonly metafield_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["metafield_200"];
            /** @description Not found (A metafield was not found with this query).
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    readonly updateChannelMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
                readonly metafield_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["metafield_Put"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["metafield_200"];
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Not found (A metafield was not found with this query).
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    readonly deleteChannelMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of a channel. */
                readonly channel_id: components["parameters"]["channel_id_path_param"];
                readonly metafield_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description No Content */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found (A metafield was not found with this query).
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    readonly getChannelsMetafields: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Filter based on a metafieldʼs key.
                 *      */
                readonly key?: components["parameters"]["MetafieldKeyParam"];
                /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
                readonly "key:in"?: components["parameters"]["MetafieldKeyInParam"];
                /** @description Filter based on a metafieldʼs namespace. */
                readonly namespace?: components["parameters"]["MetafieldNamespaceParam"];
                /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter. */
                readonly "namespace:in"?: components["parameters"]["MetafieldNamespaceInParam"];
                /** @description Sort direction. Acceptable values are: `asc`, `desc`. */
                readonly direction?: components["parameters"]["DirectionParam"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParamMetafields"];
                /** @description Filter items by minimum date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields modified after this date. */
                readonly "date_modified:min"?: components["parameters"]["date_modified_min"];
                /** @description Filter items by maximum date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields modified before this date. */
                readonly "date_modified:max"?: components["parameters"]["date_modified_max"];
                /** @description Filter items by minimum date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields created after this date. */
                readonly "date_created:min"?: components["parameters"]["date_created_min"];
                /** @description Filter items by maximum date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields created before this date. */
                readonly "date_created:max"?: components["parameters"]["date_created_max"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description List of `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse"];
                };
            };
        };
    };
    readonly updateChannelsMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["MetafieldPut"][];
            };
        };
        readonly responses: {
            /** @description List of updated `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Response object for metafields creation with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
                };
            };
        };
    };
    readonly createChannelsMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["MetafieldPost"][];
            };
        };
        readonly responses: {
            /** @description List of created `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Unprocessable entity (The following fields are invalid.) */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readonly deleteChannelsMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** @description List of metafield IDs. */
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly number[];
            };
        };
        readonly responses: {
            /** @description Response object for metafields deletion with success.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionDeleteResponseSuccess"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Response object for metafields deletion with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_DELETE"];
                };
            };
        };
    };
}
