/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/store/systemlogs": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get System Logs
         * @description Get system logs
         */
        readonly get: operations["getStoreSystemLogs"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description BigCommerce meta payload for collection-type responses. */
        readonly IndexMeta: {
            readonly pagination?: {
                /** @example 1 */
                readonly total?: number;
                /** @example 1 */
                readonly count?: number;
                /** @example 50 */
                readonly per_page?: number;
                /** @example 1 */
                readonly current_page?: number;
                /** @example 1 */
                readonly total_pages?: number;
                readonly links?: {
                    /** @example ?page=1&limit=50 */
                    readonly previous?: string;
                    /** @example ?page=1&limit=50 */
                    readonly current?: string;
                    /** @example ?page=1&limit=50 */
                    readonly next?: string;
                };
            };
        };
        readonly ErrorResponse: components["schemas"]["BaseError"] & {
            readonly errors?: components["schemas"]["DetailedErrors"];
        };
        /** @description Error payload for the BigCommerce API.
         *      */
        readonly BaseError: {
            /** @description The HTTP status code.
             *      */
            readonly status?: number;
            /** @description The title of the message describing the particular error.
             *      */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
        };
        readonly DetailedErrors: {
            readonly [key: string]: string;
        };
        /** SystemLog */
        readonly SystemLog: {
            readonly id?: number;
            readonly type?: string;
            readonly module?: string;
            readonly severity?: string;
            readonly summary?: string;
            readonly message?: string;
            /** Format: date-time */
            readonly date_created?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getStoreSystemLogs: {
        readonly parameters: {
            readonly query?: {
                /** @description Query parameter that lets you return the number of results displayed per page. */
                readonly limit?: number;
                /** @description Query parameter that lets you specify the starting page in which results are returned. */
                readonly page?: number;
                /** @description Query parameter that lets you filter the results by log type. */
                readonly type?: "general" | "payment" | "shipping" | "tax" | "notification" | "emailintegration" | "ordersettings" | "design";
                /** @description Query parameter that lets you exclude a log type from the results. */
                readonly "type:not"?: string;
                /** @description Query parameter that lets you filter the results by module. */
                readonly module?: "export+only" | "email+message" | "theme+download" | "order+status" | "optimized+checkout";
                /** @description Query parameter that lets you exclude a log module from the results. */
                readonly "module:not"?: string;
                /** @description Query parameter that lets you filter results by severity level, as an integer. The following values are possible: Success = 1, Notice = 2, Warning = 3, Error = 4 */
                readonly severity?: 1 | 2 | 3 | 4;
                /** @description Query parameter that lets you filter by minimum severity, as an integer. */
                readonly "severity:min"?: number;
                /** @description Query parameter that lets you filter by maximum severity, as an integer. */
                readonly "severity:max"?: number;
                /** @description A comma-separated list of log IDs by which to filter. For example, `?id:in=3,4,6`. */
                readonly "id:in"?: readonly number[];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description The request completed successfully. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["SystemLog"][];
                        readonly meta?: components["schemas"]["IndexMeta"];
                    };
                };
            };
        };
    };
}
