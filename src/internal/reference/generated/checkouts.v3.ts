/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/checkouts/{checkoutId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Checkout
         * @description Returns a *Checkout*.
         *
         *     **Notes**
         *
         *     The cart ID and checkout ID are the same.
         */
        readonly get: operations["getCheckout"];
        /**
         * Update Customer Messages
         * @description Change customer message pertaining to an existing *Checkout*.
         *
         *     **Limits:**
         *     * 2000 characters for customer message
         */
        readonly put: operations["updateCheckout"];
    };
    readonly "/checkouts/{checkoutId}/discounts": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Add Discount to Checkout
         * @description Adds a discount to an existing checkout.
         *
         *     Use this endpoint to apply the following discounts:
         *     * Apply a manual discount to a cart. In this case, you can distribute the discount between each line item in the cart based on the item value.
         *     * Apply a manual discount against a specific line item.
         *     * Apply a manual discount at the item-level with a cart-level discount.
         *
         *     Notes:
         *     * When you call this API, you clear out all existing discounts applied to line items, including product and order-based discounts.
         *     * You cannot apply a manual discount to a specific line item if you have already applied a coupon or automatic promotion to it.
         *
         *     Required Fields:
         *     * `discounted_amount` at the cart-level or at the item-level
         *
         *     To prevent lost updates due to concurrent requests overriding changes made by others, it is recommended to enable optimistic concurrency control by including the `version` field in the request payload. If the provided version does not match the version on the server, a conflict error will be returned, which the client can handle accordingly.
         */
        readonly post: operations["addCheckoutDiscount"];
    };
    readonly "/checkouts/{checkoutId}/billing-address": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Add Checkout Billing Address
         * @description Adds a billing address to an existing checkout.
         *
         *     **Required Fields**
         *     * email
         *     * country_code
         *
         *     To prevent lost updates due to concurrent requests overriding changes made by others, it is recommended to enable optimistic concurrency control by including the `version` field in the request payload. If the provided version does not match the version on the server, a conflict error will be returned, which the client can handle accordingly.
         */
        readonly post: operations["addCheckoutBillingAddress"];
    };
    readonly "/checkouts/{checkoutId}/billing-address/{addressId}": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Update Checkout Billing Address
         * @description Updates an existing billing address on a checkout.
         *
         *     To prevent lost updates due to concurrent requests overriding changes made by others, it is recommended to enable optimistic concurrency control by including the `version` field in the request payload. If the provided version does not match the version on the server, a conflict error will be returned, which the client can handle accordingly.
         */
        readonly put: operations["updateCheckoutBillingAddress"];
    };
    readonly "/checkouts/{checkoutId}/consignments": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Add Consignment to Checkout
         * @description Adds a new consignment to a checkout.
         *
         *
         *     To prevent lost updates due to concurrent requests overriding changes made by others, it is recommended to enable optimistic concurrency control by including the `version` field in the request payload. If the provided version does not match the version on the server, a conflict error will be returned, which the client can handle accordingly.
         *
         *     For more information about working with consignments, see [Checkout consignment](/docs/storefront/cart-checkout/guide/consignments).
         *
         *     Though the only required `address` properties to create a consignment are `email` and `country_code`, to successfully [create an order](/docs/rest-management/checkouts/checkout-orders#create-an-order) the `address` requires the following properties:
         *     * `first_name`
         *     * `last_name`
         *     * `address1`
         *     * `city`
         *     * `country`
         *     * `email`
         *     * `country_code`
         *
         *     Depending on the country, the following `address` properties may also be required:
         *
         *     * `postal_code`
         *     * `state_or_province`
         */
        readonly post: operations["addCheckoutConsignment"];
    };
    readonly "/checkouts/{checkoutId}/consignments/{consignmentId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
                readonly consignmentId: string;
            };
            readonly cookie?: never;
        };
        /**
         * Update Checkout Consignment
         * @description Updates an existing consignment. The address, line item IDs, and shipping option ID can be updated using this endpoint.
         *
         *     Use a separate `PUT` request to update the shipping option IDs if you also want to update the address and line item IDs.
         *
         *     To add new shipping options, complete the following steps:
         *     * Use the [Add Consignment to Checkout](/docs/rest-management/checkouts/checkout-consignments#add-consignment-to-checkout) endpoint to add a new [consignment] to a checkout.
         *     * Assign a shipping option to the new consignment by sending a `PUT` request to update the consignment's `shipping_option_id` with a returned value from `data.consignments[N].available_shipping_option[N].id` obtained in the [Add Consignment to Checkout](/docs/rest-management/checkouts/checkout-consignments#add-consignment-to-checkout) endpoint.
         *
         *     To update an existing address and line item IDs, assign a new address and line item IDs by sending a `PUT` request.
         *
         *     To prevent lost updates due to concurrent requests overriding changes made by others, it is recommended to enable optimistic concurrency control by including the `version` field in the request payload. If the provided version does not match the version on the server, a conflict error will be returned, which the client can handle accordingly.
         *
         *
         *     2. Assign a shipping option to the new consignment by sending a `PUT` request to update the consignment's `shipping_option_id` with a returned value from `data.consignments[N].available_shipping_option[N].id` obtained in Step One.
         */
        readonly put: operations["updateCheckoutConsignment"];
        /**
         * Delete Checkout Consignment
         * @description Removes an existing consignment from a checkout.
         *
         *     To prevent lost updates due to concurrent requests overriding changes made by others, it is recommended to enable optimistic concurrency control by including the `version` field in the request payload. If the provided version does not match the version on the server, a conflict error will be returned, which the client can handle accordingly.
         */
        readonly delete: operations["deleteCheckoutConsignment"];
    };
    readonly "/checkouts/{checkoutId}/coupons": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Add Coupon to Checkout
         * @description Adds a coupon code to a checkout.
         *
         *     You can use multiple coupons by using this endpoint to apply one coupon at a time on your storefront. Ensure you enable the [Promotion Settings](https://support.bigcommerce.com/s/article/Store-Settings?language=en_US#promotion) in your control panel to allow for multiple coupons per order.
         *
         *     **Required Fields**
         *     * coupon_code
         *
         *     **Limits**
         *     * Coupon codes have a 50-character limit.
         *
         *     To prevent lost updates due to concurrent requests overriding changes made by others, it is recommended to enable optimistic concurrency control by including the `version` field in the request payload. If the provided version does not match the version on the server, a conflict error will be returned, which the client can handle accordingly.
         */
        readonly post: operations["addCheckoutCoupon"];
    };
    readonly "/checkouts/{checkoutId}/coupons/{couponCode}": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Delete Checkout Coupon
         * @description Deletes a coupon code from a checkout.
         *
         *     To prevent lost updates due to concurrent requests overriding changes made by others, it is recommended to enable optimistic concurrency control by including the `version` field in the request payload. If the provided version does not match the version on the server, a conflict error will be returned, which the client can handle accordingly.
         */
        readonly delete: operations["deleteCheckoutCoupon"];
    };
    readonly "/checkouts/{checkoutId}/fees": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Update order level fees in a checkout
         * @description Updates order level fees in a checkout.
         *     > We do not support partial updates, so please send the total entity values for each fee to be updated.
         */
        readonly put: operations["CheckoutsFeesByCheckoutIdPut"];
        /**
         * Add order level fees to a checkout
         * @description Adds order level fees to a checkout.
         *
         *     Limits:
         *       - Maximum of 5 fees per checkout.
         */
        readonly post: operations["CheckoutsFeesByCheckoutIdPost"];
        /**
         * Delete order level fees from a checkout.
         * @description Delete fees from a checkout.
         *
         *     > #### Note
         *     > * The `Try It` feature is not currently supported for this endpoint.
         *
         */
        readonly delete: operations["CheckoutsFeesByCheckoutIdDelete"];
    };
    readonly "/checkouts/{checkoutId}/orders": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Create an Order
         * @description Creates an order.
         *
         *     ## Usage notes
         *     * Orders created will be set to incomplete order status.
         *     * You can create as many orders from the same order (cart) as you want.
         *     * Order duplication copies the existing order, assigns a new order number, and sets the new order status to `incomplete`.
         *     * Once the order is paid, the cart is deleted.
         *     * Cart deletion occurs if you are using BigCommerce to accept payments on orders.
         */
        readonly post: operations["createOrder"];
    };
    readonly "/checkouts/settings": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Checkout Settings
         * @description Get checkout settings
         */
        readonly get: operations["getCheckoutSettings"];
        /**
         * Update Checkout Settings
         * @description Update checkout settings
         */
        readonly put: operations["updateCheckoutSettings"];
    };
    readonly "/checkouts/{checkoutId}/token": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
            };
            readonly cookie?: never;
        };
        /**
         * Create Checkout Token
         * @description Use the checkout token to display a confirmation page for a guest shopper.
         *     **Usage Notes** * The response from performing this POST request is a checkout token. * The checkout token is a single-use token that is not order-dependent. You cannot create this token after finalizing an order. * After completing the order, you can redirect the shopper to /order-confirmation/{orderId}?t={checkoutToken}. * After token validation, the /order-confirmation/{orderId} page displays. * The `ORDER_TOKEN` should match the order or the logged-in customer can access the order.
         */
        readonly post: operations["createCheckoutToken"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Checkout */
        readonly Checkout: {
            /**
             * Format: uuid
             * @example 497f6eca-6276-4993-bfeb-53cbbbba6f08
             */
            readonly id?: string;
            /** Cart */
            readonly cart?: {
                /**
                 * Format: uuid
                 * @description Cart ID, provided after creating a cart with a POST request.
                 * @example 497f6eca-6276-4993-bfeb-53cbbbba6f08
                 */
                readonly id?: string;
                /**
                 * @description ID of the customer to which the cart belongs.
                 * @example 1
                 */
                readonly customer_id?: number;
                /**
                 * @description The email address of the cart. This is the same email address that is used in the billing address.
                 * @example user@example.com
                 */
                readonly email?: string;
                /** Currency */
                readonly currency?: {
                    /**
                     * @description ISO-4217 currency code. (See: https://www.iso.org/iso-4217-currency-codes.html.)
                     * @example USD
                     */
                    readonly code?: string;
                };
                /** @description Indicates whether product prices are shown inclusive of sales tax. */
                readonly tax_included?: boolean;
                /**
                 * Format: double
                 * @description Sum of cart line-item amounts before cart-level discounts, coupons, or taxes are applied.
                 * @example 5
                 */
                readonly base_amount?: number;
                /** @description ID of channel */
                readonly channel_id?: number;
                /**
                 * Format: double
                 * @description The amount includes order-level automatic promotions plus manual discounts and excludes coupon and product-based discounts.
                 * @example 0.5
                 */
                readonly discount_amount?: number;
                /**
                 * Format: double
                 * @description Sum of cart line-item amounts minus cart-level discounts and coupons including tax.
                 * @example 4.14
                 */
                readonly cart_amount_inc_tax?: number;
                /**
                 * Format: double
                 * @description Sum of cart line-item amounts minus cart-level discounts and coupons excluding tax.
                 * @example 3.6
                 */
                readonly cart_amount_ex_tax?: number;
                readonly coupons?: readonly {
                    /**
                     * @description The coupon code.
                     * @example SHOPNOW
                     */
                    readonly code: string;
                    /**
                     * @description The coupon ID.
                     * @example 1
                     */
                    readonly id?: number;
                    /**
                     * @description Key name to identify the type of coupon.
                     * @example percentage_discount
                     */
                    readonly coupon_type?: string;
                    /**
                     * Format: float
                     * @description The discounted amount applied within a given context.
                     * @example 0.9
                     */
                    readonly discounted_amount?: number;
                    /**
                     * @description The display name of the coupon.
                     * @example 20% Off
                     */
                    readonly display_name?: string;
                }[];
                readonly discounts?: readonly {
                    /**
                     * @description ID of the applied discount.
                     * @example 5eba1f1e-0ec5-40f7-8058-f7b452c7237d
                     */
                    readonly id?: string;
                    /**
                     * Format: double
                     * @description The discounted amount applied within a given context.
                     * @example 1.4
                     */
                    readonly discounted_amount?: number;
                }[];
                /** Line Item */
                readonly line_items?: {
                    readonly physical_items: readonly {
                        /** Format: double */
                        readonly quantity: number;
                        /** @description The line-item ID. */
                        readonly id?: string;
                        /** Format: double */
                        readonly variant_id?: number;
                        /** Format: double */
                        readonly product_id?: number;
                        readonly sku?: string;
                        /** @description The product name of the item. */
                        readonly name?: string;
                        /** @description The product URL. */
                        readonly url?: string;
                        readonly is_taxable?: boolean;
                        readonly image_url?: string;
                        readonly discounts?: readonly {
                            /** @description The string value is always equal to "manual-discount" regardless of the input. */
                            readonly id?: string | number;
                            /**
                             * Format: double
                             * @description The discounted amount applied within a given context.
                             */
                            readonly discounted_amount?: number;
                        }[];
                        /**
                         * Format: double
                         * @description The total value of all discounts applied to this item.
                         */
                        readonly discount_amount?: number;
                        /**
                         * Format: double
                         * @description The total value of all coupons applied to this item.
                         */
                        readonly coupon_amount?: number;
                        /** @description An item’s original price is the same as the default price of the product configured in the admin panel. */
                        readonly original_price?: number;
                        /**
                         * Format: double
                         * @description The net item price before discounts and coupons are applied. BigCommerce derives an item’s list price from the product default price or, if applicable, the sale price configured in the admin panel.
                         */
                        readonly list_price?: number;
                        /**
                         * Format: double
                         * @description Price of the item after all discounts are applied. (The final price before tax calculation.)
                         */
                        readonly sale_price?: number;
                        /**
                         * Format: double
                         * @description List price of the item multiplied by the quantity.
                         */
                        readonly extended_list_price?: number;
                        /**
                         * Format: double
                         * @description Sale price of the item multiplied by the quantity.
                         */
                        readonly extended_sale_price?: number;
                        /**
                         * Format: double
                         * @description The price of a single product used for strike-through.
                         */
                        readonly comparison_price?: number;
                        /**
                         * Format: double
                         * @description The price of a line item (product * quantity) used for strike-through.
                         */
                        readonly extended_comparison_price?: number;
                        readonly is_require_shipping?: boolean;
                        readonly is_mutable?: boolean;
                        /**
                         * @description Whether or not a promotion added an additional item.
                         * @example false
                         */
                        readonly added_by_promotion?: boolean;
                        readonly parent_id?: number | null;
                        /** Gift Wrapping */
                        readonly gift_wrapping?: {
                            readonly name?: string;
                            readonly message?: string;
                            /** Format: double */
                            readonly amount?: number;
                            /** Format: double */
                            readonly amount_as_integer?: number;
                        } | null;
                    }[];
                    readonly digital_items: readonly {
                        /** Format: double */
                        readonly quantity: number;
                        /** @description The line-item ID. */
                        readonly id?: string;
                        /** Format: double */
                        readonly variant_id?: number;
                        readonly parent_id?: number | null;
                        /** Format: double */
                        readonly product_id?: number;
                        readonly sku?: string;
                        /** @description The product name of the item. */
                        readonly name?: string;
                        /** @description The product URL. */
                        readonly url?: string;
                        readonly is_mutable?: boolean;
                        readonly is_require_shipping?: boolean;
                        /**
                         * @description Whether or not a promotion added an additional item.
                         * @example false
                         */
                        readonly added_by_promotion?: boolean;
                        readonly is_taxable?: boolean;
                        readonly image_url?: string;
                        readonly discounts?: readonly {
                            /**
                             * Format: double
                             * @description ID of the applied discount.
                             */
                            readonly id?: string;
                            /**
                             * Format: double
                             * @description The discounted amount applied within a given context.
                             */
                            readonly discounted_amount?: number;
                        }[];
                        /**
                         * Format: double
                         * @description The total value of all discounts applied to this item.
                         */
                        readonly discount_amount?: number;
                        /**
                         * Format: double
                         * @description The total value of all coupons applied to this item.
                         */
                        readonly coupon_amount?: number;
                        /** @description An item’s original price is the same as the product default price in the admin panel. */
                        readonly original_price?: number;
                        /**
                         * Format: double
                         * @description The net item price before discounts and coupons are applied. BigCommerce derives an item’s list price from the product default price or, if applicable, the sale price configured in the admin panel.
                         */
                        readonly list_price?: number;
                        /**
                         * Format: double
                         * @description Price of the item after all discounts are applied. (The final price before tax calculation.)
                         */
                        readonly sale_price?: number;
                        /**
                         * Format: double
                         * @description List price of the item multiplied by the quantity.
                         */
                        readonly extended_list_price?: number;
                        /**
                         * Format: double
                         * @description Sale price of the item multiplied by the quantity.
                         */
                        readonly extended_sale_price?: number;
                        /**
                         * Format: double
                         * @description The price of a single product used for strike-through.
                         */
                        readonly comparison_price?: number;
                        /**
                         * Format: double
                         * @description The price of a line item (product * quantity) used for strike-through.
                         */
                        readonly extended_comparison_price?: number;
                    }[];
                    readonly gift_certificates: readonly {
                        /** @description Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`. */
                        readonly theme: string;
                        /**
                         * Format: double
                         * @description Value must be between 1.00 and 1,000.00 in the store’s default currency.
                         */
                        readonly amount: number;
                        /** Contact Entity */
                        readonly sender: {
                            readonly name?: string;
                            readonly email?: string;
                        };
                        /** Contact Entity */
                        readonly recipient: {
                            readonly name?: string;
                            readonly email?: string;
                        };
                        readonly id?: string;
                        /** @description GiftCertificate-provided name that will appear in the control panel. */
                        readonly name?: string;
                        readonly taxable?: boolean;
                        /** @description Limited to 200 characters. */
                        readonly message?: string;
                    }[];
                    readonly custom_items?: readonly {
                        readonly quantity: number;
                        readonly id?: string;
                        readonly extended_list_price?: number;
                        readonly list_price?: number;
                        readonly sku?: string;
                        readonly name?: string;
                        readonly image_url?: string;
                    }[];
                };
                /** @description Time when the cart was created. */
                readonly created_time?: string;
                /** @description Time when the cart was last updated. */
                readonly updated_time?: string;
            };
            /** Address Response */
            readonly billing_address?: {
                readonly first_name?: string;
                readonly last_name?: string;
                readonly email?: string;
                readonly company?: string;
                readonly address1?: string;
                readonly address2?: string;
                readonly city?: string;
                /** @description Represents state or province. */
                readonly state_or_province?: string;
                readonly state_or_province_code?: string;
                readonly country_code?: string;
                readonly postal_code?: string;
                readonly phone?: string;
                readonly custom_fields?: readonly {
                    readonly field_id?: string;
                    /** @description This can also be an array for fields that need to support a list of values (e.g., a set of check boxes.) */
                    readonly field_value?: string;
                }[];
            } & {
                readonly id?: string;
            };
            readonly consignments?: readonly {
                readonly id?: string;
                readonly shippingAddress?: {
                    readonly [key: string]: unknown;
                };
                /** Address Response */
                readonly address?: {
                    readonly first_name?: string;
                    readonly last_name?: string;
                    readonly email: string;
                    readonly company?: string;
                    readonly address1?: string;
                    readonly address2?: string;
                    readonly city?: string;
                    /** @description Represents state or province. */
                    readonly state_or_province?: string;
                    readonly state_or_province_code?: string;
                    readonly country_code: string;
                    readonly postal_code?: string;
                    readonly phone?: string;
                    readonly custom_fields?: readonly {
                        readonly field_id?: string;
                        /** @description This can also be an array for fields that need to support a list of values (e.g., a set of check boxes.) */
                        readonly field_value?: string;
                    }[];
                } & {
                    readonly id?: string;
                };
                /** @description This is available only when "include=consignments.available_shipping_options" is presented in the URL. */
                readonly available_shipping_options?: readonly {
                    readonly description?: string;
                    readonly id?: string;
                    /** @description Specifies the type of shipping option, such as flat rate, UPS, etc. */
                    readonly type?: string;
                    readonly image_url?: string;
                    /** Format: double */
                    readonly cost?: number;
                    /** @description An estimate of the arrival time. */
                    readonly transit_time?: string;
                    /** @description Read-only field that is used for the Shipping Provider API. */
                    readonly additional_description?: string;
                }[];
                /** Selected Shipping Option */
                readonly selected_shipping_option?: {
                    readonly description?: string;
                    readonly id?: string;
                    /** @description Specifies the type of shipping option, such as flat rate, UPS, etc. */
                    readonly type?: string;
                    readonly image_url?: string;
                    readonly cost?: number;
                    /** @description An estimate of the arrival time. */
                    readonly transit_time?: string;
                    /** @description Read-only field that is used for the Shipping Provider API. */
                    readonly additional_description?: string;
                };
                /** @description List of consignment discounts applied through coupons. */
                readonly coupon_discounts?: readonly {
                    /** @description Coupon code through which this discount was applied. */
                    readonly code?: string;
                    /** Format: double */
                    readonly amount?: number;
                }[];
                /** @description List of consignment discounts applied through cart-level discounts. */
                readonly discounts?: readonly {
                    /** @description Discount rule ID that applied this discount. */
                    readonly id?: number;
                }[];
                /**
                 * Format: double
                 * @description The shipping cost for this consignment including tax.
                 */
                readonly shipping_cost_inc_tax?: number;
                /**
                 * Format: double
                 * @description The shipping cost for this consignment excluding tax.
                 */
                readonly shipping_cost_ex_tax?: number;
                /**
                 * Format: double
                 * @description The handling cost of shipping for this consignment including tax.
                 */
                readonly handling_cost_inc_tax?: number;
                /**
                 * Format: double
                 * @description The handling cost of shipping for this consignment excluding tax.
                 */
                readonly handling_cost_ex_tax?: number;
                /** @description Array lists only one line item. To display multiple `line_item_ids`, perform a `POST` request to add consignments to the checkout using the same address. */
                readonly line_item_ids?: readonly string[];
                readonly selected_pickup_option?: components["schemas"]["PickupOption"];
            }[];
            readonly taxes?: readonly {
                /** @description Name of the tax. */
                readonly name?: string;
                /** Format: double */
                readonly amount?: number;
            }[];
            /** @description Coupons applied at checkout level. */
            readonly coupons?: readonly components["schemas"]["AppliedCoupon"][];
            /** @description Fees applied at the checkout level. */
            readonly fees?: readonly components["schemas"]["CheckoutFee"][];
            readonly order_id?: string | null;
            /**
             * Format: double
             * @description Shipping cost before any discounts are applied including tax.
             */
            readonly shipping_cost_total_inc_tax?: number;
            /**
             * Format: double
             * @description Shipping cost before any discounts are applied excluding tax.
             */
            readonly shipping_cost_total_ex_tax?: number;
            /**
             * Format: double
             * @description Handling cost for all consignments including tax.
             */
            readonly handling_cost_total_inc_tax?: number;
            /**
             * Format: double
             * @description Handling cost for all consignments excluding tax.
             */
            readonly handling_cost_total_ex_tax?: number;
            /** Format: double */
            readonly tax_total?: number;
            /**
             * Format: double
             * @description Subtotal of the checkout before applying item-level discounts including tax.
             */
            readonly subtotal_inc_tax?: number;
            /**
             * Format: double
             * @description Subtotal of the checkout before applying item-level discounts excluding tax.
             */
            readonly subtotal_ex_tax?: number;
            /**
             * Format: double
             * @description The total payable amount, before applying any store credit or a gift certificate.
             */
            readonly grand_total?: number;
            /** @description Time when the cart was created. */
            readonly created_time?: string;
            /** @description Time when the cart was last updated. */
            readonly updated_time?: string;
            /** @description Shopper's message provided as details for the order to be created from this checkout. */
            readonly customer_message?: string;
            readonly promotions?: readonly {
                /** Banner */
                readonly banners?: readonly {
                    /** @description ID of the promotion. */
                    readonly id?: string;
                    /** @description Type of the banner. */
                    readonly type?: string;
                    /** @description An array of the locations where the banner will display. */
                    readonly page?: readonly string[];
                    /** @description Text of the banner. */
                    readonly text?: string;
                }[];
            }[];
            /**
             * @description The current version of the checkout increments with each successful update. You can use it to enable optimistic concurrency control for subsequent updates.
             * @example 1
             */
            readonly version?: number;
        };
        /** Checkout_Put */
        readonly Checkout_Put: {
            readonly customer_message: string;
            /**
             * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
             * @example 1
             */
            readonly version?: number;
        };
        /** Applied Coupon */
        readonly AppliedCoupon: {
            /**
             * @description The coupon code.
             * @example SHOPNOW
             */
            readonly code: string;
            /**
             * @description The coupon ID.
             * @example 1
             */
            readonly id?: number;
            /**
             * @description Key name to identify the type of coupon.
             * @example percentage_discount
             */
            readonly coupon_type?: string;
            /**
             * @description The display name of the coupon.
             * @example 20% Off
             */
            readonly display_name?: string;
            /**
             * Format: float
             * @description The discounted amount applied within a given context.
             * @example 0.9
             */
            readonly discounted_amount?: number;
        };
        /** Checkout Fee */
        readonly CheckoutFee: {
            /**
             * Format: uuid
             * @description The fee ID.
             * @example 497f6eca-6276-4993-bfeb-53cbbbba6f08
             */
            readonly id?: string;
            /**
             * @description The type of the fee.
             * @enum {string}
             */
            readonly type?: "custom_fee";
            /**
             * @description Name of the fee.
             * @example AAINS
             */
            readonly name?: string;
            /**
             * @description Display name of the fee targeting customers/shoppers.
             * @example Package Protection Insurance
             */
            readonly display_name?: string;
            /**
             * @description Cost of the fee including tax.
             * @example 10
             */
            readonly cost_inc_tax?: number;
            /**
             * @description Cost of the fee excluding tax.
             * @example 9.9
             */
            readonly cost_ex_tax?: number;
            /**
             * @description The source of the request.
             * @example AA
             */
            readonly source?: string;
            /**
             * @description The tax class ID.
             * @example 1
             */
            readonly tax_class_id?: number | null;
        };
        /** Address Properties */
        readonly AddressProperties: {
            readonly first_name?: string;
            readonly last_name?: string;
            readonly email: string;
            readonly company?: string;
            readonly address1?: string;
            readonly address2?: string;
            readonly city?: string;
            /** @description Represents state or province. */
            readonly state_or_province?: string;
            readonly state_or_province_code?: string;
            readonly country_code: string;
            readonly postal_code?: string;
            readonly phone?: string;
            /** @description You can retrieve custom fields from the [Get Form Fields](/docs/rest-storefront/forms#get-form-fields) endpoint. */
            readonly custom_fields?: readonly {
                readonly field_id?: string;
                /** @description This can also be an array for fields that need to support a list of values (e.g., a set of check boxes.) */
                readonly field_value?: string;
            }[];
            /**
             * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
             * @example 1
             */
            readonly version?: number;
        };
        /** Create Consignment Request */
        readonly CreateConsignmentRequest: readonly {
            /** Address Properties */
            readonly address?: {
                readonly first_name?: string;
                readonly last_name?: string;
                readonly email: string;
                readonly company?: string;
                readonly address1?: string;
                readonly address2?: string;
                readonly city?: string;
                /** @description Represents state or province. */
                readonly state_or_province: string;
                readonly state_or_province_code?: string;
                readonly country_code: string;
                readonly postal_code: string;
                readonly phone?: string;
                /** @description You can retrieve custom fields from the [Get Form Fields](/docs/rest-storefront/forms#get-form-fields) endpoint. */
                readonly custom_fields?: readonly {
                    /** @description You must provide the form field ID value as the `field_id`. */
                    readonly field_id: string;
                    /** @description This can also be an array for fields that need to support a list of values (e.g., a set of check boxes.) */
                    readonly field_value?: string;
                }[];
            };
            readonly line_items?: readonly {
                /** @description Corresponds to `line_items.physical_items[N].id` value from `GET`checkout response. */
                readonly item_id: string;
                /** Format: int32 */
                readonly quantity: number;
            }[];
            /** @description Assigns a pickup consignment. Note: You cannot assign a shipping method with a pickup consignment. */
            readonly pickup_option?: {
                /** @example 1 */
                readonly pickup_method_id?: number;
            };
            /**
             * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
             * @example 1
             */
            readonly version?: number;
        }[];
        /** Delete Consignment Request */
        readonly DeleteConsignmentRequest: {
            /**
             * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
             * @example 1
             */
            readonly version?: number;
        };
        /**
         * Update Consignment Request
         * @description One or more of these three fields are mandatory. `address` and `line_items` can be updated in one request. `shipping_option_id` has to be updated in a separate request because changing the address or line items can invalidate the previously available shipping options.
         */
        readonly UpdateConsignmentRequest: {
            /** Address Properties */
            readonly address?: {
                readonly first_name?: string;
                readonly last_name?: string;
                readonly email: string;
                readonly company?: string;
                readonly address1?: string;
                readonly address2?: string;
                readonly city?: string;
                /** @description Represents state or province. */
                readonly state_or_province?: string;
                readonly state_or_province_code?: string;
                readonly country_code: string;
                readonly postal_code?: string;
                readonly phone?: string;
                readonly custom_fields?: readonly {
                    readonly field_id?: string;
                    /** @description This can also be an array for fields that need to support a list of values (e.g., a set of check boxes.) */
                    readonly field_value?: string;
                }[];
            };
            readonly line_items?: readonly {
                /** @description Corresponds to `line_items.physical_items[N].id` value from `GET`checkout response. */
                readonly item_id: string;
                /** Format: int32 */
                readonly quantity: number;
            }[];
            readonly shipping_option_id?: string;
            readonly pickup_option?: {
                /** @example 1 */
                readonly pickup_method_id?: number;
            };
            readonly custom_shipping?: {
                /** @example 12.9 */
                readonly price?: number;
                /** @example custom shipping */
                readonly description?: string;
            };
            /**
             * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
             * @example 1
             */
            readonly version?: number;
        };
        /** Coupon Code Request */
        readonly CouponCodeRequest: {
            /** @description Coupon codes have a 50-character limit. */
            readonly coupon_code?: string;
            /**
             * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
             * @example 1
             */
            readonly version?: number;
        };
        readonly BaseFee: {
            /**
             * @description The type of the fee.
             * @enum {string}
             */
            readonly type: "custom_fee";
            /**
             * @description The name of the fee.
             * @example AAINS
             */
            readonly name: string;
            /**
             * @description The display name of the fee targeting customers/shoppers.
             * @example Package Protection Insurance
             */
            readonly display_name: string;
            /**
             * @description The cost of the fee.
             * @example 7.12
             */
            readonly cost: number;
            /**
             * @description The source of the request.
             * @example AA
             */
            readonly source: string;
            /**
             * @description The tax class ID applied to this fee (you can retrieve the tax class ID from our management API - v2/tax_classes). If the tax class is not provided or is null, the tax class set in the control panel is applied.
             * @example 1
             */
            readonly tax_class_id?: number;
        };
        readonly FeeWithId: components["schemas"]["BaseFee"] & {
            /**
             * @description ID of the fee.
             * @example 3c26f3e6-146d-4dce-8159-2a77c0bba409
             */
            readonly id: string;
        };
        /** Fees POST request */
        readonly AddFeesRequest: {
            /** @description The fees to be added to a checkout. */
            readonly fees: readonly components["schemas"]["BaseFee"][];
        };
        /** Fees PUT request */
        readonly UpdateFeesRequest: {
            /** @description The fees to be updated in a checkout. */
            readonly fees: readonly components["schemas"]["FeeWithId"][];
        };
        /** Fees DELETE request */
        readonly DeleteFeesRequest: {
            /** @description The IDs of the fees to be deleted from a checkout. */
            readonly ids: readonly string[];
        };
        /** Delete Coupon Request */
        readonly DeleteCouponCodeRequest: {
            /**
             * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
             * @example 1
             */
            readonly version?: number;
        };
        /** Order */
        readonly Order: {
            /**
             * @description The order ID.
             * @example 75
             */
            readonly id?: number;
        };
        /** Checkouts Settings */
        readonly CheckoutsSettings: {
            readonly custom_checkout_script_url?: string;
            readonly order_confirmation_use_custom_checkout_script?: boolean;
            readonly custom_order_confirmation_script_url?: string;
            readonly custom_checkout_supports_uco_settings?: boolean;
            readonly custom_checkout_sri_hash?: string;
            readonly custom_order_confirmation_sri_hash?: string;
        };
        /** Checkouts settings request */
        readonly CheckoutsSettingsRequest: {
            /** @description Custom checkout script URL to replace our default checkout. To reset a store to optimized one-page checkout, pass an empty string for `custom_checkout_script_url` and `custom_order_confirmation_script_url`. */
            readonly custom_checkout_script_url?: string;
            /** @description When order_confirmation_use_custom_checkout_script=true, the default custom_order_confirmation_script_url defaults to an empty string. */
            readonly order_confirmation_use_custom_checkout_script?: boolean;
            /** @description Custom order confirmation script URL to replace the default order confirmation. To reset a store to optimized one-page checkout, pass an empty string for `custom_checkout_script_url` and `custom_order_confirmation_script_url`. */
            readonly custom_order_confirmation_script_url?: string;
            /** @description Boolean value that specifies whether this checkout supports Optimized One-Page Checkout settings. */
            readonly custom_checkout_supports_uco_settings?: boolean;
            /** @description The Subresource Integrity (SRI) hash for the custom checkout script URL. */
            readonly custom_checkout_sri_hash?: string;
            /** @description The Subresource Integrity (SRI) hash for the custom order confirmation script URL. */
            readonly custom_order_confirmation_sri_hash?: string;
        };
        /** Pickup Option */
        readonly PickupOption: {
            readonly pickup_method_id?: number;
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly MetaOpen: {
            readonly [key: string]: unknown;
        };
    };
    responses: {
        readonly CheckoutResponse: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["Checkout"];
                };
                readonly "Available Shipping Options": unknown;
                readonly "Selected Shipping Options": unknown;
                readonly "Coupon Applied": unknown;
                readonly "No Coupon Applied": unknown;
                readonly "Include promotions": unknown;
                readonly "example-1": unknown;
            };
        };
        /** @description Cart conflict */
        readonly CartConflictErrorResponse: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly status?: number;
                    readonly title?: string;
                    readonly type?: string;
                };
            };
        };
        readonly checkout_settings_resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["CheckoutsSettings"];
                    readonly meta?: Record<string, unknown>;
                };
                readonly "WebDAV protocol": unknown;
            };
        };
        readonly order_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["Order"];
                    readonly meta?: Record<string, unknown>;
                };
            };
        };
    };
    parameters: {
        /** @description ID of the checkout; the same as the cart ID. */
        readonly checkoutId: string;
        readonly addressId: number;
        readonly consignmentId: string;
        /** @description The coupon code value, not the coupon ID. */
        readonly couponCode: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly "Content-Type": string;
        /** @description Include the shipping options available to this checkout. */
        readonly IncludeShippingOptions: "consignments.available_shipping_options";
        /** @description * `cart.line_items.physical_items.options` - physical options
         *     * `cart.line_items.digital_items.options` - digital options
         *     * `consignments.available_shipping_options` - shipping options
         *     * `promotions.banners` - promotion options */
        readonly IncludeGeneral: readonly ("cart.line_items.physical_items.options" | "cart.line_items.digital_items.options" | "consignments.available_shipping_options" | "promotions.banners")[];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getCheckout: {
        readonly parameters: {
            readonly query?: {
                /** @description * `cart.line_items.physical_items.options` - physical options
                 *     * `cart.line_items.digital_items.options` - digital options
                 *     * `consignments.available_shipping_options` - shipping options
                 *     * `promotions.banners` - promotion options */
                readonly include?: components["parameters"]["IncludeGeneral"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Checkout"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                    readonly "Available Shipping Options": unknown;
                    readonly "Selected Shipping Options": unknown;
                    readonly "Coupon Applied": unknown;
                    readonly "No Coupon Applied": unknown;
                    readonly "Include promotions": unknown;
                    readonly "example-1": unknown;
                };
            };
            /** @description Error code that is displayed when a given checkout ID is not found. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly errors?: readonly {
                            /** Format: int32 */
                            readonly status?: number;
                            readonly title?: string;
                            readonly type?: string;
                            readonly detail?: string;
                        }[];
                    };
                };
            };
        };
    };
    readonly updateCheckout: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["Content-Type"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
            };
            readonly cookie?: never;
        };
        /** @description `customer_message` is required (maximum length is 2000). */
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["Checkout_Put"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Checkout"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                    readonly "Available Shipping Options": unknown;
                    readonly "Selected Shipping Options": unknown;
                    readonly "Coupon Applied": unknown;
                    readonly "No Coupon Applied": unknown;
                    readonly "Include promotions": unknown;
                    readonly "example-1": unknown;
                };
            };
            readonly 409: components["responses"]["CartConflictErrorResponse"];
        };
    };
    readonly addCheckoutDiscount: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["Content-Type"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                /** @example {
                 *       "cart": {
                 *         "discounts": [
                 *           {
                 *             "discounted_amount": 10,
                 *             "name": "manual-discount"
                 *           }
                 *         ]
                 *       },
                 *       "version": 1
                 *     } */
                readonly "application/json": {
                    readonly cart?: {
                        readonly discounts?: readonly {
                            /** @example 10 */
                            readonly discounted_amount: number;
                            /** @example manual */
                            readonly name?: string;
                        }[];
                        readonly line_items?: readonly {
                            /** @example 8edef915-8e8e-4ebd-bece-31fbb1191a7e */
                            readonly id?: string;
                            /** @example 15 */
                            readonly discounted_amount?: number;
                        }[];
                        /**
                         * @description The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
                         * @example 1
                         */
                        readonly version?: number;
                    };
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Checkout"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                    readonly "Available Shipping Options": unknown;
                    readonly "Selected Shipping Options": unknown;
                    readonly "Coupon Applied": unknown;
                    readonly "No Coupon Applied": unknown;
                    readonly "Include promotions": unknown;
                    readonly "example-1": unknown;
                };
            };
            readonly 409: components["responses"]["CartConflictErrorResponse"];
        };
    };
    readonly addCheckoutBillingAddress: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["Content-Type"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["AddressProperties"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Checkout"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                    readonly "Available Shipping Options": unknown;
                    readonly "Selected Shipping Options": unknown;
                    readonly "Coupon Applied": unknown;
                    readonly "No Coupon Applied": unknown;
                    readonly "Include promotions": unknown;
                    readonly "example-1": unknown;
                };
            };
            readonly 409: components["responses"]["CartConflictErrorResponse"];
        };
    };
    readonly updateCheckoutBillingAddress: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["Content-Type"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
                readonly addressId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["AddressProperties"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Checkout"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                    readonly "Available Shipping Options": unknown;
                    readonly "Selected Shipping Options": unknown;
                    readonly "Coupon Applied": unknown;
                    readonly "No Coupon Applied": unknown;
                    readonly "Include promotions": unknown;
                    readonly "example-1": unknown;
                };
            };
            readonly 409: components["responses"]["CartConflictErrorResponse"];
        };
    };
    readonly addCheckoutConsignment: {
        readonly parameters: {
            readonly query?: {
                /** @description Include the shipping options available to this checkout. */
                readonly include?: components["parameters"]["IncludeShippingOptions"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["Content-Type"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["CreateConsignmentRequest"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Checkout"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                    readonly "Available Shipping Options": unknown;
                    readonly "Selected Shipping Options": unknown;
                    readonly "Coupon Applied": unknown;
                    readonly "No Coupon Applied": unknown;
                    readonly "Include promotions": unknown;
                    readonly "example-1": unknown;
                };
            };
            readonly 409: components["responses"]["CartConflictErrorResponse"];
        };
    };
    readonly updateCheckoutConsignment: {
        readonly parameters: {
            readonly query?: {
                /** @description Include the shipping options available to this checkout. */
                readonly include?: components["parameters"]["IncludeShippingOptions"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["Content-Type"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
                readonly consignmentId: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["UpdateConsignmentRequest"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Checkout"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                    readonly "Available Shipping Options": unknown;
                    readonly "Selected Shipping Options": unknown;
                    readonly "Coupon Applied": unknown;
                    readonly "No Coupon Applied": unknown;
                    readonly "Include promotions": unknown;
                    readonly "example-1": unknown;
                };
            };
            readonly 409: components["responses"]["CartConflictErrorResponse"];
        };
    };
    readonly deleteCheckoutConsignment: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
                readonly consignmentId: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["DeleteConsignmentRequest"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Checkout"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                    readonly "Available Shipping Options": unknown;
                    readonly "Selected Shipping Options": unknown;
                    readonly "Coupon Applied": unknown;
                    readonly "No Coupon Applied": unknown;
                    readonly "Include promotions": unknown;
                    readonly "example-1": unknown;
                };
            };
        };
    };
    readonly addCheckoutCoupon: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["Content-Type"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CouponCodeRequest"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Checkout"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                    readonly "Available Shipping Options": unknown;
                    readonly "Selected Shipping Options": unknown;
                    readonly "Coupon Applied": unknown;
                    readonly "No Coupon Applied": unknown;
                    readonly "Include promotions": unknown;
                    readonly "example-1": unknown;
                };
            };
            readonly 409: components["responses"]["CartConflictErrorResponse"];
        };
    };
    readonly deleteCheckoutCoupon: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
                /** @description The actual coupon code value, not the coupon ID. */
                readonly couponCode: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["DeleteCouponCodeRequest"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Checkout"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                    readonly "Available Shipping Options": unknown;
                    readonly "Selected Shipping Options": unknown;
                    readonly "Coupon Applied": unknown;
                    readonly "No Coupon Applied": unknown;
                    readonly "Include promotions": unknown;
                };
            };
            readonly 409: components["responses"]["CartConflictErrorResponse"];
        };
    };
    readonly CheckoutsFeesByCheckoutIdPut: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["UpdateFeesRequest"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Checkout"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly CheckoutsFeesByCheckoutIdPost: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["Content-Type"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["AddFeesRequest"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Checkout"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly CheckoutsFeesByCheckoutIdDelete: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["DeleteFeesRequest"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Checkout"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly createOrder: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["Content-Type"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Order"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly getCheckoutSettings: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["CheckoutsSettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                    readonly "WebDAV protocol": unknown;
                };
            };
        };
    };
    readonly updateCheckoutSettings: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["Content-Type"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CheckoutsSettingsRequest"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["CheckoutsSettings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                    readonly "WebDAV protocol": unknown;
                };
            };
        };
    };
    readonly createCheckoutToken: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["Content-Type"];
            };
            readonly path: {
                /** @description ID of the checkout; the same as the cart ID. */
                readonly checkoutId: components["parameters"]["checkoutId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /** @example 1 */
                    readonly maxUses?: number;
                    /**
                     * @description Time-to-live (TTL) is the number of seconds the token is set to exist before being discarded.
                     * @example 86400
                     */
                    readonly ttl?: number;
                };
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @example beb3590088be88f59ba980d54a68df655cd8a1052a3e9caf535f3f820146c226 */
                        readonly checkoutToken?: string;
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
            /** @description Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
            readonly 401: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /**
                         * Format: int32
                         * @description The HTTP status code.
                         * @example 401
                         */
                        readonly status?: number;
                        /**
                         * @description The error title describing the particular error.
                         * @example Unauthorized
                         */
                        readonly title?: string;
                        /**
                         * @description A link to a list of BigCommerce API status codes.
                         *
                         * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
                         */
                        readonly type?: string;
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                    };
                };
            };
            /** @description Invalid JSON request body - missing or invalid data. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /**
                         * Format: int32
                         * @description The HTTP status code.
                         * @example 422
                         */
                        readonly status?: string;
                        /**
                         * @description The error title describing the particular error.
                         * @example Invalid input
                         */
                        readonly title?: string;
                        /**
                         * @description A link to a list of BigCommerce API status codes.
                         * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
                         */
                        readonly type?: string;
                    };
                };
            };
        };
    };
}
