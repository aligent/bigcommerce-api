/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/tax/customers": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type": components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Tax Customers
         * @description Retrieves a list of customer tax data.
         */
        readonly get: operations["getTaxCustomers"];
        /**
         * Update Tax Customers
         * @description Update the tax data associated with one or more customers.
         *     This operation will be additive to any values already associated with the customer, overwriting any existing values.
         */
        readonly put: operations["updateTaxCustomers"];
        /**
         * Delete Tax Customers
         * @description Delete tax data that is associated with one or more customers.
         */
        readonly delete: operations["deleteTaxCustomers"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Represents a customer and their associated tax-related attributes. */
        readonly TaxCustomer: {
            /**
             * @description A reference to the customer.
             * @example 157
             */
            readonly customer_id: number;
            /**
             * @description A simple key-value pairing.
             *     The tax property must be defined to associate a value.
             *     These values will be sent to the active tax provider during Tax Provider API operations whenever the associated customer is included in the operation.
             * @example {
             *       "A-123456789": "26",
             *       "B-6731789": "200"
             *     }
             */
            readonly tax_properties: {
                readonly [key: string]: unknown;
            };
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly MetaOpen: {
            readonly [key: string]: unknown;
        };
    };
    responses: never;
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
        /** @description ID of customer. To target multiple customers, provide a comma-separated list of IDs such as `12,34,56`. */
        readonly customer_idin: readonly number[];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getTaxCustomers: {
        readonly parameters: {
            readonly query?: {
                /** @description ID of customer. To target multiple customers, provide a comma-separated list of IDs such as `12,34,56`. */
                readonly "customer_id:in"?: components["parameters"]["customer_idin"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["TaxCustomer"][];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
            /** @description Request parameters invalid */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly updateTaxCustomers: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["TaxCustomer"][];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["TaxCustomer"][];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
            /** @description The request body does not meet specifications. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly deleteTaxCustomers: {
        readonly parameters: {
            readonly query?: {
                /** @description ID of customer. To target multiple customers, provide a comma-separated list of IDs such as `12,34,56`. */
                readonly "customer_id:in"?: components["parameters"]["customer_idin"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description No Content */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request parameters invalid */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
