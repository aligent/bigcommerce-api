/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/coupons": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Coupons
         * @description Returns a list of *Coupons*. Default sorting is by coupon/discount id, from lowest to highest. You can pass in optional filter parameters. We recommended using `?min_id=x&limit=y` to paginate through a large set of data because it offers better performance.
         *
         *     ## Usage Notes
         *
         *     Available types for `type` and `exclude_type` filters:
         *
         *     |Type|
         *     |-|
         *     |`per_item_discount`|
         *     |`percentage_discount`|
         *     |`per_total_discount`|
         *     |`shipping_discount`|
         *     |`free_shipping`|
         *     |`promotion`|
         *
         *     Coupons with `type=promotion` will not populate usable data for the following fields but instead be set to the following default values:
         *
         *     ```json
         *     ...
         *     amount : 0.0000
         *     min_purchase: 0.0000
         *     applies_to
         *     restricted_to: []
         *     shipping_methods : null
         *     ...
         *     ```
         */
        readonly get: operations["getCoupons"];
        /**
         * Create a New Coupon
         * @description Creates a *Coupon*.
         *
         *     **Required Fields**
         *     *   `name`
         *     *   `code`
         *     *   `type`
         *     *   `amount`
         *     *   `applies_to`
         *
         *     **Read Only Fields**
         *     *   `id`
         *     *   `num_uses`
         *
         *     **Notes**
         *
         *     The coupon type can be one of the following:
         *
         *     *   `per_item_discount`
         *     *   `per_total_discount`
         *     *   `shipping_discount`
         *     *   `free_shipping`
         *     *   `percentage_discount`
         *
         *     Legacy coupon codes only work with the store's default currency. Applying a coupon with any other currency other than the store's default will result in the error: "Coupons only apply to default currency."
         */
        readonly post: operations["createCoupon"];
        /**
         * Delete All Coupons
         * @description ## Usage Notes
         *     * Deleting a coupon via this endpoint will delete the coupon but not the promotion it is attached to
         *
         */
        readonly delete: operations["deleteCoupons"];
    };
    readonly "/coupons/count": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get a Count of Coupons
         * @description Returns a count of all *Coupons* in the store.
         */
        readonly get: operations["getCouponsCount"];
    };
    readonly "/coupons/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the coupon. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        /**
         * Update a Coupon
         * @description Updates a *Coupon*.
         *
         *
         *     **Read Only Fields**
         *
         *     * `id`
         *     * `num_uses`
         *     * `date_created`
         *
         *     **Notes**
         *
         *     If the `applies_to` value is cleared, you can restore it to the coupon by reapplying the `applies_to` value in a new `PUT` request.
         */
        readonly put: operations["updateCoupon"];
        /**
         * Delete a Coupon
         * @description Deletes a *Coupon*.
         */
        readonly delete: operations["deleteCoupon"];
    };
    readonly "/banners": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Banners
         * @description Returns a list of *Banners*. Default sorting is by banner id, from lowest to highest.
         */
        readonly get: operations["getBanners"];
        /**
         * Create a Banner
         * @description Creates a *Banner*.
         *
         *     **Required Fields**
         *     * name
         *     * content
         *     * page
         *     * location
         *     * date_type
         *
         *     **Read Only Fields**
         *     * date_created
         *     * id
         */
        readonly post: operations["createBanner"];
        /**
         * Delete All Banners
         * @description By default, it deletes all *Banners*.
         */
        readonly delete: operations["deleteBanners"];
    };
    readonly "/banners/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the banner. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        /**
         * Get a Banner
         * @description Returns a single *Banner*
         */
        readonly get: operations["getBanner"];
        /**
         * Update a Banner
         * @description Updates a *Banner*.
         *
         *     **Read Only Fields**
         *     * date_created
         *     * id
         */
        readonly put: operations["updateBanner"];
        /**
         * Delete a Banner
         * @description Deletes a *Banner*.
         */
        readonly delete: operations["deleteBanner"];
    };
    readonly "/banners/count": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get a Count of Store Banners
         * @description Returns a count of *Banners*.
         */
        readonly get: operations["getBannersCount"];
    };
    readonly "/gift_certificates/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the gift certificate. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        /**
         * Get a Gift Certificate
         * @description Returns a single *Gift Certificate*.
         */
        readonly get: operations["getGiftCertificate"];
        /**
         * Update a Gift Certificate
         * @description Updates a *Gift Certificate*.
         *
         *     **Read Only Fields**
         *     * id
         *     * order_id
         */
        readonly put: operations["updateGiftCertificate"];
        /**
         * Delete a Gift Certificate
         * @description Deletes a *Gift Certificate*.
         */
        readonly delete: operations["deleteGiftCertificate"];
    };
    readonly "/gift_certificates": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Gift Certificates
         * @description Returns a list of *Gift Certificates*. Optional filter parameters can be passed in.
         *
         *     Default sorting is by gift-certificate id, from lowest to highest.
         *
         *     The maximum limit is 250. If a limit isn’t provided, up to 50 gift_certificates are returned by default.
         */
        readonly get: operations["getGiftCertificates"];
        /**
         * Create a Gift Certificate
         * @description Creates a *Gift Certificate*.
         *
         *
         *     **Required Fields**
         *     * to_name
         *     * to_email
         *     * from_name
         *     * from_email
         *     * amount
         *
         *     **Read Only Fields**
         *     * id
         *     * order_id
         *
         *     **Notes**
         *
         *     When a gift certificate is created through the API, no email notification is triggered to the specified recipient.
         */
        readonly post: operations["createGiftCertificate"];
        /**
         * Delete All Gift Certificates
         * @description By default, it deletes all *Gift Certificates*.
         */
        readonly delete: operations["deleteGiftCertificates"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Coupon Resource */
        readonly CouponsResource: {
            /**
             * @description URL of the coupons for api requests
             * @example https://api.bigcommerce.com/stores/{store_hash}/v2/orders/129/coupons
             */
            readonly url?: string;
            /**
             * @description resource of the coupons
             * @example /orders/129/coupons
             */
            readonly resource?: string;
        };
        /** coupon_Full */
        readonly coupon_Full: {
            /**
             * @description The coupon's ID. This is a read-only field; do not set or modify its value in a POST or PUT request.
             * @example 2
             */
            readonly id: number;
            /**
             * @description Date Created
             * @example Tue, 13 Mar 2018 16:18:59 +0000
             */
            readonly date_created?: string;
            /**
             * @description Number of times this coupon has been used. This is a read-only field; do not set or modify its value in a POST or PUT request.
             * @example 0
             */
            readonly num_uses?: number;
        } & components["schemas"]["coupon_Base"];
        /**
         * coupon_Base
         * @example {
         *       "id": 2,
         *       "name": "Australia Customers Discount",
         *       "type": "per_item_discount",
         *       "amount": "5",
         *       "min_purchase": "25",
         *       "expires": "",
         *       "enabled": true,
         *       "code": "S2549JM0Y",
         *       "applies_to": {
         *         "entity": "categories",
         *         "ids": [
         *           0,
         *           3
         *         ]
         *       },
         *       "num_uses": 0,
         *       "max_uses": 25,
         *       "max_uses_per_customer": 0,
         *       "restricted_to": {
         *         "countries": "AU"
         *       },
         *       "shipping_methods": [
         *         "shipping_endicia"
         *       ],
         *       "date_created": "Tue, 13 Mar 2018 16:18:59 +0000"
         *     }
         */
        readonly coupon_Base: {
            /**
             * @description The name of the coupon. The value must be unique.
             * @example Australia Customers Discount
             */
            readonly name: string;
            /** @enum {string} */
            readonly type: "per_item_discount" | "per_total_discount" | "shipping_discount" | "free_shipping" | "percentage_discount" | "promotion";
            /**
             * @description The discount to apply to an order, as either an amount or a percentage. This field’s usage is determined by the coupon `type`. For example, a `type` of + `percentage_discount` would determine a percentage here.
             * @example 5
             */
            readonly amount: string;
            /**
             * @description Specifies a minimum value that an order must have before the coupon can be applied to it.
             * @example 25
             */
            readonly min_purchase?: string;
            /** @description Specifies when a coupon expires. Coupons need not have an expiry date – you can also control expiry via + `max_uses` or `max_uses_per_customer`. If you do use this date field, the value must be in <a href="http://tools.ietf.org/html/rfc2822#section-3.3" target="_blank">RFC 2822</a> format. */
            readonly expires?: string;
            /**
             * @description If the coupon is enabled, this field’s value is `true`; otherwise, `false`.
             * @example true
             */
            readonly enabled?: boolean;
            /**
             * @description The coupon code that customers will use to receive their discounts. Value must be unique. Only letters, numbers, white space, underscores, and hyphens are allowed.
             * @example S2549JM0Y
             */
            readonly code: string;
            /** @description If it is not included in the PUT request, its existing value on the coupon will be cleared. Also required to be set on the POST request */
            readonly applies_to: {
                /** @description ID of either the products or categories */
                readonly ids?: readonly number[];
                /** @description What the discount applies to. Can be products or categories. */
                readonly entity?: string;
            };
            /**
             * @description Maximum number of times this coupon can be used.
             * @example 25
             */
            readonly max_uses?: number;
            /**
             * @description Maximum number of times each customer can use this coupon.
             * @example 0
             */
            readonly max_uses_per_customer?: number;
            readonly restricted_to?: {
                readonly countries?: string;
            };
            /** @description This is a list of shipping-method names. A shipping method must be enabled on the store to use it with a coupon. To check which shipping methods are enabled, please use the [List Shipping Methods](/archive/store-operations/v2-catalog-products/v2-products#list-shipping-methods) endpoint. */
            readonly shipping_methods?: readonly string[];
        };
        /** banner_Base */
        readonly banner_Base: {
            /**
             * @description Name of the banner.
             * @example Sale Banner
             */
            readonly name: string;
            /**
             * @description Contains the banner content. Returned as a string and includes HTML formatting.
             * @example <p> Sale! Tuesday at 9am! </p>
             */
            readonly content: string;
            /**
             * @description Page the Banner is located on.
             * @enum {string}
             */
            readonly page: "home_page" | "category_page" | "brand_page" | "search_page";
            /**
             * @description Location on the page.
             * @example top
             * @enum {string}
             */
            readonly location: "top" | "bottom";
            /**
             * @description This specifies whether the banner should be visible during a specific date range.
             * @enum {string}
             */
            readonly date_type: "always" | "custom";
            /**
             * @description If the datetype is set as 'custom’, this field specifies the date when the banner should become visible on the storefront.
             * @example 0
             */
            readonly date_from?: string;
            /**
             * @description If the datetype is set as 'custom’, this field specifies the date when the banner should stop being visible on the storefront.
             * @example 0
             */
            readonly date_to?: string;
            /**
             * @description Integer value denoting whether or not the banner is visible on the storefront: 1 = visible; 0 = not visible
             * @example 1
             */
            readonly visible?: string;
            /**
             * @description If the banner is on a specific category or brand page, then the item_id will correspond the category or brand ID.
             * @example 35
             */
            readonly item_id?: string;
        };
        /** banner_Full */
        readonly banner_Full: {
            /**
             * @description Id of the banner.
             *     This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
             *
             * @example 1
             */
            readonly id?: number;
            /** @description Date the banner is created. */
            readonly date_created?: string;
        } & components["schemas"]["banner_Base"];
        /** banner_Put */
        readonly banner_Put: components["schemas"]["banner_Base"];
        /** giftCertificate_Base */
        readonly giftCertificate_Base: {
            /**
             * @description Name of the recipient.
             * @example John Doe
             */
            readonly to_name: string;
            /**
             * @description Email of the recipient.
             * @example johndoe@example.com
             */
            readonly to_email: string;
            /**
             * @description Name of the customer who purchased the gift certificate.
             * @example Jane Doe
             */
            readonly from_name: string;
            /**
             * @description Email of the customer who purchased the gift certificate.
             * @example janedoe@example.com
             */
            readonly from_email: string;
            /**
             * @description Value of the gift certificate.
             * @example 10
             */
            readonly amount: string;
        };
        /** giftCertificate_Full */
        readonly giftCertificate_Full: components["schemas"]["giftCertificate_Base"] & {
            /**
             * @description The ID of the gift certificate. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
             * @example 1
             */
            readonly id?: number;
            /**
             * @description The ID of the customer placing the order.
             * @example 5
             */
            readonly customer_id?: number;
            /**
             * @description The ID of the order.
             * @example 116
             */
            readonly order_id?: number;
            /**
             * @description Remaining value of the gift certificate. If not set, will default to the amount.
             * @example 0
             */
            readonly balance?: string;
            /**
             * @description Date the gift certificate was purchased. If not assigned, this will be set to today’s date. Date displays in the Unix timestamp format.
             * @example 1603306
             */
            readonly purchase_date?: string;
            /**
             * @description Date on which the gift certificate is set to expire. Date displays in the Unix timestamp format.
             * @example 1694738
             */
            readonly expiry_date?: string;
            /**
             * @description The email theme to use in the message sent to the recipient.
             * @example celebration.html
             * @enum {string}
             */
            readonly template?: "birthday.html" | "girl.html" | "boy.html" | "celebration.html" | "christmas.html" | "general.html";
            /**
             * @description Text that will be sent to the recipient, such as “Congratulations.”
             * @example Congratulations!
             */
            readonly message?: string;
            /**
             * @description A unique string that a customer can input to redeem a gift certificate. Values greater than 20 characters will be trimmed down to the first 20 characters and returned in the response.
             *     If this field is not set, a value will be autogenerated.
             * @example FFZ-5N4-C7M-S78
             */
            readonly code?: string;
            /**
             * @example active
             * @enum {string}
             */
            readonly status?: "active" | "pending" | "disabled" | "expired";
            /**
             * @description A currency code, following the ISO 4217 standard. The currency has to exist in the store first.
             *
             *     Gift Certificates can only be used if the transactional currency of the cart is the same as the one defined in the gift certificate. If this value is not provided, the gift certificate is created using the store's default transactional currency.
             * @example USD
             */
            readonly currency_code?: string;
        };
        /** giftCertificate_Put */
        readonly giftCertificate_Put: components["schemas"]["giftCertificate_Base"] & {
            /**
             * @description The remaining value of the gift certificate. If not set, will default to the amount.
             * @example 0
             */
            readonly balance?: string;
            /**
             * @description Date the gift certificate was purchased. If not assigned, this will be set to today’s date. Enter date in RFC-2822 format.
             * @example Mon, 19 Jan 1970 07:21:46 CST
             */
            readonly purchase_date?: string;
            /**
             * @description Date on which the gift certificate is set to expire.
             * @example Mon, 02 Jan 2023 08:45:38 CST
             */
            readonly expiry_date?: string;
            /**
             * @description The ID of the customer placing the order.
             * @example 5
             */
            readonly customer_id?: number;
            /**
             * @description The email theme to use in the message sent to the recipient.
             * @example celebration.html
             * @enum {string}
             */
            readonly template?: "birthday.html" | "boy.html" | "girl.html" | "celebration.html" | "christmas.html" | "general.html";
            /**
             * @description Text that will be sent to the recipient, such as “Congratulations.”
             * @example Congratulations!
             */
            readonly message?: string;
            /**
             * @description A unique string that a customer can input to redeem a gift certificate. Values greater than 20 characters will be trimmed down to the first 20 characters and returned in the response.
             *     If this field is not set, a value will be autogenerated.
             * @example FFZ-5N4-C7M-S78
             */
            readonly code?: string;
            /**
             * @example active
             * @enum {string}
             */
            readonly status?: "active" | "pending" | "expired" | "disabled";
            /**
             * @description A currency code, following the ISO 4217 standard. The currency has to exist in the store first.
             *
             *     Gift Certificates can only be used if the transactional currency of the cart is the same as the one defined in the gift certificate. If this value is not provided, the gift certificate is created using the store's default transactional currency.
             * @example USD
             */
            readonly currency_code?: string;
        };
        /** giftCertificate_Post */
        readonly giftCertificate_Post: components["schemas"]["giftCertificate_Base"] & {
            /**
             * @description Remaining value of the gift certificate. If not set, will default to the amount.
             * @example 0
             */
            readonly balance?: string;
            /**
             * @description Date the gift certificate was purchased. If not assigned, this will be set to today’s date. Enter date in RFC-2822 format.
             * @example Mon, 19 Jan 1970 07:21:46 CST
             */
            readonly purchase_date?: string;
            /**
             * @description Date on which the gift certificate is set to expire. The date must be in [RFC 2822](https://www.rfc-editor.org/rfc/rfc2822#section-3.3) format.
             * @example Tue, 20 Jan 1970 08:45:38 CST
             */
            readonly expiry_date?: string;
            /**
             * @description The ID of the customer placing the order.
             * @example 5
             */
            readonly customer_id?: number;
            /**
             * @description The email theme to use in the message sent to the recipient.
             * @example celebration.html
             * @enum {string}
             */
            readonly template?: "birthday.html" | "boy.html" | "girl.html" | "celebration.html" | "christmas.html" | "general.html";
            /**
             * @description Text that will be sent to the recipient, such as “Congratulations.”
             * @example Congratulations!
             */
            readonly message?: string;
            /**
             * @description A unique string that a customer can input to redeem a gift certificate. Values greater than 20 characters will be trimmed down to the first 20 characters and returned in the response.
             *     If this field is not set, a value will be autogenerated.
             * @example FFZ-5N4-C7M-S78
             */
            readonly code?: string;
            /**
             * @example active
             * @enum {string}
             */
            readonly status?: "active" | "pending" | "expired" | "disabled";
            /**
             * @description A currency code, following the ISO 4217 standard. The currency has to exist in the store first.
             *
             *     Gift Certificates can only be used if the transactional currency of the cart is the same as the one defined in the gift certificate. If this value is not provided, the gift certificate is created using the store's default transactional currency.
             * @example USD
             */
            readonly currency_code?: string;
        };
    };
    responses: {
        readonly bannerCollection_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                /** @example [
                 *       {
                 *         "id": 1,
                 *         "name": "This is a banner",
                 *         "content": "<p>This is a banner</p>",
                 *         "page": "home_page",
                 *         "item_id": "0",
                 *         "location": "top",
                 *         "date_created": "1522169082",
                 *         "date_type": "always",
                 *         "date_from": "0",
                 *         "date_to": "0",
                 *         "visible": "1"
                 *       },
                 *       {
                 *         "id": 2,
                 *         "name": "Banner #2",
                 *         "content": "<p>Banner # 2</p>",
                 *         "page": "category_page",
                 *         "item_id": "23",
                 *         "location": "top",
                 *         "date_created": "1522169169",
                 *         "date_type": "always",
                 *         "date_from": "0",
                 *         "date_to": "0",
                 *         "visible": "1"
                 *       }
                 *     ] */
                readonly "application/json": readonly components["schemas"]["banner_Full"][];
            };
        };
        readonly banner_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "id": 1,
                 *       "name": "Sale Banner",
                 *       "content": "<p> Sale! Tuesday at 9am! </p>",
                 *       "page": "home_page",
                 *       "item_id": "0",
                 *       "location": "top",
                 *       "date_created": "1522169082",
                 *       "date_type": "always",
                 *       "date_from": "0",
                 *       "date_to": "0",
                 *       "visible": "1"
                 *     } */
                readonly "application/json": components["schemas"]["banner_Full"];
            };
        };
        readonly count_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "count": 27
                 *     } */
                readonly "application/json": {
                    readonly count?: number;
                };
            };
        };
        readonly coupon_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "id": 1,
                 *       "name": "$5 off",
                 *       "type": "per_total_discount",
                 *       "amount": "5.0000",
                 *       "min_purchase": "0.0000",
                 *       "expires": "",
                 *       "enabled": true,
                 *       "code": "S2549JM0Y",
                 *       "applies_to": {
                 *         "entity": "categories",
                 *         "ids": [
                 *           0
                 *         ]
                 *       },
                 *       "num_uses": 2,
                 *       "max_uses": 0,
                 *       "max_uses_per_customer": 0,
                 *       "restricted_to": {},
                 *       "shipping_methods": [],
                 *       "date_created": "Tue, 13 Mar 2018 16:18:59 +0000"
                 *     } */
                readonly "application/json": components["schemas"]["coupon_Full"];
            };
        };
        readonly coupon_Resp_Collection: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                /** @example [
                 *       {
                 *         "id": 1,
                 *         "name": "$5 off",
                 *         "type": "per_total_discount",
                 *         "amount": "5.0000",
                 *         "min_purchase": "0.0000",
                 *         "expires": "",
                 *         "enabled": true,
                 *         "code": "S2549JM0Y",
                 *         "applies_to": {
                 *           "entity": "categories",
                 *           "ids": [
                 *             0
                 *           ]
                 *         },
                 *         "num_uses": 2,
                 *         "max_uses": 0,
                 *         "max_uses_per_customer": 0,
                 *         "restricted_to": {},
                 *         "shipping_methods": [],
                 *         "date_created": "Tue, 13 Mar 2018 16:18:59 +0000"
                 *       },
                 *       {
                 *         "id": 2,
                 *         "name": "Limit by Location",
                 *         "type": "per_total_discount",
                 *         "amount": "5.0000",
                 *         "min_purchase": "25.0000",
                 *         "expires": "",
                 *         "enabled": true,
                 *         "code": "E3JC79S0I",
                 *         "applies_to": {
                 *           "entity": "categories",
                 *           "ids": [
                 *             0
                 *           ]
                 *         },
                 *         "num_uses": 0,
                 *         "max_uses": 25,
                 *         "max_uses_per_customer": 0,
                 *         "restricted_to": {
                 *           "countries": "AU"
                 *         },
                 *         "shipping_methods": [
                 *           "shipping_endicia"
                 *         ],
                 *         "date_created": "Tue, 12 Jun 2018 20:22:19 +0000"
                 *       }
                 *     ] */
                readonly "application/json": readonly components["schemas"]["coupon_Full"][];
            };
        };
        readonly giftCertificateCollection_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                /** @example [
                 *       {
                 *         "id": 24,
                 *         "code": "10R-5E2-BO4-RWT",
                 *         "amount": "1000.0000",
                 *         "status": "active",
                 *         "balance": "500.0000",
                 *         "to_name": "Alyss",
                 *         "order_id": 1281,
                 *         "template": "girl.html",
                 *         "to_email": "test@test.com",
                 *         "from_name": "Noland",
                 *         "from_email": "test1@test.com",
                 *         "customer_id": 5,
                 *         "expiry_date": "1694738",
                 *         "purchase_date": "1603306",
                 *         "currency_code": "USD"
                 *       },
                 *       {
                 *         "id": 25,
                 *         "code": "10R-6E3-AO4-RST",
                 *         "amount": "700.0000",
                 *         "status": "active",
                 *         "balance": "700.0000",
                 *         "to_name": "Alyss",
                 *         "order_id": 0,
                 *         "template": "boy.html",
                 *         "to_email": "test@test.com",
                 *         "from_name": "Noland",
                 *         "from_email": "test1@test.com",
                 *         "customer_id": 0,
                 *         "expiry_date": "1694738",
                 *         "purchase_date": "1603306",
                 *         "currency_code": "USD"
                 *       },
                 *       {
                 *         "id": 27,
                 *         "code": "15R-6E3-AO4-RST",
                 *         "amount": "50.0000",
                 *         "status": "active",
                 *         "balance": "50.0000",
                 *         "to_name": "Lyss",
                 *         "order_id": 0,
                 *         "template": "christmas.html",
                 *         "to_email": "test5@test.com",
                 *         "from_name": "Somethingelse",
                 *         "from_email": "test15@test.com",
                 *         "customer_id": 0,
                 *         "expiry_date": "1694738",
                 *         "purchase_date": "1603306",
                 *         "currency_code": "USD"
                 *       }
                 *     ] */
                readonly "application/json": readonly components["schemas"]["giftCertificate_Full"][];
            };
        };
        readonly giftCertificate_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "id": 1,
                 *       "customer_id": 5,
                 *       "order_id": 116,
                 *       "code": "FFZ-5N4-C7M-S78",
                 *       "to_name": "John Doe",
                 *       "to_email": "johndoe@example.com",
                 *       "from_name": "Jane Doe",
                 *       "from_email": "janedoe@example.com",
                 *       "amount": "10",
                 *       "balance": "0",
                 *       "status": "active",
                 *       "template": "birthday.html",
                 *       "message": "Happy Birthday!",
                 *       "purchase_date": "1603306",
                 *       "expiry_date": "1694738",
                 *       "currency_code": "USD"
                 *     } */
                readonly "application/json": components["schemas"]["giftCertificate_Full"];
            };
        };
    };
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getCoupons: {
        readonly parameters: {
            readonly query?: {
                /** @description Optional filter param. `/api/v2/coupons?id={value}` */
                readonly id?: string;
                /** @description Optional filter param `/api/v2/coupons?code={value}` */
                readonly code?: string;
                /** @description Optional filter param `/api/v2/coupons?name={value}` */
                readonly name?: string;
                /** @description The type of discount. */
                readonly type?: "per_item_discount" | "percentage_discount" | "per_total_discount" | "shipping_discount" | "free_shipping" | "promotion";
                /** @description Optional filter param `/api/v2/coupons?min_id={value}` */
                readonly min_id?: number;
                /** @description Optional filter param`/api/v2/coupons?max_id={value}` */
                readonly max_id?: number;
                /** @description Number of pages `/api/v2/coupons?page={number}` */
                readonly page?: number;
                /** @description Count per page `/api/v2/coupons?limit={count}` */
                readonly limit?: number;
                /** @description Exclude a type of coupon. */
                readonly exclude_type?: "per_item_discount" | "percentage_discount" | "per_total_discount" | "shipping_discount" | "free_shipping" | "promotion";
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "id": 1,
                     *         "name": "$5 off",
                     *         "type": "per_total_discount",
                     *         "amount": "5.0000",
                     *         "min_purchase": "0.0000",
                     *         "expires": "",
                     *         "enabled": true,
                     *         "code": "S2549JM0Y",
                     *         "applies_to": {
                     *           "entity": "categories",
                     *           "ids": [
                     *             0
                     *           ]
                     *         },
                     *         "num_uses": 2,
                     *         "max_uses": 0,
                     *         "max_uses_per_customer": 0,
                     *         "restricted_to": {},
                     *         "shipping_methods": [],
                     *         "date_created": "Tue, 13 Mar 2018 16:18:59 +0000"
                     *       },
                     *       {
                     *         "id": 2,
                     *         "name": "Limit by Location",
                     *         "type": "per_total_discount",
                     *         "amount": "5.0000",
                     *         "min_purchase": "25.0000",
                     *         "expires": "",
                     *         "enabled": true,
                     *         "code": "E3JC79S0I",
                     *         "applies_to": {
                     *           "entity": "categories",
                     *           "ids": [
                     *             0
                     *           ]
                     *         },
                     *         "num_uses": 0,
                     *         "max_uses": 25,
                     *         "max_uses_per_customer": 0,
                     *         "restricted_to": {
                     *           "countries": "AU"
                     *         },
                     *         "shipping_methods": [
                     *           "shipping_endicia"
                     *         ],
                     *         "date_created": "Tue, 12 Jun 2018 20:22:19 +0000"
                     *       }
                     *     ] */
                    readonly "application/json": readonly components["schemas"]["coupon_Full"][];
                };
            };
        };
    };
    readonly createCoupon: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["coupon_Base"];
            };
        };
        readonly responses: {
            readonly 201: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": 1,
                     *       "name": "$5 off",
                     *       "type": "per_total_discount",
                     *       "amount": "5.0000",
                     *       "min_purchase": "0.0000",
                     *       "expires": "",
                     *       "enabled": true,
                     *       "code": "S2549JM0Y",
                     *       "applies_to": {
                     *         "entity": "categories",
                     *         "ids": [
                     *           0
                     *         ]
                     *       },
                     *       "num_uses": 2,
                     *       "max_uses": 0,
                     *       "max_uses_per_customer": 0,
                     *       "restricted_to": {},
                     *       "shipping_methods": [],
                     *       "date_created": "Tue, 13 Mar 2018 16:18:59 +0000"
                     *     } */
                    readonly "application/json": components["schemas"]["coupon_Full"];
                };
            };
        };
    };
    readonly deleteCoupons: {
        readonly parameters: {
            readonly query?: {
                /** @description Optional param to identify a comma-separated list of IDs for coupons to delete in a batch. `/api/v2/coupons?id:in=1,2,3` */
                readonly "id:in"?: readonly number[];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getCouponsCount: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "count": 27
                     *     } */
                    readonly "application/json": {
                        readonly count?: number;
                    };
                };
            };
        };
    };
    readonly updateCoupon: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description ID of the coupon. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["coupon_Base"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": 1,
                     *       "name": "$5 off",
                     *       "type": "per_total_discount",
                     *       "amount": "5.0000",
                     *       "min_purchase": "0.0000",
                     *       "expires": "",
                     *       "enabled": true,
                     *       "code": "S2549JM0Y",
                     *       "applies_to": {
                     *         "entity": "categories",
                     *         "ids": [
                     *           0
                     *         ]
                     *       },
                     *       "num_uses": 2,
                     *       "max_uses": 0,
                     *       "max_uses_per_customer": 0,
                     *       "restricted_to": {},
                     *       "shipping_methods": [],
                     *       "date_created": "Tue, 13 Mar 2018 16:18:59 +0000"
                     *     } */
                    readonly "application/json": components["schemas"]["coupon_Full"];
                };
            };
        };
    };
    readonly deleteCoupon: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the coupon. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getBanners: {
        readonly parameters: {
            readonly query?: {
                /** @description Optional filter param `/api/v2/banners?min_id={value}` */
                readonly min_id?: number;
                /** @description Optional filter param `/api/v2/banners?max_id={value}` */
                readonly max_id?: number;
                /** @description Optional filter param `/api/v2/banners?page={number}` */
                readonly page?: number;
                /** @description Optional filter param `/api/v2/banners?limit={count}` */
                readonly limit?: number;
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "id": 1,
                     *         "name": "This is a banner",
                     *         "content": "<p>This is a banner</p>",
                     *         "page": "home_page",
                     *         "item_id": "0",
                     *         "location": "top",
                     *         "date_created": "1522169082",
                     *         "date_type": "always",
                     *         "date_from": "0",
                     *         "date_to": "0",
                     *         "visible": "1"
                     *       },
                     *       {
                     *         "id": 2,
                     *         "name": "Banner #2",
                     *         "content": "<p>Banner # 2</p>",
                     *         "page": "category_page",
                     *         "item_id": "23",
                     *         "location": "top",
                     *         "date_created": "1522169169",
                     *         "date_type": "always",
                     *         "date_from": "0",
                     *         "date_to": "0",
                     *         "visible": "1"
                     *       }
                     *     ] */
                    readonly "application/json": readonly components["schemas"]["banner_Full"][];
                };
            };
        };
    };
    readonly createBanner: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["banner_Base"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": 1,
                     *       "name": "Sale Banner",
                     *       "content": "<p> Sale! Tuesday at 9am! </p>",
                     *       "page": "home_page",
                     *       "item_id": "0",
                     *       "location": "top",
                     *       "date_created": "1522169082",
                     *       "date_type": "always",
                     *       "date_from": "0",
                     *       "date_to": "0",
                     *       "visible": "1"
                     *     } */
                    readonly "application/json": components["schemas"]["banner_Full"];
                };
            };
        };
    };
    readonly deleteBanners: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getBanner: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the banner. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": 1,
                     *       "name": "Sale Banner",
                     *       "content": "<p> Sale! Tuesday at 9am! </p>",
                     *       "page": "home_page",
                     *       "item_id": "0",
                     *       "location": "top",
                     *       "date_created": "1522169082",
                     *       "date_type": "always",
                     *       "date_from": "0",
                     *       "date_to": "0",
                     *       "visible": "1"
                     *     } */
                    readonly "application/json": components["schemas"]["banner_Full"];
                };
            };
        };
    };
    readonly updateBanner: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description ID of the banner. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["banner_Put"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": 1,
                     *       "name": "Sale Banner",
                     *       "content": "<p> Sale! Tuesday at 9am! </p>",
                     *       "page": "home_page",
                     *       "item_id": "0",
                     *       "location": "top",
                     *       "date_created": "Tue, 13 Mar 2018 16:18:59 +0000",
                     *       "date_type": "always",
                     *       "date_from": "0",
                     *       "date_to": "0",
                     *       "visible": "1"
                     *     } */
                    readonly "application/json": components["schemas"]["banner_Full"];
                };
            };
        };
    };
    readonly deleteBanner: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the banner. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getBannersCount: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "count": 27
                     *     } */
                    readonly "application/json": {
                        readonly count?: number;
                    };
                };
            };
        };
    };
    readonly getGiftCertificate: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the gift certificate. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": 1,
                     *       "customer_id": 5,
                     *       "order_id": 116,
                     *       "code": "FFZ-5N4-C7M-S78",
                     *       "to_name": "John Doe",
                     *       "to_email": "johndoe@example.com",
                     *       "from_name": "Jane Doe",
                     *       "from_email": "janedoe@example.com",
                     *       "amount": "10",
                     *       "balance": "0",
                     *       "status": "active",
                     *       "template": "birthday.html",
                     *       "message": "Happy Birthday!",
                     *       "purchase_date": "1603306",
                     *       "expiry_date": "1694738",
                     *       "currency_code": "USD"
                     *     } */
                    readonly "application/json": components["schemas"]["giftCertificate_Full"];
                };
            };
        };
    };
    readonly updateGiftCertificate: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description ID of the gift certificate. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["giftCertificate_Put"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": 1,
                     *       "customer_id": 5,
                     *       "order_id": 116,
                     *       "code": "FFZ-5N4-C7M-S78",
                     *       "to_name": "John Doe",
                     *       "to_email": "johndoe@example.com",
                     *       "from_name": "Jane Doe",
                     *       "from_email": "janedoe@example.com",
                     *       "amount": "10",
                     *       "balance": "0",
                     *       "status": "active",
                     *       "template": "birthday.html",
                     *       "message": "Happy Birthday!",
                     *       "purchase_date": "1603306",
                     *       "expiry_date": "1672670738",
                     *       "currency_code": "USD"
                     *     } */
                    readonly "application/json": components["schemas"]["giftCertificate_Full"];
                };
            };
        };
    };
    readonly deleteGiftCertificate: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the gift certificate. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getGiftCertificates: {
        readonly parameters: {
            readonly query?: {
                readonly min_id?: number;
                readonly max_id?: number;
                readonly code?: string;
                readonly order_id?: number;
                readonly to_name?: string;
                readonly to_email?: string;
                readonly from_name?: string;
                readonly from_email?: string;
                readonly page?: number;
                readonly limit?: number;
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example [
                     *       {
                     *         "id": 24,
                     *         "code": "10R-5E2-BO4-RWT",
                     *         "amount": "1000.0000",
                     *         "status": "active",
                     *         "balance": "500.0000",
                     *         "to_name": "Alyss",
                     *         "order_id": 1281,
                     *         "template": "celebration.html",
                     *         "message": "Celebrate",
                     *         "to_email": "test@test.com",
                     *         "from_name": "Noland",
                     *         "from_email": "test1@test.com",
                     *         "customer_id": 0,
                     *         "expiry_date": "1603306",
                     *         "purchase_date": "1672670738",
                     *         "currency_code": "USD"
                     *       },
                     *       {
                     *         "id": 25,
                     *         "code": "10R-6E3-AO4-RST",
                     *         "amount": "700.0000",
                     *         "status": "active",
                     *         "balance": "700.0000",
                     *         "to_name": "Alyss",
                     *         "order_id": 0,
                     *         "template": "general.html",
                     *         "message": "Test",
                     *         "to_email": "test@test.com",
                     *         "from_name": "Noland",
                     *         "from_email": "test1@test.com",
                     *         "customer_id": 0,
                     *         "expiry_date": "1603306",
                     *         "purchase_date": "1672670738",
                     *         "currency_code": "USD"
                     *       },
                     *       {
                     *         "id": 27,
                     *         "code": "15R-6E3-AO4-RST",
                     *         "amount": "50.0000",
                     *         "status": "active",
                     *         "balance": "50.0000",
                     *         "to_name": "Lyss",
                     *         "order_id": 0,
                     *         "template": "celebration.html",
                     *         "message": "Celebrate",
                     *         "to_email": "test5@test.com",
                     *         "from_name": "Somethingelse",
                     *         "from_email": "test15@test.com",
                     *         "customer_id": 0,
                     *         "expiry_date": "1603306",
                     *         "purchase_date": "1672670738",
                     *         "currency_code": "USD"
                     *       }
                     *     ] */
                    readonly "application/json": readonly components["schemas"]["giftCertificate_Full"][];
                };
            };
        };
    };
    readonly createGiftCertificate: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["giftCertificate_Post"];
            };
        };
        readonly responses: {
            readonly 201: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": 1,
                     *       "customer_id": 5,
                     *       "order_id": 116,
                     *       "code": "FFZ-5N4-C7M-S78",
                     *       "to_name": "John Doe",
                     *       "to_email": "johndoe@example.com",
                     *       "from_name": "Jane Doe",
                     *       "from_email": "janedoe@example.com",
                     *       "amount": "10",
                     *       "balance": "0",
                     *       "status": "active",
                     *       "template": "birthday.html",
                     *       "message": "Happy Birthday!",
                     *       "purchase_date": "1603306",
                     *       "expiry_date": "1694738",
                     *       "currency_code": "USD"
                     *     } */
                    readonly "application/json": components["schemas"]["giftCertificate_Full"];
                };
            };
        };
    };
    readonly deleteGiftCertificates: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": Record<string, unknown>;
                };
            };
        };
    };
}
