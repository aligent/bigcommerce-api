/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/countries": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Countries
         * @description Get a list of all countries available. A country or territory, identifiable by an ISO 3166 country code.
         */
        readonly get: operations["getCountries"];
    };
    readonly "/countries/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly path: {
                readonly id: string;
            };
            readonly cookie?: never;
        };
        /**
         * Get a Country
         * @description Returns a single *Country*.  Gets a country. A country or territory, identifiable by an ISO 3166 country code.
         */
        readonly get: operations["getCountry"];
    };
    readonly "/countries/{country_id}/states": {
        readonly parameters: {
            readonly query?: never;
            readonly path: {
                readonly country_id: string;
            };
            readonly cookie?: never;
        };
        /**
         * Get All Countryʼs States
         * @description Returns a list of *States* belonging to a *Country*.
         *     A state or province, identifiable by an ISO 3166 subdivision code.
         */
        readonly get: operations["getCountryStates"];
    };
    readonly "/countries/{country_id}/states/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly path: {
                readonly country_id: number;
                readonly id: string;
            };
            readonly cookie?: never;
        };
        /**
         * Get a Countryʼs State
         * @description Returns a *State*.
         *     A state or province, identifiable by an ISO 3166 subdivision code.
         */
        readonly get: operations["getCountryState"];
    };
    readonly "/countries/count": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get a Count of All Countries
         * @description Returns a count of all countries.
         */
        readonly get: operations["getCountriesCount"];
    };
    readonly "/countries/states/count": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get a Count of All States
         * @description Returns a count of all states.
         */
        readonly get: operations["getStatesCount"];
    };
    readonly "/countries/states": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All States
         * @description Returns a list of all states.
         */
        readonly get: operations["getStates"];
    };
    readonly "/countries/{country_id}/states/count": {
        readonly parameters: {
            readonly query?: never;
            readonly path: {
                readonly country_id: number;
            };
            readonly cookie?: never;
        };
        /**
         * Get a Count of Country’s States
         * @description Returns a count of a countryʼs states.
         */
        readonly get: operations["getCountryStatesCount"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * country_Full
         * @example {
         *       "id": 13,
         *       "country": "Australia",
         *       "country_iso2": "AU",
         *       "country_iso3": "AUS",
         *       "states": {
         *         "url": "https://api.bigcommerce.com/stores/{store_hash}/v2/countries/13/states",
         *         "resource": "/countries/13/states"
         *       }
         *     }
         */
        readonly country_Full: {
            /**
             * @description Id of the country.
             * @example 13
             */
            readonly id?: number;
        } & components["schemas"]["country_Base"] & {
            readonly states?: components["schemas"]["countriesStates_Full"];
        };
        /**
         * countriesStates_Full
         * @description Refers to the `states` object return in `GET` countries requests.
         */
        readonly countriesStates_Full: {
            /** @example https://api.bigcommerce.com/stores/{store_hash}/v2/countries/13/states */
            readonly url?: string;
            /** @example /countries/13/states */
            readonly resource?: string;
        };
        /**
         * countriesState_Full
         * @description Refers to the state returned in `GET` states requests.
         * @example {
         *       "id": 208,
         *       "state": "Australian Capital Territory",
         *       "state_abbreviation": "ACT",
         *       "country_id": 13
         *     }
         */
        readonly countriesState_Full: {
            /**
             * @description Numeric ID of the state/province.
             * @example 208
             */
            readonly id?: number;
            /**
             * @description Name of the state/province.
             * @example Australian Capital Territory
             */
            readonly state?: string;
            /**
             * @description Abbreviation for the state/province.
             * @example ACT
             */
            readonly state_abbreviation?: string;
            /**
             * @description Numeric ID of the state’s/province’s associated country.
             * @example 13
             */
            readonly country_id?: number;
        };
        /** country_Base */
        readonly country_Base: {
            /**
             * @description Country name.
             * @example Australia
             */
            readonly country?: string;
            /**
             * @description 2-letter country code.
             * @example AU
             */
            readonly country_iso2?: string;
            /**
             * @description 3-letter country code.
             * @example AUS
             */
            readonly country_iso3?: string;
        };
        readonly count_Full: {
            readonly count?: number;
        };
    };
    responses: {
        readonly countriesResponse: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["country_Full"];
            };
        };
        readonly countriesStatesResponse: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["countriesState_Full"];
            };
        };
        readonly countryCollection_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                /** @example [
                 *       {
                 *         "id": 1,
                 *         "country": "Afghanistan",
                 *         "country_iso2": "AF",
                 *         "country_iso3": "AFG",
                 *         "states": {
                 *           "url": "https://api.bigcommerce.com/stores/store_hash/v2/countries/1/states",
                 *           "resource": "/countries/1/states"
                 *         }
                 *       },
                 *       {
                 *         "id": 2,
                 *         "country": "Albania",
                 *         "country_iso2": "AL",
                 *         "country_iso3": "ALB",
                 *         "states": {
                 *           "url": "https://api.bigcommerce.com/stores/store_hash/v2/countries/2/states",
                 *           "resource": "/countries/2/states"
                 *         }
                 *       }
                 *     ] */
                readonly "application/json": readonly components["schemas"]["country_Full"][];
            };
        };
        readonly countriesStatesCollectionResponse: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": readonly components["schemas"]["countriesState_Full"][];
            };
        };
        readonly countResponse: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["count_Full"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getCountries: {
        readonly parameters: {
            readonly query?: {
                /** @description Number of pages. */
                readonly page?: number;
                /** @description Count per page. */
                readonly limit?: number;
                readonly country?: string;
                readonly country_iso2?: string;
                readonly country_iso3?: string;
            };
            readonly header?: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["countryCollection_Resp"];
        };
    };
    readonly getCountry: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
            readonly path: {
                /** @description The ID of the country. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["countriesResponse"];
        };
    };
    readonly getCountryStates: {
        readonly parameters: {
            readonly query?: {
                /** @description Name of the state/province. */
                readonly state?: string;
                /** @description Abbreviation for the state/province. */
                readonly state_abbreviation?: string;
                /** @description Number of pages. */
                readonly page?: number;
                /** @description Count per page. */
                readonly limit?: number;
            };
            readonly header?: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
            readonly path: {
                /** @description Id of the country */
                readonly country_id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["countriesStatesCollectionResponse"];
        };
    };
    readonly getCountryState: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                readonly Accept?: string;
                readonly "Content-Type"?: string;
            };
            readonly path: {
                /** @description Id of the country */
                readonly country_id: number;
                /** @description Id of the states */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["countriesStatesResponse"];
        };
    };
    readonly getCountriesCount: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["countResponse"];
        };
    };
    readonly getStatesCount: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["countResponse"];
        };
    };
    readonly getStates: {
        readonly parameters: {
            readonly query?: {
                /** @description The number of results to return per request. */
                readonly limit?: number;
                /** @description The ordered grouping of results to return. */
                readonly page?: number;
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["countriesStatesCollectionResponse"];
        };
    };
    readonly getCountryStatesCount: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                readonly country_id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["countResponse"];
        };
    };
}
