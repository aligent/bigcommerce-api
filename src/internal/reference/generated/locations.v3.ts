/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/inventory/locations": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Locations
         * @description List locations. You can use optional filter parameters.
         *
         *     **Limits**
         *     * Limit of 50 concurrent requests.
         *     * Limit of 1000 items for payload length.
         *
         */
        readonly get: operations["getLocations"];
        /**
         * Update Locations
         * @description
         *     Update existing locations.
         *
         *     **Limits**
         *     * Limit of 50 concurrent requests.
         *     * Limit of 100 active locations.
         *
         */
        readonly put: operations["updateLocations"];
        /**
         * Create Locations
         * @description Create new locations.
         *
         *     **Limits**
         *     * Limit of 50 concurrent requests.
         *     * Limit of 100 active locations.
         *
         */
        readonly post: operations["createLocations"];
        /**
         * Delete Locations
         * @description Delete existing locations.
         *
         *     You cannot delete locations that are shipping origins or have open order transactions. The location with a `location_id` of 1 is the storeÊ¼s default shipping origin, and you cannot change the shipping origin.
         *
         *     You can delete locations assigned to pickup methods.
         *
         *     > Warning:
         *     >
         *     > Deleting locations that have inventory also deletes its stock.
         *
         */
        readonly delete: operations["deleteLocations"];
    };
    readonly "/inventory/locations/{location_id}/metafields": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Metafields
         * @description Retrieve metafields for a location.
         */
        readonly get: operations["getLocationMetafields"];
        /**
         * Create a Metafield
         * @description Create a location metafield.
         */
        readonly post: operations["createLocationMetafield"];
    };
    readonly "/inventory/locations/{location_id}/metafields/{metafield_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get a Metafield
         * @description Get a metafield by location.
         */
        readonly get: operations["getLocationMetafield"];
        /**
         * Update a Metafield
         * @description Update a metafield.
         */
        readonly put: operations["updateLocationMetafield"];
        /**
         * Delete a Metafield
         * @description Delete a metafield.
         */
        readonly delete: operations["deleteLocationMetafield"];
    };
    readonly "/inventory/locations/metafields": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Metafields
         * @description Get all location metafields.
         */
        readonly get: operations["getLocationsMetafields"];
        /**
         * Update multiple Metafields
         * @description Create multiple metafields.
         */
        readonly put: operations["updateLocationsMetafields"];
        /**
         * Create multiple Metafields
         * @description Create multiple metafields.
         */
        readonly post: operations["createLocationsMetafields"];
        /**
         * Delete Multiple Metafields
         * @description Delete all location metafields.
         */
        readonly delete: operations["deleteLocationsMetafields"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        readonly ErrorResponse: {
            /** @description The HTTP status code generated by the origin server for this occurrence of the problem. */
            readonly status?: number;
            /** @description Human readable error message. */
            readonly title?: string;
            /** @description URL identifying the error type. Dereferencing the URL leads to documentation about the error type.
             *      */
            readonly type?: string;
            /** @description The detailed summary describing the particular error. */
            readonly errors?: {
                readonly [key: string]: unknown;
            };
        };
        readonly Meta: {
            readonly pagination?: {
                /**
                 * @description The total number of items in the result set.
                 * @example 2
                 */
                readonly total?: number;
                /**
                 * @description The total number of items in the collection on current page.
                 * @example 2
                 */
                readonly count?: number;
                /**
                 * @description The number of items returned in the collection per page, controlled by the limit parameter.
                 * @example 100
                 */
                readonly per_page?: number;
                /**
                 * @description The page you are currently on within the collection.
                 * @example 1
                 */
                readonly current_page?: number;
                /**
                 * @description The total number of pages in the collection.
                 * @example 1
                 */
                readonly total_pages?: number;
                /** @description Pagination links for the previous and next parts of the whole collection. */
                readonly links?: {
                    /**
                     * @description The link to the previous page is returned in the response.
                     * @example ?limit=100&page=1
                     */
                    readonly previous?: string;
                    /**
                     * @description A link to the current page is returned in the response.
                     * @example ?limit=100&page=1
                     */
                    readonly current?: string;
                    /**
                     * @description Link to the next page returned in the response.
                     * @example ?limit=100&page=1
                     */
                    readonly next?: string;
                };
            };
        };
        readonly OperatingHoursForDay: {
            /**
             * @description Boolean variable that defines if the location is open or not.
             * @default false
             */
            readonly open: boolean;
            /**
             * Format: string
             * @description Opening time.
             * @example 08:00
             */
            readonly opening?: string;
            /**
             * Format: string
             * @description Closing time.
             * @example 16:00
             */
            readonly closing?: string;
        };
        /** @description Schedule with opening and closing hours for each day of the week. */
        readonly OperatingHours: {
            readonly sunday?: components["schemas"]["OperatingHoursForDay"];
            readonly monday?: components["schemas"]["OperatingHoursForDay"];
            readonly tuesday?: components["schemas"]["OperatingHoursForDay"];
            readonly wednesday?: components["schemas"]["OperatingHoursForDay"];
            readonly thursday?: components["schemas"]["OperatingHoursForDay"];
            readonly friday?: components["schemas"]["OperatingHoursForDay"];
            readonly saturday?: components["schemas"]["OperatingHoursForDay"];
        };
        readonly BlackoutHours: readonly {
            /** @example Thanksgiving */
            readonly label: string;
            /**
             * Format: date
             * @example 2022-09-29
             */
            readonly date: string;
            readonly open: boolean;
            /**
             * Format: string
             * @default 00:00
             * @example 09:00
             */
            readonly opening: string;
            /**
             * Format: string
             * @default 00:00
             * @example 09:00
             */
            readonly closing: string;
            /** @default false */
            readonly all_day: boolean;
            /** @default false */
            readonly annual: boolean;
        }[];
        readonly LocationResponse: {
            /**
             * @description Location immutable unique identifier.
             * @example 2
             */
            readonly id?: number;
            /**
             * @description Location user-defined unique identifier.
             * @example BIGC-1
             */
            readonly code?: string;
            /**
             * @description Location label.
             * @example Central store
             */
            readonly label?: string;
            /**
             * @description Description of location.
             * @example Central shop of the world
             */
            readonly description?: string;
            /**
             * @description Indicates if the third-party system is the source of truth for inventory values. If set to true, manually editing inventory in BCÊ¼s control panel will be disabled.
             *
             * @default false
             */
            readonly managed_by_external_source: boolean;
            /**
             * @description Describe type of given location.
             * @default PHYSICAL
             * @enum {string}
             */
            readonly type_id: "PHYSICAL" | "VIRTUAL";
            /**
             * @description Indicator of accessibility of the location.
             * @default true
             */
            readonly enabled: boolean;
            readonly operating_hours?: components["schemas"]["OperatingHours"];
            /**
             * @description Time zone of location.
             * @example Etc/GMT+12
             */
            readonly time_zone?: string;
            /**
             * Format: date-time
             * @description Time when location was created.
             * @example 2022-05-30T12:18:02Z
             */
            readonly created_at?: string;
            /**
             * Format: date-time
             * @description Time of last update of the location.
             * @example 2022-05-30T12:18:02Z
             */
            readonly updated_at?: string;
            readonly address?: {
                /**
                 * @description Main address information.
                 * @example Central Park
                 */
                readonly address1?: string;
                /** @description Additional address information. */
                readonly address2?: string;
                /**
                 * @description The city where the location is located.
                 * @example New York City
                 */
                readonly city?: string;
                /**
                 * @description The state where the location is located.
                 * @example NY
                 */
                readonly state?: string;
                /**
                 * @description Zip code of the location.
                 * @example 11111
                 */
                readonly zip?: string;
                /**
                 * Format: email
                 * @description Email of the location.
                 * @example test@example.com
                 */
                readonly email?: string;
                /**
                 * @description Phone number of the location.
                 * @example 800-555-0198
                 */
                readonly phone?: string;
                /** @description Object with latitude and longitude that points at the location. */
                readonly geo_coordinates?: {
                    /**
                     * Format: float
                     * @description Latitude.
                     * @example 11
                     */
                    readonly latitude?: number;
                    /**
                     * Format: float
                     * @description Longitude.
                     * @example 8
                     */
                    readonly longitude?: number;
                };
                /**
                 * @description ISO 3166-1 alpha-3 code.
                 * @example US
                 */
                readonly country_code?: string;
            };
            /**
             * @description Indicator of accessibility of location on the storefront.
             * @default true
             */
            readonly storefront_visibility: boolean;
            readonly special_hours?: readonly {
                /** @example Thanksgiving */
                readonly label?: string;
                /**
                 * Format: date
                 * @example 2022-09-29
                 */
                readonly date?: string;
                readonly open?: boolean;
                /**
                 * Format: string
                 * @default 00:00
                 * @example 09:00
                 */
                readonly opening: string;
                /**
                 * Format: string
                 * @default 00:00
                 * @example 09:00
                 */
                readonly closing: string;
                /** @default false */
                readonly all_day: boolean;
                /** @default false */
                readonly annual: boolean;
            }[];
        };
        readonly LocationsUpdateRequest: readonly {
            /**
             * @description Location immutable unique identifier.
             * @example 2
             */
            readonly id: number;
            /**
             * @description Location user-defined unique identifier.
             * @example BIGC-2
             */
            readonly code?: string;
            /**
             * @description Location label.
             * @example Central store
             */
            readonly label?: string;
            /**
             * @description Description of location.
             * @example Central shop of the world
             */
            readonly description?: string;
            /**
             * @description Indicates if the third-party system is the source of truth for inventory values. If set to true, manually editing inventory in BCÊ¼s control panel will be disabled.
             *
             * @default false
             */
            readonly managed_by_external_source: boolean;
            /**
             * @description Describe type of given location.
             * @default PHYSICAL
             * @enum {string}
             */
            readonly type_id: "PHYSICAL" | "VIRTUAL";
            /**
             * @description Indicator of accessibility of the location.
             * @default true
             */
            readonly enabled: boolean;
            readonly operating_hours?: components["schemas"]["OperatingHours"];
            /**
             * @description Time zone of location.
             * @example Etc/UTC
             */
            readonly time_zone?: string;
            readonly address?: {
                /**
                 * @description Main address information.
                 * @example 5th Ave
                 */
                readonly address1?: string;
                /** @description Additional address information. */
                readonly address2?: string;
                /**
                 * @description The city where the location is located.
                 * @example New York City
                 */
                readonly city?: string;
                /**
                 * @description The state where the location is located.
                 * @example NY
                 */
                readonly state?: string;
                /**
                 * @description Zip code of the location.
                 * @example 12345
                 */
                readonly zip?: string;
                /**
                 * Format: email
                 * @description Email of the location.
                 * @example test@example.com
                 */
                readonly email?: string;
                /**
                 * @description Phone number of the location.
                 * @example 800-555-0198
                 */
                readonly phone?: string;
                /** @description Object with latitude and longitude that points at the location. */
                readonly geo_coordinates?: {
                    /**
                     * Format: float
                     * @description Latitude.
                     * @example 11
                     */
                    readonly latitude: number;
                    /**
                     * Format: float
                     * @description Longitude.
                     * @example 11
                     */
                    readonly longitude: number;
                };
                /**
                 * @description ISO 3166-1 alpha-3 code.
                 * @default US
                 * @enum {string}
                 */
                readonly country_code: "US";
            };
            /**
             * @description Indicator of accessibility of location on the storefront.
             * @default true
             */
            readonly storefront_visibility: boolean;
            readonly special_hours?: components["schemas"]["BlackoutHours"];
        }[];
        readonly LocationsCreateRequest: readonly {
            /**
             * @description Location user-defined unique identifier.
             * @example BIGC-1
             */
            readonly code?: string;
            /**
             * @description Location label.
             * @example Central store
             */
            readonly label?: string;
            /**
             * @description Description of location. This field can be returned by the GraphQL Storefront API so that additional details can be exposed to customers on the storefront (customer-facing).
             * @example Central shop of the world
             */
            readonly description?: string;
            /**
             * @description Indicates if the third-party system is the source of truth for inventory values. If set to true, manually editing inventory in BCÊ¼s control panel will be disabled.
             *
             * @default false
             */
            readonly managed_by_external_source: boolean;
            /**
             * @description Describe type of given location.
             * @default PHYSICAL
             * @enum {string}
             */
            readonly type_id: "PHYSICAL" | "VIRTUAL";
            /** @default true */
            readonly enabled: boolean;
            readonly operating_hours?: components["schemas"]["OperatingHours"];
            /**
             * @description Time zone of location. For a list of valid time zones, please view: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
             * @example Etc/UTC
             */
            readonly time_zone?: string;
            /** @description Address is required if the locationÊ¼s `type_id` is `PHYSICAL`. */
            readonly address?: {
                /**
                 * @description Main address information.
                 * @example 5th Ave
                 */
                readonly address1: string;
                /** @description Additional address information. */
                readonly address2?: string;
                /**
                 * @description The city where the location is located.
                 * @example New York
                 */
                readonly city: string;
                /**
                 * Format: enum
                 * @description The state where the location is located.
                 * @example NY
                 */
                readonly state: string;
                /**
                 * @description Zip code of the location.
                 * @example 10021
                 */
                readonly zip: string;
                /**
                 * Format: email
                 * @description Email of the location.
                 * @example test@example.com
                 */
                readonly email: string;
                /**
                 * @description Phone number of the location.
                 * @example 800-555-0198
                 */
                readonly phone?: string;
                /** @description Object with latitude and longitude that points at the location. */
                readonly geo_coordinates: {
                    /**
                     * Format: float
                     * @description Latitude.
                     * @example 40.774378
                     */
                    readonly latitude: number;
                    /**
                     * Format: float
                     * @description Longitude.
                     * @example -73.9653178
                     */
                    readonly longitude: number;
                };
                /**
                 * Format: enum
                 * @description ISO 3166-1 alpha-3 code.
                 * @example US
                 */
                readonly country_code: string;
            };
            /** @default true */
            readonly storefront_visibility: boolean;
            readonly special_hours?: components["schemas"]["BlackoutHours"];
        }[];
        readonly SimpleTransactionResponse: {
            /** @description Unique identifier of performed action. */
            readonly transaction_id?: string;
        };
        /** @description Common metafield properties.
         *      */
        readonly MetafieldBase: {
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             * @example status
             */
            readonly key?: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example upcoming
             */
            readonly value?: string;
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example headquarters
             */
            readonly namespace?: string;
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /** @description Description for the metafields.
             *      */
            readonly description?: string;
        };
        /** @description Allows app partners to write custom data to various resources in the API.
         *      */
        readonly Metafield: {
            /**
             * @description Unique ID for the metafield.
             * @example 1
             */
            readonly id?: number;
        } & components["schemas"]["MetafieldBase"] & {
            /**
             * @description The type of resource with which the metafield is associated.
             *
             * @enum {string}
             */
            readonly resource_type?: "location";
            /** @description The unique identifier for the resource with which the metafield is associated.
             *      */
            readonly resource_id?: number;
        } & {
            /**
             * Format: date-time
             * @description Date and time when the metafield was created.
             *
             * @example 2022-04-14T23:06:45+00:00
             */
            readonly date_created?: string;
            /**
             * Format: date-time
             * @description Date and time when the metafield was last updated.
             *
             * @example 2022-09-08T04:18:55+00:00
             */
            readonly date_modified?: string;
            /**
             * @description Client ID for the metafieldÊ¼s creator.
             * @example asdfasdfasdfasdfasdfasdfasdf
             */
            readonly owner_client_id?: string;
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponse: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            readonly meta?: components["schemas"]["CollectionMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponse_POST_PUT: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            /**
             * @description Empty for 200 responses.
             * @example []
             */
            readonly errors?: readonly unknown[];
            readonly meta?: components["schemas"]["CollectionMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponsePartialSuccess_POST_PUT: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            readonly errors?: readonly components["schemas"]["Error"][];
            readonly meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponsePartialSuccess_DELETE: {
            /** @example [
             *       123
             *     ] */
            readonly data?: readonly number[];
            readonly errors?: readonly components["schemas"]["Error"][];
            readonly meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionDeleteResponseSuccess: {
            /** @example [
             *       123,
             *       124,
             *       125
             *     ] */
            readonly data?: readonly number[];
            /**
             * @description Empty for 200 responses.
             * @example []
             */
            readonly errors?: readonly unknown[];
            readonly meta?: components["schemas"]["WriteCollectionSuccessMeta"];
        };
        /**
         * Collection Meta
         * @description Additional data about the response.
         */
        readonly WriteCollectionPartialSuccessMeta: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 3
             */
            readonly total?: number;
            /**
             * @description Total number of items that were successfully deleted.
             *
             * @example 1
             */
            readonly success?: number;
            /**
             * @description Total number of items that failed to be deleted.
             *
             * @example 2
             */
            readonly failed?: number;
        };
        /**
         * Collection Meta
         * @description Additional data about the response.
         */
        readonly WriteCollectionSuccessMeta: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 3
             */
            readonly total?: number;
            /**
             * @description Total number of items that were successfully deleted.
             *
             * @example 3
             */
            readonly success?: number;
            /**
             * @description Total number of items that failed to be deleted.
             *
             * @example 0
             */
            readonly failed?: number;
        };
        /**
         * @description Total number of items in the result set.
         *
         * @example 3
         */
        readonly Total: number;
        /**
         * @description Total number of items that were successfully deleted.
         *
         * @example 1
         */
        readonly Success: number;
        /**
         * @description Total number of items that failed to be deleted.
         *
         * @example 2
         */
        readonly Failed: number;
        /** @description Error response payload for the BigCommerce API.
         *      */
        readonly Error: {
            /**
             * @description The HTTP status code for the error.
             *
             * @example 422
             */
            readonly status?: number;
            /**
             * @description The error title.
             *
             * @example Bulk operation has failed
             */
            readonly title?: string;
            /**
             * @description The error type.
             *
             * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
             */
            readonly type?: string;
            readonly errors?: components["schemas"]["ErrorDetail"];
        };
        /**
         * @description Error detail response payload for the BigCommerce API.
         *
         * @example {
         *       "1": "Unauthorized to delete",
         *       "2": "Metafield does not exist"
         *     }
         */
        readonly ErrorDetail: {
            readonly [key: string]: unknown;
        };
        /**
         * Collection Meta
         * @description Data about the response, including pagination and collection totals.
         */
        readonly CollectionMeta: {
            /**
             * Pagination
             * @description Data about the response, including pagination and collection totals.
             */
            readonly pagination?: {
                /**
                 * @description Total number of items in the result set.
                 *
                 * @example 36
                 */
                readonly total?: number;
                /**
                 * @description Total number of items in the collection response.
                 *
                 * @example 36
                 */
                readonly count?: number;
                /**
                 * @description The amount of items returned in the collection per page, controlled by the limit parameter.
                 *
                 * @example 50
                 */
                readonly per_page?: number;
                /**
                 * @description The page you are currently on within the collection.
                 *
                 * @example 1
                 */
                readonly current_page?: number;
                /**
                 * @description The total number of pages in the collection.
                 *
                 * @example 1
                 */
                readonly total_pages?: number;
                /** @description Pagination links for the previous and next parts of the whole collection.
                 *      */
                readonly links?: {
                    /** @description Link to the previous page returned in the response.
                     *      */
                    readonly previous?: string;
                    /**
                     * @description Link to the current page returned in the response.
                     *
                     * @example ?page=1&limit=50
                     */
                    readonly current?: string;
                    /** @description Link to the next page returned in the response.
                     *      */
                    readonly next?: string;
                };
            };
        } & {
            readonly [key: string]: unknown;
        };
        /** @description Common Metafield properties.
         *      */
        readonly MetafieldBase_Post: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value: string;
            /**
             * @description Description for the metafields.
             *
             * @example Name of Staff Member
             */
            readonly description?: string;
        };
        /** @description Common Metafield properties.
         *      */
        readonly MetafieldBase_Put: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace?: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key?: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value?: string;
            /**
             * @description Description for the metafields.
             *
             * @example Name of Staff Member
             */
            readonly description?: string;
        };
    };
    responses: never;
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
        /** @description Unique identifier for a location. */
        readonly LocationIdParam: number;
        /** @description Comma separated list of `location_id`. */
        readonly LocationIdsParam: number;
        /** @description Comma separated list of `location_code`. */
        readonly LocationCodeFilterParam: string;
        /** @description Filter whether the location is the default. */
        readonly LocationIsDefaultParam: boolean;
        /** @description Comma separated list of locations type codes. */
        readonly LocationTypeIdParam: string;
        /** @description Filter whether an external source manages location inventory levels. */
        readonly LocationManagedByExternalSourceParam: boolean;
        /** @description Filter by active locations flag; return both if not specified. */
        readonly LocationIsActiveParam: boolean;
        /** @description Filter by storefront_visibility flag; return both if not specified. */
        readonly LocationStorefrontVisibilityParam: boolean;
        /** @description Unique identifier for a metafield. */
        readonly MetafieldIdParam: number;
        /** @description Specifies the page number in a limited (paginated) list of products.
         *      */
        readonly PageParam: number;
        /** @description Filter based on a metafieldÊ¼s key. */
        readonly MetafieldKeyParam: string;
        /** @description Filter based on comma-separated metafieldÊ¼s keys. Could be used with vanilla 'key' query parameter. */
        readonly MetafieldKeyInParam: readonly string[];
        /** @description Filter based on a metafieldÊ¼s namespaces. */
        readonly MetafieldNamespaceParam: string;
        /** @description Filter based on comma-separated metafieldÊ¼s namespaces. Could be used with vanilla 'namespace' query parameter. */
        readonly MetafieldNamespaceInParam: readonly string[];
        /** @description Controls the number of items per page in a limited (paginated) list of products.
         *      */
        readonly LimitParam: number;
        /** @description Sort direction. Acceptable values are: `asc`, `desc`.
         *      */
        readonly DirectionParam: "asc" | "desc";
        /** @description 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
         *      */
        readonly date_created_min: string;
        /** @description 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
         *      */
        readonly date_created_max: string;
        /** @description 'Query parameter that lets you filter by the maximum date modified, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
         *      */
        readonly date_modified_max: string;
        /** @description 'Query parameter that lets you filter by the minimum date modified, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
         *      */
        readonly date_modified_min: string;
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly IncludeFieldsParamMetafields: readonly ("resource_id" | "key" | "value" | "namespace" | "permission_set" | "resource_type" | "description" | "owner_client_id" | "date_created" | "date modified")[];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getLocations: {
        readonly parameters: {
            readonly query?: {
                /** @description Comma separated list of `location_id`. */
                readonly "location_id:in"?: components["parameters"]["LocationIdsParam"];
                /** @description Comma separated list of `location_code`. */
                readonly "location_code:in"?: components["parameters"]["LocationCodeFilterParam"];
                /** @description Filter whether the location is the default. */
                readonly is_default?: components["parameters"]["LocationIsDefaultParam"];
                /** @description Comma separated list of locations type codes. */
                readonly "type_id:in"?: components["parameters"]["LocationTypeIdParam"];
                /** @description Filter whether an external source manages location inventory levels. */
                readonly managed_by_external_source?: components["parameters"]["LocationManagedByExternalSourceParam"];
                /** @description Filter by active locations flag; return both if not specified. */
                readonly is_active?: components["parameters"]["LocationIsActiveParam"];
                /** @description Filter by storefront_visibility flag; return both if not specified. */
                readonly storefront_visibility?: components["parameters"]["LocationStorefrontVisibilityParam"];
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description The request has been successfully processed. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["LocationResponse"][];
                        readonly meta?: components["schemas"]["Meta"];
                    };
                };
            };
        };
    };
    readonly updateLocations: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["LocationsUpdateRequest"];
            };
        };
        readonly responses: {
            /** @description The request has been successfully processed. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["SimpleTransactionResponse"];
                };
            };
            /** @description Incorrect entity. Locations were not valid. This results from missing required fields, invalid data, or partial error. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/problem+json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readonly createLocations: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["LocationsCreateRequest"];
                readonly "application/xml": Record<string, unknown>;
            };
        };
        readonly responses: {
            /** @description Locations have been successfully created. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["SimpleTransactionResponse"];
                };
            };
            /** @description Incorrect entity. Locations were not valid. This results from missing required fields, invalid data, or partial error. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/problem+json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readonly deleteLocations: {
        readonly parameters: {
            readonly query: {
                /** @description Comma separated list of `location_id`. */
                readonly "location_id:in": number;
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Request has been successfully processed. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["SimpleTransactionResponse"];
                };
            };
            /** @description Request has been rejected due to resource not being found. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/problem+json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Incorrect entity. The location is not valid. This error is the result of missing required fields or  invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/problem+json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readonly getLocationMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description Unique identifier for a location. */
                readonly location_id: components["parameters"]["LocationIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description The request has been successfully processed. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Metafield"][];
                        readonly meta?: {
                            readonly pagination?: {
                                /** @description The total number of items in the result set. */
                                readonly total?: number;
                                /** @description The total number of items in the collection on current page. */
                                readonly count?: number;
                                /** @description The number of items returned in the collection per page, controlled by the limit parameter. */
                                readonly per_page?: number;
                                /** @description The page you are currently on within the collection. */
                                readonly current_page?: number;
                                /** @description The total number of pages in the collection. */
                                readonly total_pages?: number;
                                /** @description Pagination links for parts of the whole collection. */
                                readonly links?: {
                                    /**
                                     * @description A link to the current page is returned in the response.
                                     * @example ?limit=100&page=1
                                     */
                                    readonly current?: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly createLocationMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description Unique identifier for a location. */
                readonly location_id: components["parameters"]["LocationIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["MetafieldBase"];
            };
        };
        readonly responses: {
            /** @description The request has been successfully processed. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Metafield"];
                        readonly meta?: {
                            readonly [key: string]: unknown;
                        };
                    };
                };
            };
            /** @description Bad Request. Metafield is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description The `Metafield` conflicted with another `Metafield`. This can result from duplicate unique key combinations of the appÊ¼s client id, namespace, key, resource_type, and resource_id.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description The HTTP status code generated by the origin server for this occurrence of the problem. */
                        readonly status?: number;
                        /** @description Human readable error message. */
                        readonly title?: string;
                        /** @description URL identifying the error type. Dereferencing the URL leads to documentation about the error type. */
                        readonly type?: string;
                    };
                };
            };
            /** @description The `Metafield` was not valid. This is the result of missing required fields or invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readonly getLocationMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description Unique identifier for a location. */
                readonly location_id: components["parameters"]["LocationIdParam"];
                /** @description Unique identifier for a metafield. */
                readonly metafield_id: components["parameters"]["MetafieldIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description The request has been successfully processed. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Metafield"];
                        readonly meta?: {
                            readonly [key: string]: unknown;
                        };
                    };
                };
            };
            /** @description The resource was not found. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readonly updateLocationMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description Unique identifier for a location. */
                readonly location_id: components["parameters"]["LocationIdParam"];
                /** @description Unique identifier for a metafield. */
                readonly metafield_id: components["parameters"]["MetafieldIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["MetafieldBase"];
            };
        };
        readonly responses: {
            /** @description The request has been successfully processed. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Metafield"];
                        readonly meta?: {
                            readonly [key: string]: unknown;
                        };
                    };
                };
            };
            /** @description Bad Request. Metafield is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description The resource was not found. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                    readonly "application/xml": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                    };
                };
            };
        };
    };
    readonly deleteLocationMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description Unique identifier for a location. */
                readonly location_id: components["parameters"]["LocationIdParam"];
                /** @description Unique identifier for a metafield. */
                readonly metafield_id: components["parameters"]["MetafieldIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description No Content */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The resource was not found. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                    readonly "application/xml": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                    };
                };
            };
        };
    };
    readonly getLocationsMetafields: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Filter based on a metafieldÊ¼s key. */
                readonly key?: components["parameters"]["MetafieldKeyParam"];
                /** @description Filter based on comma-separated metafieldÊ¼s keys. Could be used with vanilla 'key' query parameter. */
                readonly "key:in"?: components["parameters"]["MetafieldKeyInParam"];
                /** @description Filter based on a metafieldÊ¼s namespaces. */
                readonly namespace?: components["parameters"]["MetafieldNamespaceParam"];
                /** @description Filter based on comma-separated metafieldÊ¼s namespaces. Could be used with vanilla 'namespace' query parameter. */
                readonly "namespace:in"?: components["parameters"]["MetafieldNamespaceInParam"];
                /** @description Sort direction. Acceptable values are: `asc`, `desc`.
                 *      */
                readonly direction?: components["parameters"]["DirectionParam"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParamMetafields"];
                /** @description 'Query parameter that lets you filter by the minimum date modified, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
                 *      */
                readonly "date_modified:min"?: components["parameters"]["date_modified_min"];
                /** @description 'Query parameter that lets you filter by the maximum date modified, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
                 *      */
                readonly "date_modified:max"?: components["parameters"]["date_modified_max"];
                /** @description 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
                 *      */
                readonly "date_created:min"?: components["parameters"]["date_created_min"];
                /** @description 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
                 *      */
                readonly "date_created:max"?: components["parameters"]["date_created_max"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description List of `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse"];
                };
            };
        };
    };
    readonly updateLocationsMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly (components["schemas"]["MetafieldBase_Put"] & {
                    /**
                     * @description The ID of metafield to update.
                     *
                     * @example 42
                     */
                    readonly id: string;
                })[];
            };
        };
        readonly responses: {
            /** @description List of updated `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
                };
            };
            /** @description Bad Request. Metafield is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Response object for metafields creation with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
                };
            };
        };
    };
    readonly createLocationsMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly (components["schemas"]["MetafieldBase_Post"] & {
                    /**
                     * @description The ID of the location with which the metafield is associated.
                     *
                     * @example 42
                     */
                    readonly resource_id: number;
                })[];
            };
        };
        readonly responses: {
            /** @description List of created `Metafield` objects. # TODO
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
                };
            };
            /** @description Bad Request. Metafield is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Response object for metafields creation with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
                };
            };
        };
    };
    readonly deleteLocationsMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** @description List of metafield IDs. */
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly number[];
            };
        };
        readonly responses: {
            /** @description Response object for metafields deletion with success.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionDeleteResponseSuccess"];
                };
            };
            /** @description Response object for metafields deletion with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_DELETE"];
                };
            };
        };
    };
}
