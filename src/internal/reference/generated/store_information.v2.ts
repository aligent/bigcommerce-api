/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/store": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Store Information
         * @description Returns metadata about the global settings for a store. Some of these values are independently configurable on a per-storefront or per-channel basis. For channel overrides, see [Store Settings](/docs/rest-management/settings).
         */
        readonly get: operations["getStoreInformation"];
    };
    readonly "/store/metafields": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Store Metafields
         * @description Gets all store `metafields`.
         */
        readonly get: operations["getStoreMetafields"];
        /**
         * Update multiple metafields
         * @description Update multiple metafields.
         */
        readonly put: operations["updateStoreMetafields"];
        /**
         * Create multiple Metafields
         * @description Create multiple `metafields`.
         */
        readonly post: operations["createStoresMetafields"];
        /**
         * Delete multiple metafields
         * @description Delete all store metafields.
         */
        readonly delete: operations["deleteStoreMetafields"];
    };
    readonly "/store/metafields/{metafieldId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafieldId: components["parameters"]["MetafieldIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Store Metafield
         * @description Gets a store `metafield`.
         */
        readonly get: operations["getStoreMetafield"];
        /**
         * Update a Store Metafield
         * @description Update a store `Metafield`.
         *
         */
        readonly put: operations["updateStoreMetafield"];
        /**
         * Delete a Metafield
         * @description Deletes a store `Metafield`.
         *
         */
        readonly delete: operations["deleteStoreMetafield"];
    };
    readonly "/time": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get System Timestamp
         * @description Returns the system timestamp at the time of the request. The time resource is useful for validating API authentication details and testing client connections.
         */
        readonly get: operations["getSystemTimestamp"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Not Found
         * @description Error payload for the BigCommerce API.
         */
        readonly NotFound: {
            /**
             * @description 404 HTTP status code.
             *
             * @example 404
             */
            readonly status?: number;
            /**
             * @description The error title describing the particular error.
             * @example The resource at that URL is not found.
             */
            readonly title?: string;
            /** @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes */
            readonly type?: string;
        };
        readonly ErrorResponse: {
            readonly status?: number;
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
            readonly errors?: Record<string, unknown>;
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetafieldResponse: {
            readonly data?: components["schemas"]["Metafield"];
            readonly meta?: components["schemas"]["metaCollection_open"];
        };
        /** @description Allows app partners to write custom data to various resources in the API.
         *      */
        readonly Metafield: components["schemas"]["MetafieldBase"] & {
            /** @description The unique identifier for the metafield. */
            readonly id?: string;
            /**
             * Format: date-time
             * @description Date and time of the metafieldʼs creation.
             * @example 2022-06-16T18:39:00+00:00
             */
            readonly date_created?: string;
            /**
             * Format: date-time
             * @description Date and time when the metafield was last updated.
             * @example 2022-06-16T18:39:00+00:00
             */
            readonly date_modified?: string;
            /**
             * @description Client ID for the metafieldʼs creator.
             * @example asdfasdfasdfasdfasdfasdfasdf
             */
            readonly owner_client_id?: string;
        };
        /** @description Common Metafield properties.
         *      */
        readonly MetafieldBase: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace?: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key?: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value?: string;
            /**
             * @description Description for the metafields.
             *
             * @example order
             */
            readonly description?: string;
            /**
             * @description The type of resource with which the metafield is associated.
             *
             * @example store
             * @enum {string}
             */
            readonly resource_type?: "brand" | "product" | "variant" | "category" | "cart" | "store";
            /**
             * @description The unique identifier for the resource with which the metafield is associated.
             *
             * @example 0
             */
            readonly resource_id?: string;
        };
        /** @description Common Metafield properties.
         *      */
        readonly MetafieldBase_Post_Put: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value: string;
            /**
             * @description Description for the metafields.
             *
             * @example Name of Staff Member
             */
            readonly description?: string;
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponse: {
            readonly data?: components["schemas"]["Metafield"];
            readonly meta?: components["schemas"]["metaCollection_open"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponse_Batch: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            readonly meta?: components["schemas"]["CollectionMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponse_Batch_POST_PUT: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            /**
             * @description Empty for 200 responses.
             * @example []
             */
            readonly errors?: readonly unknown[];
            readonly meta?: components["schemas"]["WriteCollectionSuccessMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionDeleteResponseSuccess: {
            /** @example [
             *       123,
             *       124,
             *       125
             *     ] */
            readonly data?: readonly number[];
            /**
             * @description Empty for 200 responses.
             * @example []
             */
            readonly errors?: readonly unknown[];
            readonly meta?: components["schemas"]["WriteCollectionSuccessMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponsePartialSuccess_POST_PUT: {
            /**
             * @description Empty for 200 responses.
             * @example []
             */
            readonly data?: readonly components["schemas"]["Metafield"][];
            readonly errors?: components["schemas"]["Error"];
            readonly meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponsePartialSuccess_DELETE: {
            /** @example [
             *       123
             *     ] */
            readonly data?: readonly number[];
            readonly errors?: readonly components["schemas"]["Error"][];
            readonly meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
        };
        /** @description Error response payload for the BigCommerce API.
         *      */
        readonly Error: {
            /**
             * @description The HTTP status code for the error.
             *
             * @example 422
             */
            readonly status?: number;
            /**
             * @description The error title.
             *
             * @example Bulk operation has failed
             */
            readonly title?: string;
            /**
             * @description The error type.
             *
             * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
             */
            readonly type?: string;
            readonly errors?: components["schemas"]["ErrorDetail"];
        };
        /**
         * @description Error detail response payload for the BigCommerce API.
         *
         * @example {
         *       "0": "Entity already exists",
         *       "1": "Unauthorized to delete",
         *       "2": "Metafield does not exist"
         *     }
         */
        readonly ErrorDetail: {
            readonly [key: string]: unknown;
        };
        /**
         * Collection Meta
         * @description Additional data about the response.
         */
        readonly WriteCollectionSuccessMeta: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 3
             */
            readonly total?: number;
            /**
             * @description Total number of items that were successfully deleted.
             *
             * @example 3
             */
            readonly success?: number;
            /**
             * @description Total number of items that failed to be deleted.
             *
             * @example 0
             */
            readonly failed?: number;
        };
        /**
         * Collection Meta
         * @description Additional data about the response.
         */
        readonly WriteCollectionPartialSuccessMeta: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 3
             */
            readonly total?: number;
            /**
             * @description Total number of items that were successfully deleted.
             *
             * @example 1
             */
            readonly success?: number;
            /**
             * @description Total number of items that failed to be deleted.
             *
             * @example 2
             */
            readonly failed?: number;
        };
        /**
         * Collection Meta
         * @description Data about the response, including pagination and collection totals.
         */
        readonly CollectionMeta: {
            /**
             * Pagination
             * @description Data about the response, including pagination and collection totals.
             */
            readonly pagination?: {
                /**
                 * @description Total number of items in the result set.
                 *
                 * @example 36
                 */
                readonly total?: number;
                /**
                 * @description Total number of items in the collection response.
                 *
                 * @example 36
                 */
                readonly count?: number;
                /**
                 * @description The amount of items returned in the collection per page, controlled by the limit parameter.
                 *
                 * @example 50
                 */
                readonly per_page?: number;
                /**
                 * @description The page you are currently on within the collection.
                 *
                 * @example 1
                 */
                readonly current_page?: number;
                /**
                 * @description The total number of pages in the collection.
                 *
                 * @example 1
                 */
                readonly total_pages?: number;
                /** @description Pagination links for the previous and next parts of the whole collection.
                 *      */
                readonly links?: {
                    /** @description Link to the previous page returned in the response.
                     *      */
                    readonly previous?: string;
                    /**
                     * @description Link to the current page returned in the response.
                     *
                     * @example ?page=1&limit=50
                     */
                    readonly current?: string;
                    /** @description Link to the next page returned in the response.
                     *      */
                    readonly next?: string;
                };
            };
        } & {
            readonly [key: string]: unknown;
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly metaCollection_open: Record<string, unknown>;
        /** Store Information */
        readonly StoreInformation: {
            /**
             * @description The store hash, a unique store identifier.
             * @example store_hash
             */
            readonly id?: string;
            /**
             * Format: uuid
             * @description The UUID of the account to which the store belongs.
             */
            readonly account_uuid?: string;
            /**
             * @description Primary domain name.
             * @example your-store-url.com
             */
            readonly domain?: string;
            /**
             * @description Store’s current HTTPS URL.
             * @example https://your-store-url.com
             */
            readonly secure_url?: string;
            /**
             * @description The secure hostname of the control panel.
             * @example https://store-abc123.mybigcommerce.com
             */
            readonly control_panel_base_url?: string;
            /**
             * @description The status of the store.
             * @example live
             */
            readonly status?: string;
            /**
             * @description Store’s name.
             * @example BigCommerce
             */
            readonly name?: string;
            /**
             * @description Primary contact’s first name (as defined during the store sign-up process).
             * @example Jane
             */
            readonly first_name?: string;
            /**
             * @description Primary contact’s last name (as defined during the store sign-up process).
             * @example Doe
             */
            readonly last_name?: string;
            /**
             * @description Display address.
             * @example BigCommerce
             */
            readonly address?: string;
            /**
             * @description Country where the store is located (as defined during the store sign-up process).
             * @example United States
             */
            readonly country?: string;
            /**
             * @description Two-letter ISO 3166-1 country code
             * @example AU
             */
            readonly country_code?: string;
            /**
             * @description The infrastructure region where the store is located. Use this to determine where to place supporting infrastructure for minimum latency to the store. Compare against GCP regions on https://cloud.google.com/compute/docs/regions-zones
             * @example us-central1
             */
            readonly infrastructure_region?: string;
            /** @description Display phone number. */
            readonly phone?: string;
            /**
             * @description Email address of the store administrator/owner.
             * @example janedoes@example.com
             */
            readonly admin_email?: string;
            /**
             * @description Email address for orders and fulfillment.
             * @example orders@example.com
             */
            readonly order_email?: string;
            /** @description The URL of the favicon image associated with the website. This should be a valid URL pointing to an `.ico` or other supported icon format file. */
            readonly favicon_url?: string;
            readonly timezone?: components["schemas"]["Timezone"];
            /**
             * @description Default language code.
             * @example en
             */
            readonly language?: string;
            /**
             * @description Default currency code.
             * @example USD
             */
            readonly currency?: string;
            /**
             * @description Default symbol for values in the currency.
             * @example $
             */
            readonly currency_symbol?: string;
            /**
             * @description Default decimal separator for values in the currency.
             * @example .
             */
            readonly decimal_separator?: string;
            /**
             * @description Default thousands separator for values in the currency.
             * @example ,
             */
            readonly thousands_separator?: string;
            /**
             * @description Default decimal places for values in the currency.
             * @example 2
             */
            readonly decimal_places?: number;
            /**
             * @description Default position of the currency symbol (left or right).
             * @example left
             */
            readonly currency_symbol_location?: string;
            /**
             * @description Default weight units (metric or imperial).
             * @example Ounces
             */
            readonly weight_units?: string;
            /**
             * @description Default dimension units (metric or imperial).
             * @example Inches
             */
            readonly dimension_units?: string;
            /**
             * @description The number of decimal places.
             * @example 2
             */
            readonly dimension_decimal_places?: number;
            /**
             * @description The symbol that separates the whole numbers from the decimal points.
             * @example .
             */
            readonly dimension_decimal_token?: string;
            /** @description The symbol used to denote thousands. */
            readonly dimension_thousands_token?: string;
            /**
             * @description Name of the BigCommerce plan to which this store is subscribed.
             * @example Standard
             */
            readonly plan_name?: string;
            /**
             * @description Level of the BigCommerce plan to which this store is subscribed.
             * @example Standard
             */
            readonly plan_level?: string;
            /**
             * @description Whether the payment plan associated with the store is still in the trial phase.
             * @example false
             */
            readonly plan_is_trial?: boolean;
            /**
             * @description Industry, or vertical category, in which the business operates. (As selected from drop-down list during the store sign-up process.)
             * @example Technology
             */
            readonly industry?: string;
            /** @description Either an object describing the logo image, or an empty array. */
            readonly logo?: {
                /** @example https://cdn8.bigcommerce.com/s-{store_hash}/product_images/screen_shot_2018-05-15_at_12.22.26_pm__05547_1529512135.png */
                readonly url?: string;
            } | readonly unknown[];
            /**
             * @description A Boolean value that indicates whether or not prices are entered with tax.
             * @example false
             */
            readonly is_price_entered_with_tax?: boolean;
            /** @description The numeric ID of the store. This is a different unique ID than the store hash. */
            readonly store_id?: number;
            /**
             * @description The ID of the default channel. The ID of the first hosted storefront created on the store is `1`.
             * @default 1
             * @example 1
             */
            readonly default_channel_id: number;
            /**
             * @description The BigCommerce ID of the website associated with the default storefront.
             * @example 1000
             */
            readonly default_site_id?: number;
            readonly active_comparison_modules?: readonly unknown[];
            /** @description Describes some aspects of the storeʼs tech stack and configuration settings that affect the features available for the store to use. */
            readonly features?: {
                /**
                 * @description Indicates whether a store is using a Stencil theme.
                 * @default true
                 * @example true
                 */
                readonly stencil_enabled: boolean;
                /**
                 * @description Indicates whether there is site-wide https.
                 * @example false
                 */
                readonly sitewidehttps_enabled?: boolean;
                /** @description The ID of the Facebook by Meta catalog. If there is none, this endpoint returns an empty string. */
                readonly facebook_catalog_id?: string;
                /**
                 * @description What type of checkout is enabled on the store. Possible values returned are optimized, single (one page), single_customizable (one page for developers), klarna.
                 * @example optimized
                 * @enum {string}
                 */
                readonly checkout_type?: "optimized" | "single" | "single_customizable" | "klarna";
                /** @example false */
                readonly wishlists_enabled?: boolean;
                /**
                 * @description Describes whether you can use the [GraphQL Storefront API](/graphql-storefront/reference) on this store.
                 * @default true
                 * @example true
                 */
                readonly graphql_storefront_api_enabled: boolean;
                /**
                 * @description Indicates whether the store is tracking the values of the cookie and privacy consent settings that the shopper consented to and configured.
                 * @example true
                 */
                readonly shopper_consent_tracking_enabled?: boolean;
                /**
                 * @description Indicates whether the storeʼs plan provides the possibility of using more than one storefront or sales channel. Internally, this value indicates whether the store has the MSF feature flag enabled.
                 * @default false
                 * @example true
                 */
                readonly multi_storefront_enabled: boolean;
                readonly storefront_limits?: {
                    /**
                     * @description Describes the number of storefronts active on the store. If `multi_storefront_enabled` is `false`, this value is `1`.
                     * @default 1
                     * @example 3
                     */
                    readonly active: number;
                    /**
                     * @description Describes the total number of storefronts associated with the store, including both active and inactive storefronts. The default varies based on store plan.
                     * @default 1
                     * @example 15
                     */
                    readonly total_including_inactive: number;
                };
            };
        };
        /** Time Zone */
        readonly Timezone: {
            /**
             * @description A string identifying the time zone, in the format `Continent/City`.
             * @example America/Chicago
             */
            readonly name?: string;
            /**
             * @description A negative or positive number, identifying the offset from UTC/GMT, in seconds, during winter/standard time.
             * @example -21600
             */
            readonly raw_offset?: number;
            /**
             * @description A negative or positive number, identifying the offset from UTC/GMT, in seconds, during summer/daylight saving time.
             * @example -18000
             */
            readonly dst_offset?: number;
            /**
             * @description A boolean indicating whether this time zone observes daylight saving time.
             * @example true
             */
            readonly dst_correction?: boolean;
            readonly date_format?: components["schemas"]["DateFormat"];
        };
        /** Date Format */
        readonly DateFormat: {
            /**
             * @description A string that defines dates’ display format, in the pattern `M jS Y`.
             * @example M jS Y
             */
            readonly display?: string;
            /**
             * @description A string that defines the CSV export format for orders, customers, and products, in the pattern `M jS Y`.
             * @example M jS Y
             */
            readonly export?: string;
            /**
             * @description A string that defines dates’ extended-display format, in the pattern `M jS Y @ g:i A`.
             * @example M jS Y @ g:i A
             */
            readonly extended_display?: string;
        };
        /**
         * timeStamp_Full
         * @description Store Time in Unix format.
         */
        readonly timeStamp_Full: {
            /** Format: int64 */
            readonly time?: number;
        };
    };
    responses: never;
    parameters: {
        readonly ContentType: string;
        /** @description Specifies the page number in a limited (paginated) list of products.
         *      */
        readonly PageParam: number;
        /** @description The ID of the `Metafield`.
         *      */
        readonly MetafieldIdParam: number;
        /** @description Filter based on a metafieldʼs key. */
        readonly MetafieldKeyParam: string;
        /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
        readonly MetafieldKeyInParam: readonly string[];
        /** @description Filter based on a metafieldʼs namespaces. */
        readonly MetafieldNamespaceParam: string;
        /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter */
        readonly MetafieldNamespaceInParam: readonly string[];
        /** @description Controls the number of items per page in a limited (paginated) list of products.
         *      */
        readonly LimitParam: number;
        /** @description Sort direction. Acceptable values are: `asc`, `desc`.
         *      */
        readonly DirectionParam: "asc" | "desc";
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getStoreInformation: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["StoreInformation"];
                };
            };
        };
    };
    readonly getStoreMetafields: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Filter based on a metafieldʼs key. */
                readonly key?: components["parameters"]["MetafieldKeyParam"];
                /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
                readonly "key:in"?: components["parameters"]["MetafieldKeyInParam"];
                /** @description Filter based on a metafieldʼs namespaces. */
                readonly namespace?: components["parameters"]["MetafieldNamespaceParam"];
                /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter */
                readonly "namespace:in"?: components["parameters"]["MetafieldNamespaceInParam"];
                /** @description Sort direction. Acceptable values are: `asc`, `desc`.
                 *      */
                readonly direction?: components["parameters"]["DirectionParam"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description List of `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse_Batch"];
                };
            };
        };
    };
    readonly updateStoreMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly (components["schemas"]["MetafieldBase_Post_Put"] & {
                    /**
                     * @description The ID of metafield to update.
                     *
                     * @example 42
                     */
                    readonly id: number;
                })[];
            };
        };
        readonly responses: {
            /** @description Response payload for the BigCommerce API. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse_Batch_POST_PUT"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Response object for metafields creation with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
                };
            };
        };
    };
    readonly createStoresMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** @description A `metafield` object. */
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["MetafieldBase_Post_Put"][];
            };
        };
        readonly responses: {
            /** @description List of created `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse_Batch_POST_PUT"];
                };
            };
            /** @description Response object for metafields creation with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
                };
            };
        };
    };
    readonly deleteStoreMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** @description Metafields ID list. */
        readonly requestBody?: {
            readonly content: {
                /** @example [
                 *       69,
                 *       70
                 *     ] */
                readonly "application/json": readonly number[];
            };
        };
        readonly responses: {
            /** @description Response object for metafields deletion with success.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionDeleteResponseSuccess"];
                };
            };
        };
    };
    readonly getStoreMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafieldId: components["parameters"]["MetafieldIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description A `Metafield` object.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetafieldResponse"];
                };
            };
            /** @description Not found (A metafield was not found with this query).
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    readonly updateStoreMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafieldId: components["parameters"]["MetafieldIdParam"];
            };
            readonly cookie?: never;
        };
        /** @description A `Metafield` object.
         *      */
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["MetafieldBase_Post_Put"];
            };
        };
        readonly responses: {
            /** @description A metafield and metadata.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse"];
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    readonly deleteStoreMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafieldId: components["parameters"]["MetafieldIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description An empty response.
             *      */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found (A metafield was not found with this query).
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    readonly getSystemTimestamp: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["timeStamp_Full"];
                };
            };
        };
    };
}
