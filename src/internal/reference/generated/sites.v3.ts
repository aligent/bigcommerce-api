/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/sites": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Sites
         * @description Get sites linked to a [headless storefront](/docs/storefront/headless) sales channels.
         */
        readonly get: operations["getSites"];
        /**
         * Create a Site
         * @description Create a site that links a [headless storefront](/docs/storefront/headless) to a sales [channel](/docs/rest-management/channels).
         */
        readonly post: operations["createSite"];
    };
    readonly "/sites/{site_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                readonly site_id: string;
            };
            readonly cookie?: never;
        };
        /**
         * Get a Site
         * @description Get a site with site ID `{site_id}`.
         */
        readonly get: operations["getSite"];
        /**
         * Update a Site
         * @description Update a site with site ID `{site_id}`.
         */
        readonly put: operations["updateSite"];
        /**
         * Delete a Site
         * @description Delete a site with site ID `{site_id}`. Remove the URL set for a given site ID.
         */
        readonly delete: operations["deleteSite"];
    };
    readonly "/sites/{site_id}/routes": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                readonly site_id: number;
            };
            readonly cookie?: never;
        };
        /**
         * Get a Site’s Routes
         * @description Get a site’s routes.
         */
        readonly get: operations["getSiteRoutes"];
        /**
         * Update a Site’s Routes
         * @description Upsert routes for site with ID `{site_id}`.
         *
         *     ## Usage Notes
         *     * `id` is required when updating an existing route.
         */
        readonly put: operations["updateSiteRoutes"];
        /**
         * Create a Site Route
         * @description Create routes that tell BigCommerce how to link to pages on a [headless storefront](/docs/storefront/headless).
         *
         *     ## Usage Notes
         *     * For a list of supported route types, see [Route types](/docs/rest-management/sites#route-types).
         */
        readonly post: operations["createSiteRoute"];
    };
    readonly "/sites/{site_id}/routes/{route_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                readonly site_id: string;
                readonly route_id: string;
            };
            readonly cookie?: never;
        };
        /**
         * Get a Site Route
         * @description Get a site’s route.
         */
        readonly get: operations["getSiteRoute"];
        /**
         * Update a Site Route
         * @description Update a site’s route.
         *
         */
        readonly put: operations["updateSiteRoute"];
        /**
         * Delete a Site Route
         * @description Delete a site’s route.
         */
        readonly delete: operations["deleteSiteRoute"];
    };
    readonly "/sites/{site_id}/certificate": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                readonly site_id: number;
            };
            readonly cookie?: never;
        };
        /**
         * Get a Site’s SSL TLS Certificate Information
         * @description Obtain information about a site’s SSL/TLS certificate.
         */
        readonly get: operations["getSiteCertificate"];
        /**
         * Upsert a Site’s SSL TLS Certificate Information
         * @description - If a value for `url` is not supplied, the saved certificate is associated with the specified site’s `primary` URL.
         *     - Use caution. Because this endpoint upserts, supplying an SSL certificate for a domain that already has a certificate connected overwrites the domain’s extant certificate.'
         */
        readonly put: operations["upsertSiteCertificate"];
    };
    readonly "/sites/certificates": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Site Certificates
         * @description Return all SSL certificates connected to domains within a store.
         */
        readonly get: operations["getSitesCertificates"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * metaCollection
         * @description Meta data relating to pagination.
         */
        readonly _metaCollection: {
            readonly pagination?: {
                /**
                 * @description Total number of items returned.
                 * @example 3
                 */
                readonly total?: number;
                /**
                 * @description Number of items returned on per page.
                 * @example 1
                 */
                readonly count?: number;
                /**
                 * @description Number of items to be displayed per page.
                 * @example 1
                 */
                readonly per_page?: number;
                /**
                 * @description Current page number.
                 * @example 2
                 */
                readonly current_page?: number;
                /**
                 * @description Total number of pages.
                 * @example 3
                 */
                readonly total_page?: number;
                readonly links?: {
                    /**
                     * @description Query string appended to the resource to return to the previous page.
                     * @example ?limit=1&page=1
                     */
                    readonly previous?: string;
                    /**
                     * @description Query string appended to the resource to proceed to the next page.
                     * @example ?limit=1&page=3
                     */
                    readonly next?: string;
                    /**
                     * @description Query string appended to the resource to show the current page.
                     * @example ?limit=1&page=2
                     */
                    readonly current?: string;
                };
            };
        };
        /**
         * siteRoute_Full
         * @description Route object used in responses.
         */
        readonly siteRoute_Full: {
            /** @description Unique ID for this route. Required when updating an existing route. */
            readonly id?: number;
        } & components["schemas"]["siteRoute_Base"];
        /** put_Site */
        readonly put_Site: {
            /**
             * @description The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
             * @example http://kittens.mybigcommerce.com/
             */
            readonly url?: string;
        };
        readonly _site: {
            readonly id?: number;
            /**
             * @description The fully qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
             * @example http://kittens.mybigcommerce.com/
             */
            readonly url?: string;
            /** @description The channel to which this site is attached. Each site belongs to a single channel, and each channel can have either zero or more sites. */
            readonly channel_id?: number;
            /**
             * @description The date-time that this site was created, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
             * @example 2022-01-04T04:15:50.000Z
             */
            readonly created_at?: string;
            /**
             * @description The date-time that this site was last updated, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
             * @example 2022-01-04T04:15:50.000Z
             */
            readonly updated_at?: string;
            /**
             * @deprecated
             * @description Indicates whether a site is using a private/dedicated SSL or a shared SSL.
             * @enum {string}
             */
            readonly ssl_status?: "dedicated" | "shared";
            /** @description All URLs that belong to the site, including `primary`, `canonical`, and `checkout` URLs. */
            readonly urls?: readonly components["schemas"]["Url"][];
            /** @description Indicates whether the channel uses a custom checkout domain. When `false`, the checkout domain falls back to the default channel’s primary URL. */
            readonly is_checkout_url_customized?: boolean;
        };
        /**
         * _metaEmpty
         * @description Empty meta object; may be used later.
         */
        readonly _metaEmpty: Record<string, unknown>;
        /**
         * _pagination
         * @description Data about the response, including pagination and collection totals.
         *
         */
        readonly _pagination: {
            /** @description Total number of items in the result set.
             *      */
            readonly total?: number;
            /** @description Total number of items in the collection response.
             *      */
            readonly count?: number;
            /** @description The amount of items returned in the collection per page, controlled by the limit parameter.
             *      */
            readonly per_page?: number;
            /** @description The page you are currently on within the collection.
             *      */
            readonly current_page?: number;
            /** @description The total number of pages in the collection.
             *      */
            readonly total_pages?: number;
            /** @description Pagination links for the previous and next parts of the whole collection.
             *      */
            readonly links?: {
                /** @description Link to the previous page returned in the response.
                 *      */
                readonly previous?: string;
                /** @description Link to the current page returned in the response.
                 *      */
                readonly current?: string;
                /** @description Link to the next page returned in the response.
                 *      */
                readonly next?: string;
            };
        };
        /**
         * _errors
         * @description The keys and values in an errors object will vary depending on the error received.
         */
        readonly _errors: {
            readonly [key: string]: unknown;
        };
        readonly EmptyResponse: {
            readonly data?: Record<string, unknown>;
            readonly meta?: Record<string, unknown>;
        };
        /** error_Full */
        readonly error_Full: {
            /** @description The HTTP status code.
             *      */
            readonly status?: number;
            /** @description The error title describing the particular error.
             *      */
            readonly title?: string;
            readonly type?: string;
        };
        /** errorDetailed_Full */
        readonly errorDetailed_Full: {
            /** DetailedErrors */
            readonly errors?: {
                readonly [key: string]: unknown;
            };
        };
        /** post_Site */
        readonly post_Site: {
            /**
             * @description The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
             * @example http://kittens.mybigcommerce.com/
             */
            readonly url?: string;
            /** @description The channel this site is attached to. Each site belongs to a single channel, and each channel can have either zero or one sites. */
            readonly channel_id?: number;
        };
        /** siteRoute_Base */
        readonly siteRoute_Base: {
            /**
             * @description The type of resource being routed to; [supported types](/docs/rest-management/sites#route-types).
             * @enum {string}
             */
            readonly type?: "product" | "brand" | "category" | "page" | "blog" | "home" | "cart" | "checkout" | "search" | "account" | "login" | "returns" | "static";
            /**
             * @description Depending on the resource type, this can be an ID (matching a specific item), or a "*" wildcard (matching all items of that type).
             *
             *     For example, a route with a type: "product" and matching: "5" will be used for the product with the ID of 5.
             * @example 5
             */
            readonly matching?: string;
            /**
             * @description The route template that will be used to generate the URL for the requested resource.
             *
             *     Supports several tokens:
             *     - `{id}` The **ID** of the requested item.
             *     - `{slug}` The **slug** for the requested item (if available). Note: the `slug` value may contain `/` slash.
             *     - `{language}` The **language** string that the client is using.
             * @example /my-amazing-product
             */
            readonly route?: string;
        };
        /** siteRoutes_Route_Base */
        readonly siteRoutes_Route_Base: {
            /**
             * @description The type of resource being routed to; [supported types](/docs/rest-management/sites#route-types).
             * @enum {string}
             */
            readonly type: "product" | "brand" | "category" | "page" | "blog" | "home" | "cart" | "checkout" | "search" | "account" | "login" | "returns" | "static";
            /**
             * @description Depending on the resource type, this can be an ID (matching a specific item), or a "*" wildcard (matching all items of that type).
             *
             *     For example, a route with a type: "product" and matching: "5" will be used for the product with the ID of 5.
             * @example 5
             */
            readonly matching: string;
            /**
             * @description The route template that will be used to generate the URL for the requested resource.
             *
             *     Supports several tokens:
             *     - `{id}` The **ID** of the requested item.
             *     - `{slug}` The **slug** for the requested item (if available). Note: the `slug` value may contain `/` slash.
             *     - `{language}` The **language** string that the client is using.
             * @example /my-amazing-product
             */
            readonly route: string;
        };
        /** @description BC Meta payload for collection-type responses. */
        readonly IndexMeta: {
            readonly pagination?: {
                /** @example 1 */
                readonly total?: number;
                /** @example 1 */
                readonly count?: number;
                /** @example 50 */
                readonly per_page?: number;
                /** @example 1 */
                readonly current_page?: number;
                /** @example 1 */
                readonly total_pages?: number;
                readonly links?: {
                    /** @example ?page=1&limit=50 */
                    readonly previous?: string;
                    /** @example ?page=1&limit=50 */
                    readonly current?: string;
                    /** @example ?page=1&limit=50 */
                    readonly next?: string;
                };
            };
        };
        readonly Url: {
            /** @description URL of site. */
            readonly url?: string;
            /**
             * @description Specifies the URL type.
             * @enum {string}
             */
            readonly type?: "primary" | "canonical" | "checkout";
            /**
             * Format: date-time
             * @description The date-time that this URL was created, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
             * @example 2018-01-04T04:15:50.000Z
             */
            readonly created_at?: string;
            /**
             * Format: date-time
             * @description The date-time that this URL was last updated, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
             * @example 2018-01-04T04:15:50.000Z
             */
            readonly updated_at?: string;
        };
        readonly SiteCreate: {
            /**
             * @description The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
             * @example http://kittens.mybigcommerce.com/
             */
            readonly url?: string;
            /** @description The channel this site is attached to. Each site belongs to a single channel, and each channel can have either zero or one sites. */
            readonly channel_id?: number;
            readonly certificate?: components["schemas"]["CertificateWrite"];
        };
        /** CertificateWrite */
        readonly CertificateWrite: {
            /** @description The primary certificate, as a string. */
            readonly certificate?: string;
            /** @description The private key, as a string. Is a "write-only" field, will never be returned after write. */
            readonly private_key?: string;
            /** @description The intermediate certificate(s), as a string. */
            readonly intermediate_certificates?: string;
        };
        /** CertificateResponse */
        readonly CertificateResponse: {
            readonly data?: {
                /** @enum {string} */
                readonly status?: "shared" | "dedicated";
                readonly installed_certificate?: components["schemas"]["InstalledCertificateDetail"];
            };
            readonly meta?: components["schemas"]["MetaOpen"];
        };
        readonly InstallCertificateData: {
            /**
             * @description URL for the site.
             * @example kittens.mybigcommerce.com
             */
            readonly url?: string;
            readonly certificate?: components["schemas"]["CertificateWrite"];
        };
        /**
         * CertificateInfo
         * @description Details about the installed certificate, including the raw certificate data, without the private key.
         */
        readonly InstalledCertificateDetail: {
            /**
             * @description Common Name on the TLS certificate.
             * @example store.com
             */
            readonly common_name?: string;
            /**
             * @description Subject Alternative Names for which the certificate is also valid.
             * @example [
             *       "store.com",
             *       "www.store.com"
             *     ]
             */
            readonly subject_alternative_names?: readonly string[];
            /**
             * @description When does the validity period of this certificate begin? RFC 3339.
             * @example 2018-01-04T04:15:50.000Z
             */
            readonly validity_not_before?: string;
            /**
             * @description When does the validity period of this certificate end? If this date is in the past, the certificate has expired. RFC 3339.
             * @example 2018-01-04T04:15:50.000Z
             */
            readonly validity_not_after?: string;
            /** @description Signing algorithm used to sign the certificate. */
            readonly signing_algorithm?: string;
            readonly issuer?: string;
            /** @description The primary certificate, as a string. */
            readonly certificate?: string;
            /** @description The intermediate certificate(s), as a string. */
            readonly intermediate_certificates?: string;
        } | null;
        readonly ErrorResponse: components["schemas"]["BaseError"] & {
            readonly errors?: components["schemas"]["DetailedErrors"];
        };
        /** @description Error payload for the BigCommerce API.
         *      */
        readonly BaseError: {
            /**
             * @description The HTTP status code.
             *
             * @example 404
             */
            readonly status?: number;
            /** @description The error title describing the particular error.
             *      */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
        };
        /** Detailed Errors */
        readonly DetailedErrors: {
            readonly [key: string]: unknown;
        };
        /** GetCertificatesResponse */
        readonly GetCertificatesResponse: {
            readonly data?: readonly components["schemas"]["InstalledCertificateDetail"][];
            readonly meta?: components["schemas"]["MetaOpen"];
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly MetaOpen: {
            readonly [key: string]: unknown;
        };
        readonly Meta: {
            readonly pagination?: {
                /** @description The number of items skipped before starting the set of items returned. */
                readonly offset?: number;
                /** @description The maximum number of items returned per page. */
                readonly limit?: number;
                /** @description The total number of items available across all pages. */
                readonly total_items?: number;
            };
        };
    };
    responses: {
        /** @description If something happens during the request that causes it to fail, a 502 response will be returned. A new request should be made; however, it could fail. */
        readonly "502_GatewayError": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description If this occurs, you should retry the request. Typically retrying the request several times will result in a successful request; However, if you are unable to successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up (in several hours usually). */
        readonly "504_GatewayTimeout": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        readonly "403_Unauthorized": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description Malformed request syntax. Typically need to fix the JSON
         *     request body to resend successfully. */
        readonly "400_BadRequest": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description Requested resource not founded. */
        readonly "404_NotFound": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description This occurs when missing or unacceptable data is passed for one or more fields. Please correct the values for the fields listed in the errors object. */
        readonly "422_UnprocessableEntity": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["errorDetailed_Full"];
            };
        };
        /** @description If this occurs, you should retry the request. If you are unable to successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up (in several hours usually). */
        readonly "503_ServiceUnavailable": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        readonly response_Site: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["_site"];
                    readonly meta?: components["schemas"]["MetaOpen"];
                };
            };
        };
        readonly BulkErrorResponse: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    /** @description The HTTP status code. */
                    readonly status?: number;
                    readonly title?: string;
                    readonly errors?: components["schemas"]["_errors"];
                    readonly meta?: components["schemas"]["_metaEmpty"];
                    readonly type?: string;
                };
            };
        };
        readonly ErrorResponse: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    /** @description General error message */
                    readonly title?: string;
                    /** @description HTTP status code */
                    readonly status?: string;
                    readonly errors?: components["schemas"]["_errors"];
                    readonly type?: string;
                };
            };
        };
        readonly site_RespCollection: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["_site"][];
                    readonly meta?: components["schemas"]["Meta"];
                };
            };
        };
        readonly siteRoute_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["siteRoute_Full"];
                    readonly meta?: components["schemas"]["MetaOpen"];
                };
            };
        };
    };
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
        readonly SiteIdPathParam: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getSites: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of items. */
                readonly page?: number;
                /** @description Controls the number of items per page in a limited (paginated) list of items. */
                readonly limit?: number;
                /** @description A comma-separated list that returns sites by channel ID. */
                readonly "channel_id:in"?: readonly number[];
                /** @description A comma-separated list that returns sites by their URL type, specified in the `data.urls` array. */
                readonly "url_type:in"?: readonly string[];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["site_RespCollection"];
        };
    };
    readonly createSite: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["post_Site"];
            };
        };
        readonly responses: {
            readonly 201: components["responses"]["response_Site"];
            readonly 400: components["responses"]["400_BadRequest"];
            readonly 403: components["responses"]["403_Unauthorized"];
            readonly 404: components["responses"]["404_NotFound"];
            readonly 502: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 504: components["responses"]["504_GatewayTimeout"];
        };
    };
    readonly getSite: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                readonly site_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["response_Site"];
        };
    };
    readonly updateSite: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                readonly site_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["put_Site"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["response_Site"];
        };
    };
    readonly deleteSite: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                readonly site_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description No Content. */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: Record<string, unknown>;
                        readonly meta?: Record<string, unknown>;
                    };
                };
            };
        };
    };
    readonly getSiteRoutes: {
        readonly parameters: {
            readonly query?: {
                /** @description Filter routes by a specified resource type. */
                readonly type?: string;
                /** @description Specifies the page number in a limited (paginated) list of items. */
                readonly page?: number;
                /** @description Controls the number of items per page in a limited (paginated) list of items. */
                readonly limit?: number;
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                readonly site_id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["siteRoute_Full"][];
                        readonly meta?: components["schemas"]["_metaCollection"];
                    };
                };
            };
        };
    };
    readonly updateSiteRoutes: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                readonly site_id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["siteRoute_Full"][];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["siteRoute_Full"][];
                        readonly meta?: components["schemas"]["_metaCollection"];
                    };
                };
            };
            readonly 422: components["responses"]["BulkErrorResponse"];
        };
    };
    readonly createSiteRoute: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                readonly site_id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["siteRoute_Base"];
            };
        };
        readonly responses: {
            readonly 201: components["responses"]["siteRoute_Resp"];
            readonly 422: components["responses"]["ErrorResponse"];
            readonly 502: components["responses"]["502_GatewayError"];
        };
    };
    readonly getSiteRoute: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                readonly site_id: string;
                readonly route_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["siteRoute_Full"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly updateSiteRoute: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                readonly site_id: string;
                readonly route_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["siteRoutes_Route_Base"];
            };
        };
        readonly responses: {
            readonly 201: components["responses"]["siteRoute_Resp"];
        };
    };
    readonly deleteSiteRoute: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                readonly site_id: string;
                readonly route_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getSiteCertificate: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                readonly site_id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["CertificateResponse"];
                };
            };
        };
    };
    readonly upsertSiteCertificate: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                readonly site_id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["InstallCertificateData"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["EmptyResponse"];
                    readonly Example: unknown;
                };
            };
        };
    };
    readonly getSitesCertificates: {
        readonly parameters: {
            readonly query?: {
                /** @description A comma-separated list that filters certificates by one or more URLs. */
                readonly "urls:in"?: readonly string[];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["GetCertificatesResponse"];
                };
            };
        };
    };
}
