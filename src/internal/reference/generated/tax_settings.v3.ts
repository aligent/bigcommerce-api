/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/tax/settings": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Tax Settings
         * @description Retrieves global-level tax settings.
         */
        readonly get: operations["getTaxSettings"];
        /**
         * Update Tax Settings
         * @description Updates global-level tax settings.
         */
        readonly put: operations["updateTaxSettings"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        readonly Tax_Settings: {
            /** @description Whether prices entered on this store include a tax component or not. */
            readonly tax_entered_with_prices?: boolean;
            /** @description Settings that describe how prices display at the global level. */
            readonly price_display_settings?: {
                /**
                 * @description Whether to show prices as tax inclusive or tax exclusive in the BigCommerce control panel, or use the order's tax zone for price display.
                 * @enum {string}
                 */
                readonly control_panel_price_display_strategy?: "ZONE" | "INCLUSIVE" | "EXCLUSIVE";
                /**
                 * @description Whether to show prices as tax inclusive or tax exclusive across all invoices, or use the shopper始s tax zone for price display on invoices.
                 * @default ZONE
                 * @enum {string}
                 */
                readonly invoice_price_display_strategy: "ZONE" | "INCLUSIVE" | "EXCLUSIVE";
            };
            /**
             * @description Describes the fallback behavior that applies when a tax provider produces an error. A merchant may decide to use a flat 10% fallback tax rate, their basic tax settings, or to block the transaction until they achieve a successful result.
             * @default FIXED
             * @enum {string}
             */
            readonly fallback_strategy: "FIXED" | "BASIC" | "DISABLE";
            /**
             * @description This setting applies only if a merchant enters tax-inclusive prices. When enabled, the store subtracts the item始s store tax rate before calculating tax using the shopper始s tax zone. The tax-exclusive amount will be the same across all tax zones. When disabled, the tax-inclusive price remains the same across all tax zones; only the tax amount will vary based on the shopper始s location. The tax-exclusive amount may vary among tax zones. These calculations are relevant for tax pricing and tax quotations that use basic tax.
             * @default true
             */
            readonly should_subtract_store_tax: boolean;
            /**
             * @description This setting determines which tax zone a store uses to estimate tax for guest shoppers. When enabled, the store identifies a country-level tax zone based on the geolocation of a guest shopper. The store then applies the corresponding tax zone to estimate taxes. When disabled, the store identifies the zone using the provided `guest_shopper_tax_zone_id` field instead. Only the tax zones you configure can be matched to the guest shopper's geolocation.
             * @default false
             */
            readonly should_use_geolocation_to_determine_guest_shopper_tax_zone: boolean;
            /**
             * @description ID for the tax zone a store uses when estimating tax for guest shoppers. The store uses this zone if you disable `should_use_geolocation_to_determine_guest_shopper_tax_zone`. The store also uses this zone if there is no matching country-level tax zone for the geolocation.
             * @default 1
             */
            readonly guest_shopper_tax_zone_id: number;
            /**
             * @description ID for the tax zone a store uses when subtracting store tax. This setting applies only if a merchant enters tax-inclusive prices and subtracts store tax before tax calculation.
             * @default 1
             */
            readonly store_tax_zone_id: number;
            /**
             * @description This setting determines whether BigCommerce submits tax documents to third-party tax providers when orders are created or when payments are captured online.
             * @default ON_PAYMENT_CAPTURE
             * @enum {string}
             */
            readonly document_submission_strategy: "ON_PAYMENT_CAPTURE" | "ON_ORDER_CREATION";
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly MetaOpen: {
            readonly [key: string]: unknown;
        };
    };
    responses: never;
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getTaxSettings: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Tax_Settings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
        };
    };
    readonly updateTaxSettings: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["Tax_Settings"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["Tax_Settings"];
                        readonly meta?: components["schemas"]["MetaOpen"];
                    };
                };
            };
            /** @description The request body does not meet the specification. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
