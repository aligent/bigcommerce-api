/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/catalog/products/{product_id}/modifiers": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the product to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get all product modifiers
         * @description Returns a list of all product modifiers. Optional parameters can be passed in.
         */
        readonly get: operations["getProductModifiers"];
        /**
         * Create a product modifier
         * @description Creates a product modifier.
         *
         *     **Required Fields**
         *     * `required`
         *     * `display_name`
         *     * `type`
         *
         *     **Read-Only Fields**
         *     * `id`
         *
         *     **Notes**
         *     It takes two separate requests to create a new checkbox modifier with option values. Perform a request to create a modifier, then perform a second request to update option values.
         */
        readonly post: operations["createProductModifier"];
    };
    readonly "/catalog/products/{product_id}/modifiers/{modifier_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the product to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the product modifier.
                 *      */
                readonly modifier_id: components["parameters"]["ModifierIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a product modifier
         * @description Returns a single product modifier. Optional parameters can be passed in.
         */
        readonly get: operations["getProductModifier"];
        /**
         * Update a product modifier
         * @description Updates a product modifier.
         */
        readonly put: operations["updateProductModifier"];
        /**
         * Delete a product modifier
         * @description Deletes a product modifier.
         */
        readonly delete: operations["deleteProductModifier"];
    };
    readonly "/catalog/products/{product_id}/modifiers/{modifier_id}/values": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the product to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the product modifier.
                 *      */
                readonly modifier_id: components["parameters"]["ModifierIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get all product modifier values
         * @description Returns a list of all product *Modifier Values*. Optional parameters can be passed in.
         */
        readonly get: operations["getProductModifierValues"];
        /**
         * Create product modifier value
         * @description Creates a modifier value.
         *
         *     **Required Fields**
         *     * label
         *     * sort_order
         *
         *     **Read-Only Fields**
         *     * id
         */
        readonly post: operations["createProductModifierValue"];
    };
    readonly "/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the product to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the product modifier.
                 *      */
                readonly modifier_id: components["parameters"]["ModifierIdParam"];
                /** @description The ID of the product modifier value.
                 *      */
                readonly value_id: components["parameters"]["ValueIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a product modifier value
         * @description Returns a single modifier value. Optional parameters can be passed in.
         */
        readonly get: operations["getProductModifierValue"];
        /**
         * Update a product modifier value
         * @description Updates a modifier value.
         *
         *     **Required Fields**
         *     * none
         *
         *     **Read-Only Fields**
         *     * id
         */
        readonly put: operations["updateProductModifierValue"];
        /**
         * Delete product modifier value
         * @description Deletes a modifier value.
         */
        readonly delete: operations["deleteProductModifierValue"];
    };
    readonly "/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the product to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the product modifier.
                 *      */
                readonly modifier_id: components["parameters"]["ModifierIdParam"];
                /** @description The ID of the product modifier value.
                 *      */
                readonly value_id: components["parameters"]["ValueIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Create product modifier Image
         * @description Creates a *Modifier Image*.
         *
         *     The image will show on the storefront when the value is selected.
         *
         *      **Required Fields**
         *     - image_file: Form posts are the only accepted upload option.
         */
        readonly post: operations["createProductModifierImage"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * productModifier_Base
         * @description Common Modifier properties.
         */
        readonly productModifier_Base: {
            /**
             * @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST.
             *
             * @enum {string}
             */
            readonly type: "date" | "checkbox" | "file" | "text" | "multi_line_text" | "numbers_only_text" | "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
            /** @description Whether or not this modifier is required at checkout. Required in a /POST.
             *      */
            readonly required: boolean;
            /** @description The order the modifiers display on the product detail page. */
            readonly sort_order?: number;
            readonly config?: components["schemas"]["config_Full"];
            /** @description The name of the option shown on the storefront. */
            readonly display_name?: string;
        };
        /**
         * productModifier_Post
         * @description Common Modifier properties.
         */
        readonly productModifier_Post: {
            /**
             * @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST.
             *
             * @enum {string}
             */
            readonly type: "date" | "checkbox" | "file" | "text" | "multi_line_text" | "numbers_only_text" | "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
            /** @description Whether or not this modifier is required at checkout. Required in a /POST.
             *      */
            readonly required: boolean;
            /** @description The order the modifiers display on the product detail page. */
            readonly sort_order?: number;
            readonly config?: components["schemas"]["config_Full"];
            readonly option_values?: readonly {
                /** @description The unique numeric ID of the value; increments sequentially.
                 *      */
                readonly id?: number;
                /**
                 * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                 *
                 * @example false
                 */
                readonly is_default?: boolean;
                /** @description Adjuster for Complex Rules. */
                readonly adjusters?: {
                    readonly price?: {
                        /** @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                         *       enum:
                         *         - relative
                         *         - percentage
                         *       x-nullable: true
                         *      */
                        readonly adjuster?: string;
                        /**
                         * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                         *
                         * @example 5
                         */
                        readonly adjuster_value?: number;
                    };
                };
            }[];
            /** @description The name of the option shown on the storefront. */
            readonly display_name: string;
        };
        /**
         * productModifier_Full
         * @description Product modifier
         */
        readonly productModifier_Full: components["schemas"]["productModifier_Base"] & {
            /**
             * @description The unique numeric ID of the modifier; increments sequentially.
             *
             * @example 12
             */
            readonly id?: number;
            /**
             * @description The unique numeric ID of the product to which the option belongs.
             *
             * @example 77
             */
            readonly product_id?: number;
            /**
             * @description The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
             *
             * @example Add-a-$5-Donation1535039590-191
             */
            readonly name?: string;
            readonly option_values?: readonly components["schemas"]["productModifierOptionValue_Full"][];
        };
        /**
         * productModifierOptionValue_Base
         * @description Common Product modifier `option_value` properties.
         */
        readonly productModifierOptionValue_Base: {
            /**
             * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
             *
             * @example false
             */
            readonly is_default?: boolean;
            /**
             * @description The text display identifying the value on the storefront. Required in a /POST.
             *
             * @example Green
             */
            readonly label: string;
            /**
             * @description The order in which the value will be displayed on the product page. Required in a /POST.
             *
             * @example 0
             */
            readonly sort_order: number;
            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexadecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`.
             *      */
            readonly value_data?: Record<string, unknown> | null;
            readonly adjusters?: components["schemas"]["adjusters_Full"];
        };
        /**
         * productModifierOptionValue_Full
         * @description Product modifier `option_value`.
         */
        readonly productModifierOptionValue_Full: components["schemas"]["productModifierOptionValue_Base"] & {
            /** @description The unique numeric ID of the value; increments sequentially.
             *      */
            readonly id?: number;
            readonly option_id?: number;
        };
        /**
         * adjuster_Full
         * @description Adjuster for Complex Rules.
         */
        readonly adjuster_Full: {
            /**
             * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @enum {string|null}
             */
            readonly adjuster?: "relative" | "percentage" | null;
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            readonly adjuster_value?: number;
        };
        /**
         * metaCollection_Full
         * @description Data about the response, including pagination and collection totals.
         */
        readonly metaCollection_Full: {
            readonly pagination?: components["schemas"]["pagination_Full"];
        };
        /**
         * pagination_Full
         * @description Data about the response, including pagination and collection totals.
         */
        readonly pagination_Full: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 36
             */
            readonly total?: number;
            /**
             * @description Total number of items in the collection response.
             *
             * @example 36
             */
            readonly count?: number;
            /**
             * @description The amount of items returned in the collection per page, controlled by the limit parameter.
             *
             * @example 50
             */
            readonly per_page?: number;
            /**
             * @description The page you are currently on within the collection.
             *
             * @example 1
             */
            readonly current_page?: number;
            /**
             * @description The total number of pages in the collection.
             *
             * @example 1
             */
            readonly total_pages?: number;
            /** @description Pagination links for the previous and next parts of the whole collection.
             *      */
            readonly links?: {
                /** @description Link to the previous page returned in the response.
                 *      */
                readonly previous?: string;
                /**
                 * @description Link to the current page returned in the response.
                 *
                 * @example ?page=1&limit=50
                 */
                readonly current?: string;
                /** @description Link to the next page returned in the response.
                 *      */
                readonly next?: string;
            };
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly metaEmpty_Full: {
            readonly [key: string]: unknown;
        };
        /**
         * config_Full
         * @description The values for option config can vary based on the Modifier created.
         */
        readonly config_Full: {
            /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.
             *      */
            readonly default_value?: string;
            /** @description (checkbox) Flag for setting the checkbox to be checked by default.
             *      */
            readonly checked_by_default?: boolean;
            /** @description (checkbox) Label displayed for the checkbox option.
             *      */
            readonly checkbox_label?: string;
            /** @description (date) Flag to limit the dates allowed to be entered on a date option.
             *      */
            readonly date_limited?: boolean;
            /**
             * @description (date) The type of limit that is allowed to be entered on a date option.
             *
             * @example range
             * @enum {string}
             */
            readonly date_limit_mode?: "earliest" | "range" | "latest";
            /**
             * Format: date
             * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             */
            readonly date_earliest_value?: string;
            /**
             * Format: date
             * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             */
            readonly date_latest_value?: string;
            /**
             * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
             *
             * @example specific
             * @enum {string}
             */
            readonly file_types_mode?: "specific" | "all";
            /** @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *       `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *       `other` - Allows file types defined in the `file_types_other` array.
             *      */
            readonly file_types_supported?: readonly string[];
            /** @description (file) A list of other file types allowed with the file upload option.
             *      */
            readonly file_types_other?: readonly string[];
            /**
             * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
             *
             * @example 5
             */
            readonly file_max_size?: number;
            /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
             *      */
            readonly text_characters_limited?: boolean;
            /**
             * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
             *
             * @example 1
             */
            readonly text_min_length?: number;
            /**
             * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
             *
             * @example 55
             */
            readonly text_max_length?: number;
            /**
             * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
             *
             * @example true
             */
            readonly text_lines_limited?: boolean;
            /**
             * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
             *
             * @example 4
             */
            readonly text_max_lines?: number;
            /**
             * @description (numbers_only_text) Flag to limit the value of a number option.
             *
             * @example true
             */
            readonly number_limited?: boolean;
            /**
             * @description (numbers_only_text) The type of limit on values entered for a number option.
             *
             * @example lowest
             * @enum {string}
             */
            readonly number_limit_mode?: "lowest" | "highest" | "range";
            /**
             * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
             *
             * @example 100
             */
            readonly number_lowest_value?: number;
            /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
             *      */
            readonly number_highest_value?: number;
            /**
             * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
             *
             * @example false
             */
            readonly number_integers_only?: boolean;
            /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
             *      */
            readonly product_list_adjusts_inventory?: boolean;
            /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
             *      */
            readonly product_list_adjusts_pricing?: boolean;
            /**
             * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
             *
             * @example weight
             * @enum {string}
             */
            readonly product_list_shipping_calc?: "none" | "weight" | "package";
        };
        /** adjusters_Full */
        readonly adjusters_Full: {
            readonly price?: components["schemas"]["adjuster_Full"];
            readonly weight?: components["schemas"]["adjuster_Full"];
            /**
             * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
             *
             * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
             */
            readonly image_url?: string;
            readonly purchasing_disabled?: {
                /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.
                 *      */
                readonly status?: boolean;
                /** @description The message displayed on the storefront when the purchasing disabled status is `true`.
                 *      */
                readonly message?: string;
            };
        };
    };
    responses: never;
    parameters: {
        /** @description The ID of the product to which the resource belongs.
         *      */
        readonly ProductIdParam: number;
        /** @description The ID of the product modifier.
         *      */
        readonly ModifierIdParam: number;
        /** @description The ID of the product modifier value.
         *      */
        readonly ValueIdParam: number;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
        /** @description Specifies the page number in a limited (paginated) list of products.
         *      */
        readonly PageParam: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products.
         *      */
        readonly LimitParam: number;
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly IncludeFieldsParam: readonly string[];
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly ExcludeFieldsParam: readonly string[];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getProductModifiers: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the product to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "id": 206,
                     *           "product_id": 158,
                     *           "name": "Insurance",
                     *           "display_name": "Insurance",
                     *           "type": "checkbox",
                     *           "required": true,
                     *           "config": {
                     *             "checkbox_label": "$5 for insurance",
                     *             "checked_by_default": false
                     *           },
                     *           "option_values": [
                     *             {
                     *               "id": 183,
                     *               "option_id": 206,
                     *               "label": "Yes",
                     *               "sort_order": 0,
                     *               "value_data": {
                     *                 "checked_value": true
                     *               },
                     *               "is_default": false,
                     *               "adjusters": {
                     *                 "price": {},
                     *                 "weight": {},
                     *                 "image_url": "",
                     *                 "purchasing_disabled": {
                     *                   "status": false,
                     *                   "message": ""
                     *                 }
                     *               }
                     *             },
                     *             {
                     *               "id": 184,
                     *               "option_id": 206,
                     *               "label": "No",
                     *               "sort_order": 1,
                     *               "value_data": {
                     *                 "checked_value": false
                     *               },
                     *               "is_default": true,
                     *               "adjusters": {
                     *                 "price": {},
                     *                 "weight": {},
                     *                 "image_url": "",
                     *                 "purchasing_disabled": {
                     *                   "status": false,
                     *                   "message": ""
                     *                 }
                     *               }
                     *             }
                     *           ]
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "total": 1,
                     *           "count": 1,
                     *           "per_page": 50,
                     *           "current_page": 1,
                     *           "total_pages": 1,
                     *           "links": {
                     *             "current": "?page=1&limit=50"
                     *           }
                     *         }
                     *       }
                     *     } */
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["productModifier_Full"][];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
        };
    };
    readonly createProductModifier: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the product to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                /** @example {
                 *       "type": "radio_buttons",
                 *       "required": true,
                 *       "sort_order": 0,
                 *       "option_values": [
                 *         {
                 *           "is_default": false,
                 *           "label": "+5",
                 *           "sort_order": 0,
                 *           "value_data": {},
                 *           "adjusters": {
                 *             "price": {
                 *               "adjuster": "relative",
                 *               "adjuster_value": 5
                 *             },
                 *             "weight": {
                 *               "adjuster": "relative",
                 *               "adjuster_value": 5
                 *             },
                 *             "purchasing_disabled": {
                 *               "status": true,
                 *               "message": "string"
                 *             }
                 *           }
                 *         },
                 *         {
                 *           "is_default": false,
                 *           "label": "+10",
                 *           "sort_order": 0,
                 *           "value_data": {},
                 *           "adjusters": {
                 *             "price": {
                 *               "adjuster": "relative",
                 *               "adjuster_value": 10
                 *             },
                 *             "weight": {
                 *               "adjuster": "relative",
                 *               "adjuster_value": 10
                 *             },
                 *             "purchasing_disabled": {
                 *               "status": true,
                 *               "message": "string"
                 *             }
                 *           }
                 *         }
                 *       ],
                 *       "display_name": "Donation"
                 *     } */
                readonly "application/json": components["schemas"]["productModifier_Post"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 164,
                     *         "product_id": 161,
                     *         "name": "Test-name1716906851-161",
                     *         "display_name": "Test name",
                     *         "type": "radio_buttons",
                     *         "required": true,
                     *         "sort_order": 0,
                     *         "config": [],
                     *         "option_values": [
                     *           {
                     *             "id": 199,
                     *             "option_id": 164,
                     *             "label": "+5",
                     *             "sort_order": 0,
                     *             "value_data": null,
                     *             "is_default": false,
                     *             "adjusters": {
                     *               "price": {
                     *                 "adjuster": "relative",
                     *                 "adjuster_value": 5
                     *               },
                     *               "weight": {
                     *                 "adjuster": "relative",
                     *                 "adjuster_value": 5
                     *               },
                     *               "image_url": "",
                     *               "purchasing_disabled": {
                     *                 "status": true,
                     *                 "message": "string"
                     *               }
                     *             }
                     *           },
                     *           {
                     *             "id": 200,
                     *             "option_id": 164,
                     *             "label": "+10",
                     *             "sort_order": 0,
                     *             "value_data": null,
                     *             "is_default": false,
                     *             "adjusters": {
                     *               "price": {
                     *                 "adjuster": "relative",
                     *                 "adjuster_value": 10
                     *               },
                     *               "weight": {
                     *                 "adjuster": "relative",
                     *                 "adjuster_value": 10
                     *               },
                     *               "image_url": "",
                     *               "purchasing_disabled": {
                     *                 "status": true,
                     *                 "message": "string"
                     *               }
                     *             }
                     *           }
                     *         ]
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: {
                            readonly items?: components["schemas"]["productModifier_Full"];
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The `Modifier` was in conflict with another option. This is the result of duplicate unique fields, such as `name`.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description The `Modifier` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly getProductModifier: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the product to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the product modifier.
                 *      */
                readonly modifier_id: components["parameters"]["ModifierIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["productModifier_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly updateProductModifier: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the product to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the product modifier.
                 *      */
                readonly modifier_id: components["parameters"]["ModifierIdParam"];
            };
            readonly cookie?: never;
        };
        /** @description Common Modifier properties. */
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST.
                     *
                     * @enum {string}
                     */
                    readonly type: "date" | "checkbox" | "file" | "text" | "multi_line_text" | "numbers_only_text" | "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
                    /** @description Whether or not this modifier is required at checkout. Required in a /POST.
                     *      */
                    readonly required: boolean;
                    /** @description The order the modifiers display on the product detail page. */
                    readonly sort_order?: number;
                    /** @description The values for option config can vary based on the Modifier created. */
                    readonly config?: {
                        /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.
                         *      */
                        readonly default_value?: string;
                        /** @description (checkbox) Flag for setting the checkbox to be checked by default.
                         *      */
                        readonly checked_by_default?: boolean;
                        /** @description (checkbox) Label displayed for the checkbox option.
                         *      */
                        readonly checkbox_label?: string;
                        /** @description (date) Flag to limit the dates allowed to be entered on a date option.
                         *      */
                        readonly date_limited?: boolean;
                        /**
                         * @description (date) The type of limit that is allowed to be entered on a date option.
                         *
                         * @example range
                         * @enum {string}
                         */
                        readonly date_limit_mode?: "earliest" | "range" | "latest";
                        /**
                         * Format: date
                         * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                         *
                         */
                        readonly date_earliest_value?: string;
                        /**
                         * Format: date
                         * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                         *
                         */
                        readonly date_latest_value?: string;
                        /**
                         * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
                         *
                         * @example specific
                         * @enum {string}
                         */
                        readonly file_types_mode?: "specific" | "all";
                        /** @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                         *       `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                         *       `other` - Allows file types defined in the `file_types_other` array.
                         *      */
                        readonly file_types_supported?: readonly string[];
                        /** @description (file) A list of other file types allowed with the file upload option.
                         *      */
                        readonly file_types_other?: readonly string[];
                        /**
                         * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
                         *
                         * @example 5
                         */
                        readonly file_max_size?: number;
                        /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
                         *      */
                        readonly text_characters_limited?: boolean;
                        /**
                         * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
                         *
                         * @example 1
                         */
                        readonly text_min_length?: number;
                        /**
                         * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
                         *
                         * @example 55
                         */
                        readonly text_max_length?: number;
                        /**
                         * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
                         *
                         * @example true
                         */
                        readonly text_lines_limited?: boolean;
                        /**
                         * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
                         *
                         * @example 4
                         */
                        readonly text_max_lines?: number;
                        /**
                         * @description (numbers_only_text) Flag to limit the value of a number option.
                         *
                         * @example true
                         */
                        readonly number_limited?: boolean;
                        /**
                         * @description (numbers_only_text) The type of limit on values entered for a number option.
                         *
                         * @example lowest
                         * @enum {string}
                         */
                        readonly number_limit_mode?: "lowest" | "highest" | "range";
                        /**
                         * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
                         *
                         * @example 100
                         */
                        readonly number_lowest_value?: number;
                        /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
                         *      */
                        readonly number_highest_value?: number;
                        /**
                         * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
                         *
                         * @example false
                         */
                        readonly number_integers_only?: boolean;
                        /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
                         *      */
                        readonly product_list_adjusts_inventory?: boolean;
                        /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
                         *      */
                        readonly product_list_adjusts_pricing?: boolean;
                        /**
                         * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
                         *
                         * @example weight
                         * @enum {string}
                         */
                        readonly product_list_shipping_calc?: "none" | "weight" | "package";
                    };
                    /** @description Part of Modifier Value Response  */
                    readonly option_values?: readonly {
                        /** @description The unique numeric ID of the value; increments sequentially.
                         *      */
                        readonly id?: number;
                        /**
                         * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                         *
                         * @example false
                         */
                        readonly is_default?: boolean;
                        readonly adjusters?: {
                            /** @description Adjuster for Complex Rules. */
                            readonly price?: {
                                /**
                                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                 *
                                 * @enum {string}
                                 */
                                readonly adjuster?: "relative" | "percentage";
                                /**
                                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                 *
                                 * @example 5
                                 */
                                readonly adjuster_value?: number;
                            };
                        };
                    }[];
                    /**
                     * @description The name of the option shown on the storefront.
                     *
                     * @example Donation
                     */
                    readonly display_name?: string;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /**
                         * Modifier
                         * @description Product modifier
                         */
                        readonly data?: {
                            /**
                             * @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST.
                             *
                             * @enum {string}
                             */
                            readonly type: "date" | "checkbox" | "file" | "text" | "multi_line_text" | "numbers_only_text" | "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
                            /** @description Whether or not this modifier is required at checkout. Required in a /POST.
                             *      */
                            readonly required: boolean;
                            /** @description The order the modifiers display on the product detail page. */
                            readonly sort_order?: number;
                            /**
                             * Option Config
                             * @description The values for option config can vary based on the Modifier created.
                             */
                            readonly config?: {
                                /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.
                                 *      */
                                readonly default_value?: string;
                                /** @description (checkbox) Flag for setting the checkbox to be checked by default.
                                 *      */
                                readonly checked_by_default?: boolean;
                                /** @description (checkbox) Label displayed for the checkbox option.
                                 *      */
                                readonly checkbox_label?: string;
                                /** @description (date) Flag to limit the dates allowed to be entered on a date option.
                                 *      */
                                readonly date_limited?: boolean;
                                /**
                                 * @description (date) The type of limit that is allowed to be entered on a date option.
                                 *
                                 * @example range
                                 * @enum {string}
                                 */
                                readonly date_limit_mode?: "earliest" | "range" | "latest";
                                /**
                                 * Format: date
                                 * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                                 *
                                 */
                                readonly date_earliest_value?: string;
                                /**
                                 * Format: date
                                 * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                                 *
                                 */
                                readonly date_latest_value?: string;
                                /**
                                 * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
                                 *
                                 * @example specific
                                 * @enum {string}
                                 */
                                readonly file_types_mode?: "specific" | "all";
                                /** @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                                 *       `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                                 *       `other` - Allows file types defined in the `file_types_other` array.
                                 *      */
                                readonly file_types_supported?: readonly string[];
                                /** @description (file) A list of other file types allowed with the file upload option.
                                 *      */
                                readonly file_types_other?: readonly string[];
                                /**
                                 * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
                                 *
                                 * @example 5
                                 */
                                readonly file_max_size?: number;
                                /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
                                 *      */
                                readonly text_characters_limited?: boolean;
                                /**
                                 * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
                                 *
                                 * @example 1
                                 */
                                readonly text_min_length?: number;
                                /**
                                 * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
                                 *
                                 * @example 55
                                 */
                                readonly text_max_length?: number;
                                /**
                                 * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
                                 *
                                 * @example true
                                 */
                                readonly text_lines_limited?: boolean;
                                /**
                                 * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
                                 *
                                 * @example 4
                                 */
                                readonly text_max_lines?: number;
                                /**
                                 * @description (numbers_only_text) Flag to limit the value of a number option.
                                 *
                                 * @example true
                                 */
                                readonly number_limited?: boolean;
                                /**
                                 * @description (numbers_only_text) The type of limit on values entered for a number option.
                                 *
                                 * @example lowest
                                 * @enum {string}
                                 */
                                readonly number_limit_mode?: "lowest" | "highest" | "range";
                                /**
                                 * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
                                 *
                                 * @example 100
                                 */
                                readonly number_lowest_value?: number;
                                /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
                                 *      */
                                readonly number_highest_value?: number;
                                /**
                                 * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
                                 *
                                 * @example false
                                 */
                                readonly number_integers_only?: boolean;
                                /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
                                 *      */
                                readonly product_list_adjusts_inventory?: boolean;
                                /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
                                 *      */
                                readonly product_list_adjusts_pricing?: boolean;
                                /**
                                 * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
                                 *
                                 * @example weight
                                 * @enum {string}
                                 */
                                readonly product_list_shipping_calc?: "none" | "weight" | "package";
                            };
                            readonly option_values?: readonly {
                                /**
                                 * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                                 *
                                 * @example false
                                 */
                                readonly is_default?: boolean;
                                /**
                                 * @description The text display identifying the value on the storefront. Required in a /POST.
                                 *
                                 * @example Green
                                 */
                                readonly label: string;
                                /**
                                 * @description The order in which the value will be displayed on the product page. Required in a /POST.
                                 *
                                 * @example 0
                                 */
                                readonly sort_order: number;
                                /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexadecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
                                 *      */
                                readonly value_data?: Record<string, unknown>;
                                readonly adjusters?: {
                                    /** @description Adjuster for Complex Rules. */
                                    readonly price?: {
                                        /**
                                         * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                         *
                                         * @enum {string}
                                         */
                                        readonly adjuster?: "relative" | "percentage";
                                        /**
                                         * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                         *
                                         * @example 5
                                         */
                                        readonly adjuster_value?: number;
                                    };
                                    /** @description Adjuster for Complex Rules. */
                                    readonly weight?: {
                                        /**
                                         * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                         *
                                         * @enum {string}
                                         */
                                        readonly adjuster?: "relative" | "percentage";
                                        /**
                                         * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                         *
                                         * @example 5
                                         */
                                        readonly adjuster_value?: number;
                                    };
                                    /**
                                     * @description The URL for an image displayed on the storefront when the modifier value is selected. Limit of 8MB per file.
                                     *
                                     * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                                     */
                                    readonly image_url?: string;
                                    readonly purchasing_disabled?: {
                                        /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.
                                         *      */
                                        readonly status?: boolean;
                                        /** @description The message displayed on the storefront when the purchasing disabled status is `true'.
                                         *      */
                                        readonly message?: string;
                                    };
                                };
                                /** @description The unique numeric ID of the value; increments sequentially.
                                 *      */
                                readonly id?: number;
                            }[];
                        } & {
                            /**
                             * @description The unique numeric ID of the modifier; increments sequentially.
                             *
                             * @example 12
                             */
                            readonly id?: number;
                            /**
                             * @description The unique numeric ID of the product to which the option belongs.
                             *
                             * @example 77
                             */
                            readonly product_id?: number;
                            /**
                             * @description The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
                             *
                             * @example Add-a-$5-Donation1535039590-191
                             */
                            readonly name?: string;
                            /**
                             * @description The name of the option shown on the storefront.
                             *
                             * @example Donation
                             */
                            readonly display_name?: string;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The `Modifier` was in conflict with another modifier or option. This is the result of duplicate unique fields, such as `name`.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description The `Modifier` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly deleteProductModifier: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the product to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the product modifier.
                 *      */
                readonly modifier_id: components["parameters"]["ModifierIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getProductModifierValues: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the product to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the product modifier.
                 *      */
                readonly modifier_id: components["parameters"]["ModifierIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "id": 190,
                     *           "option_id": 222,
                     *           "label": "Yes",
                     *           "sort_order": 0,
                     *           "value_data": {
                     *             "checked_value": true
                     *           },
                     *           "is_default": false,
                     *           "adjusters": {
                     *             "price": {
                     *               "adjuster": "relative",
                     *               "adjuster_value": 5
                     *             },
                     *             "weight": {},
                     *             "image_url": "",
                     *             "purchasing_disabled": {
                     *               "status": false,
                     *               "message": ""
                     *             }
                     *           }
                     *         },
                     *         {
                     *           "id": 191,
                     *           "option_id": 222,
                     *           "label": "No",
                     *           "sort_order": 1,
                     *           "value_data": {
                     *             "checked_value": false
                     *           },
                     *           "is_default": true,
                     *           "adjusters": {
                     *             "price": {},
                     *             "weight": {},
                     *             "image_url": "",
                     *             "purchasing_disabled": {
                     *               "status": false,
                     *               "message": ""
                     *             }
                     *           }
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "total": 2,
                     *           "count": 2,
                     *           "per_page": 50,
                     *           "current_page": 1,
                     *           "total_pages": 1,
                     *           "links": {
                     *             "current": "?page=1&limit=50"
                     *           }
                     *         }
                     *       }
                     *     } */
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["productModifierOptionValue_Full"][];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
        };
    };
    readonly createProductModifierValue: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the product to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the product modifier.
                 *      */
                readonly modifier_id: components["parameters"]["ModifierIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                     *
                     * @example false
                     */
                    readonly is_default?: boolean;
                    /**
                     * @description The text display identifying the value on the storefront. Required in a /POST.
                     *
                     * @example Green
                     */
                    readonly label: string;
                    /**
                     * @description The order in which the value will be displayed on the product page. Required in a /POST.
                     *
                     * @example 0
                     */
                    readonly sort_order: number;
                    /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexadecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
                     *      */
                    readonly value_data?: Record<string, unknown>;
                } & {
                    readonly adjusters?: {
                        /**
                         * Adjuster
                         * @description Adjuster for Complex Rules.
                         */
                        readonly price?: {
                            /**
                             * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                             *
                             * @enum {string|null}
                             */
                            readonly adjuster?: "relative" | "percentage" | null;
                            /**
                             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                             *
                             * @example 5
                             */
                            readonly adjuster_value?: number;
                        };
                        /**
                         * Adjuster
                         * @description Adjuster for Complex Rules.
                         */
                        readonly weight?: {
                            /**
                             * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                             *
                             * @enum {string|null}
                             */
                            readonly adjuster?: "relative" | "percentage" | null;
                            /**
                             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                             *
                             * @example 5
                             */
                            readonly adjuster_value?: number;
                        };
                        /**
                         * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                         *
                         * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                         */
                        readonly image_url?: string;
                        readonly purchasing_disabled?: {
                            /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.
                             *      */
                            readonly status?: boolean;
                            /** @description The message displayed on the storefront when the purchasing disabled status is `true`.
                             *      */
                            readonly message?: string;
                        };
                    };
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 190,
                     *         "option_id": 222,
                     *         "label": "Yes",
                     *         "sort_order": 0,
                     *         "value_data": {},
                     *         "is_default": false,
                     *         "adjusters": {
                     *           "price": {
                     *             "adjuster": "relative",
                     *             "adjuster_value": 5
                     *           },
                     *           "weight": {},
                     *           "image_url": "",
                     *           "purchasing_disabled": {
                     *             "status": false,
                     *             "message": ""
                     *           }
                     *         }
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        /**
                         * Modifier Value
                         * @description Part of Modifier Value Response
                         */
                        readonly data?: ({
                            /**
                             * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                             *
                             * @example false
                             */
                            readonly is_default?: boolean;
                            /**
                             * @description The text display identifying the value on the storefront. Required in a /POST.
                             *
                             * @example Green
                             */
                            readonly label: string;
                            /**
                             * @description The order in which the value will be displayed on the product page. Required in a /POST.
                             *
                             * @example 0
                             */
                            readonly sort_order: number;
                            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexadecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
                             *      */
                            readonly value_data?: Record<string, unknown>;
                        } & {
                            readonly adjusters?: {
                                /**
                                 * Adjuster
                                 * @description Adjuster for Complex Rules.
                                 */
                                readonly price?: {
                                    /**
                                     * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                     *
                                     * @enum {string}
                                     */
                                    readonly adjuster?: "relative" | "percentage";
                                    /**
                                     * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                     *
                                     * @example 5
                                     */
                                    readonly adjuster_value?: number;
                                };
                                /**
                                 * Adjuster
                                 * @description Adjuster for Complex Rules.
                                 */
                                readonly weight?: {
                                    /**
                                     * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                     *
                                     * @enum {string}
                                     */
                                    readonly adjuster?: "relative" | "percentage";
                                    /**
                                     * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                     *
                                     * @example 5
                                     */
                                    readonly adjuster_value?: number;
                                };
                                /**
                                 * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                                 *
                                 * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                                 */
                                readonly image_url?: string;
                                readonly purchasing_disabled?: {
                                    /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.
                                     *      */
                                    readonly status?: boolean;
                                    /** @description The message displayed on the storefront when the purchasing disabled status is `true`.
                                     *      */
                                    readonly message?: string;
                                };
                            };
                        }) & {
                            /** @description The unique numeric ID of the value; increments sequentially.
                             *      */
                            readonly id?: number;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The `ModifierValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly getProductModifierValue: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the product to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the product modifier.
                 *      */
                readonly modifier_id: components["parameters"]["ModifierIdParam"];
                /** @description The ID of the product modifier value.
                 *      */
                readonly value_id: components["parameters"]["ValueIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 190,
                     *         "option_id": 222,
                     *         "label": "Yes",
                     *         "sort_order": 0,
                     *         "value_data": {},
                     *         "is_default": false,
                     *         "adjusters": {
                     *           "price": {
                     *             "adjuster": "relative",
                     *             "adjuster_value": 5
                     *           },
                     *           "weight": {},
                     *           "image_url": "",
                     *           "purchasing_disabled": {
                     *             "status": false,
                     *             "message": ""
                     *           }
                     *         }
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: components["schemas"]["productModifierOptionValue_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly updateProductModifierValue: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the product to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the product modifier.
                 *      */
                readonly modifier_id: components["parameters"]["ModifierIdParam"];
                /** @description The ID of the product modifier value.
                 *      */
                readonly value_id: components["parameters"]["ValueIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": ({
                    /**
                     * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                     *
                     * @example false
                     */
                    readonly is_default?: boolean;
                    /**
                     * @description The text display identifying the value on the storefront. Required in a /POST.
                     *
                     * @example Green
                     */
                    readonly label: string;
                    /**
                     * @description The order in which the value will be displayed on the product page. Required in a /POST.
                     *
                     * @example 0
                     */
                    readonly sort_order: number;
                    /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexadecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
                     *      */
                    readonly value_data?: Record<string, unknown>;
                } & {
                    readonly adjusters?: {
                        /**
                         * Adjuster
                         * @description Adjuster for Complex Rules.
                         */
                        readonly price?: {
                            /**
                             * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                             *
                             * @enum {string|null}
                             */
                            readonly adjuster?: "relative" | "percentage" | null;
                            /**
                             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                             *
                             * @example 5
                             */
                            readonly adjuster_value?: number;
                        };
                        /**
                         * Adjuster
                         * @description Adjuster for Complex Rules.
                         */
                        readonly weight?: {
                            /**
                             * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                             *
                             * @enum {string|null}
                             */
                            readonly adjuster?: "relative" | "percentage" | null;
                            /**
                             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                             *
                             * @example 5
                             */
                            readonly adjuster_value?: number;
                        };
                        /**
                         * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                         *
                         * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                         */
                        readonly image_url?: string;
                        readonly purchasing_disabled?: {
                            /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.
                             *      */
                            readonly status?: boolean;
                            /** @description The message displayed on the storefront when the purchasing disabled status is `true`.
                             *      */
                            readonly message?: string;
                        };
                    };
                }) & {
                    /** @description The unique numeric ID of the value; increments sequentially.
                     *      */
                    readonly id?: number;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 190,
                     *         "option_id": 222,
                     *         "label": "Yes",
                     *         "sort_order": 0,
                     *         "value_data": {},
                     *         "is_default": false,
                     *         "adjusters": {
                     *           "price": {
                     *             "adjuster": "relative",
                     *             "adjuster_value": 5
                     *           },
                     *           "weight": {},
                     *           "image_url": "",
                     *           "purchasing_disabled": {
                     *             "status": false,
                     *             "message": ""
                     *           }
                     *         }
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        /**
                         * Modifier Value
                         * @description Part of Modifier Value Response
                         */
                        readonly data?: ({
                            /**
                             * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                             *
                             * @example false
                             */
                            readonly is_default?: boolean;
                            /**
                             * @description The text display identifying the value on the storefront. Required in a /POST.
                             *
                             * @example Green
                             */
                            readonly label: string;
                            /**
                             * @description The order in which the value will be displayed on the product page. Required in a /POST.
                             *
                             * @example 0
                             */
                            readonly sort_order: number;
                            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexadecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
                             *      */
                            readonly value_data?: Record<string, unknown>;
                        } & {
                            readonly adjusters?: {
                                /**
                                 * Adjuster
                                 * @description Adjuster for Complex Rules.
                                 */
                                readonly price?: {
                                    /**
                                     * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                     *
                                     * @enum {string}
                                     */
                                    readonly adjuster?: "relative" | "percentage";
                                    /**
                                     * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                     *
                                     * @example 5
                                     */
                                    readonly adjuster_value?: number;
                                };
                                /**
                                 * Adjuster
                                 * @description Adjuster for Complex Rules.
                                 */
                                readonly weight?: {
                                    /**
                                     * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                     *
                                     * @enum {string}
                                     */
                                    readonly adjuster?: "relative" | "percentage";
                                    /**
                                     * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                     *
                                     * @example 5
                                     */
                                    readonly adjuster_value?: number;
                                };
                                /**
                                 * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
                                 *
                                 * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
                                 */
                                readonly image_url?: string;
                                readonly purchasing_disabled?: {
                                    /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.
                                     *      */
                                    readonly status?: boolean;
                                    /** @description The message displayed on the storefront when the purchasing disabled status is `true`.
                                     *      */
                                    readonly message?: string;
                                };
                            };
                        }) & {
                            /** @description The unique numeric ID of the value; increments sequentially.
                             *      */
                            readonly id?: number;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The `ModifierValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly deleteProductModifierValue: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the product to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the product modifier.
                 *      */
                readonly modifier_id: components["parameters"]["ModifierIdParam"];
                /** @description The ID of the product modifier value.
                 *      */
                readonly value_id: components["parameters"]["ValueIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly createProductModifierImage: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the product to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the product modifier.
                 *      */
                readonly modifier_id: components["parameters"]["ModifierIdParam"];
                /** @description The ID of the product modifier value.
                 *      */
                readonly value_id: components["parameters"]["ValueIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "multipart/form-data": {
                    /** Format: binary */
                    readonly image_file?: string;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "image_url": "https://cdn8.bigcommerce.com/s-id30h7ohwf/product_images/attribute_rule_images/85_source_1536863430.png"
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        /**
                         * Resource Image
                         * @description An object containing a publicly accessible image URL, or a form post that contains an image file.
                         */
                        readonly data?: {
                            /** @description A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file.
                             *      */
                            readonly image_url?: string;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": Record<string, unknown>;
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
            /** @description Modifier image was not valid. This is the result of missing `image_file` fields, or of a non-URL value for the `image_file` field. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
}
