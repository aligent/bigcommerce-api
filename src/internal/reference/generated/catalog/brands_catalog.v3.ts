/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/catalog/brands": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Brands
         * @description Returns a list of brands. Optional filter parameters can be passed in.
         */
        readonly get: operations["getBrands"];
        /**
         * Create a Brand
         * @description Creates a brand.
         *
         *     **Required Fields**
         *     - name
         *
         *     **Limits**
         *     - 30,000 brands per store limit
         */
        readonly post: operations["createBrand"];
        /**
         * Delete Brands
         * @description To delete brand objects, you must include a value for the name filter.
         */
        readonly delete: operations["deleteBrands"];
    };
    readonly "/catalog/brands/{brand_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the brand to which the resource belongs.
                 *      */
                readonly brand_id: components["parameters"]["BrandIdPath"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Brand
         * @description Returns a single brand. Optional filter parameters can be passed in.
         */
        readonly get: operations["getBrand"];
        /**
         * Update a Brand
         * @description Updates a brand.
         *
         *     To update a brand image, send a request with an `image_url`.
         */
        readonly put: operations["updateBrand"];
        /**
         * Delete a Brand
         * @description Deletes a brand.
         */
        readonly delete: operations["deleteBrand"];
    };
    readonly "/catalog/brands/{brand_id}/metafields": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the brand to which the resource belongs.
                 *      */
                readonly brand_id: components["parameters"]["BrandIdPath"];
            };
            readonly cookie?: never;
        };
        /**
         * Get brand metafields
         * @description Returns a list of brand metafields. Optional filter parameters can be passed in.
         */
        readonly get: operations["getBrandMetafields"];
        /**
         * Create a Brand Metafield
         * @description Creates a brand metafield.
         *
         *     **Note:** The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        readonly post: operations["createBrandMetafield"];
    };
    readonly "/catalog/brands/{brand_id}/metafields/{metafield_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the brand to which the resource belongs.
                 *      */
                readonly brand_id: components["parameters"]["BrandIdPath"];
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafield_id: components["parameters"]["MetafieldIdPath"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Brand Metafields
         * @description Returns a brand metafield. Optional filter parameters can be passed in.
         */
        readonly get: operations["getBrandMetafield"];
        /**
         * Update a Brand Metafield
         * @description Updates a brand metafield.
         *
         *     **Required Fields**
         *     * none
         *
         *     **Read-Only Fields**
         *     * id
         *     * These fields can only be modified by the app (API credentials) that created the metafield:
         *     	* namespace
         *     	* key
         *     	* permission_set
         *
         *     **Usage Notes**
         *     * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
         *     * The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        readonly put: operations["updateBrandMetafield"];
        /**
         * Delete a Brand Metafield
         * @description Deletes a brand metafield.
         */
        readonly delete: operations["deleteBrandMetafield"];
    };
    readonly "/catalog/brands/{brand_id}/image": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the brand to which the resource belongs.
                 *      */
                readonly brand_id: components["parameters"]["BrandIdPath"];
            };
            readonly cookie?: never;
        };
        /**
         * Create a Brand Image
         * @description Creates a brand image.
         *
         *     **Required Fields**
         *     - image_file: Form posts are the only accepted upload option. For more information on how to upload an image see [Adding product images](docs/store-operations/catalog#adding-product-images). NOTE:  Ensure you set the `Content-Type` header to `multipart/form-data; boundary=--example-boundary--` and set the correct URL for this endpoint.
         *
         *     **Read-Only Fields**
         *     - id
         *
         *     Only one image at a time can be created. To update a brand image, use the [Update a brand](/docs/rest-catalog/brands#update-a-brand) endpoint and an `image_url`.
         */
        readonly post: operations["createBrandImage"];
        /**
         * Delete a Brand Image
         * @description Deletes a brand image.
         */
        readonly delete: operations["deleteBrandImage"];
    };
    readonly "/catalog/brands/metafields": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Brand Metafields
         * @description Get all brand metafields.
         */
        readonly get: operations["getBrandsMetafields"];
        /**
         * Update multiple metafields
         * @description Create multiple metafields.
         */
        readonly put: operations["updateBrandsMetafields"];
        /**
         * Create multiple metafields
         * @description Create multiple metafields.
         */
        readonly post: operations["createBrandsMetafields"];
        /**
         * Delete Multiple Metafields
         * @description Delete all brand metafields.
         */
        readonly delete: operations["deleteBrandsMetafields"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * brand_Full
         * @description Common Brand properties.
         */
        readonly brand_Full: {
            /** @description Unique ID of the brand. */
            readonly id?: number;
            /**
             * @description The name of the brand. Must be unique.
             *     Required in POST.
             * @example Common Good
             */
            readonly name: string;
            /**
             * @description The title shown in the browser while viewing the brand.
             *
             * @example Common Good
             */
            readonly page_title?: string;
            /**
             * @description An array of meta keywords to include in the HTML.
             *
             * @example [
             *       "modern",
             *       "clean",
             *       "contemporary"
             *     ]
             */
            readonly meta_keywords?: readonly string[];
            /**
             * @description A meta description to include.
             *
             * @example Common Good is a modern brand.
             */
            readonly meta_description?: string;
            /**
             * @description A comma-separated list of keywords that can be used to locate this brand.
             *
             * @example kitchen, laundry, cart, storage
             */
            readonly search_keywords?: string;
            /**
             * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
             *
             * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
             */
            readonly image_url?: string;
            readonly custom_url?: components["schemas"]["customUrl_Full"];
        };
        /**
         * metafield_Base
         * @description Metafield for products, categories, variants, and brands; the max number of metafields allowed on each is 50. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        readonly metafield_Base: {
            /**
             * @description The name of the field, for example: `location_id`, `color`. Required for POST.
             *
             * @example Location
             */
            readonly key: string;
            /**
             * @description The value of the field, for example: `1`, `blue`. Required for POST.
             *
             * @example 4HG
             */
            readonly value: string;
            /**
             * @description Namespace for the metafield, for organizational purposes. This is set by the developer. Required for POST.
             *
             * @example Warehouse Locations
             */
            readonly namespace: string;
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *
             *     |Value|Description
             *     |-|-|
             *     |`app_only`|Private to the app that owns the field|
             *     |`read`|Visible to other API consumers|
             *     |`write`|Open for reading and writing by other API consumers|
             *     |`read_and_sf_access`|Visible to other API consumers, including on storefront|
             *     |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
             * @enum {string}
             */
            readonly permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Description for the metafields.
             *
             * @example Location in the warehouse
             */
            readonly description?: string;
        };
        /**
         * customUrl_Full
         * @description The custom URL for the product on the storefront.
         */
        readonly customUrl_Full: {
            /** @description Product URL on the storefront.
             *      */
            readonly url?: string;
            /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
             *      */
            readonly is_customized?: boolean;
        };
        /**
         * metaCollection_Full
         * @description Data about the response, including pagination and collection totals.
         */
        readonly metaCollection_Full: {
            readonly pagination?: components["schemas"]["pagination_Full"];
        };
        /**
         * pagination_Full
         * @description Data about the response, including pagination and collection totals.
         */
        readonly pagination_Full: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 36
             */
            readonly total?: number;
            /**
             * @description Total number of items in the collection response.
             *
             * @example 36
             */
            readonly count?: number;
            /**
             * @description The amount of items returned in the collection per page, controlled by the limit parameter.
             *
             * @example 50
             */
            readonly per_page?: number;
            /**
             * @description The page you are currently on within the collection.
             *
             * @example 1
             */
            readonly current_page?: number;
            /**
             * @description The total number of pages in the collection.
             *
             * @example 1
             */
            readonly total_pages?: number;
            /** @description Pagination links for the previous and next parts of the whole collection.
             *      */
            readonly links?: {
                /** @description Link to the previous page returned in the response.
                 *      */
                readonly previous?: string;
                /**
                 * @description Link to the current page returned in the response.
                 *
                 * @example ?page=1&limit=50
                 */
                readonly current?: string;
                /** @description Link to the next page returned in the response.
                 *      */
                readonly next?: string;
            };
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly metaEmpty_Full: {
            readonly [key: string]: unknown;
        };
        /**
         * error_Base
         * @description Error payload for the BigCommerce API.
         *
         */
        readonly error_Base: {
            /** @description The HTTP status code.
             *      */
            readonly status?: number;
            /** @description The error title describing the particular error.
             *      */
            readonly title?: string;
            readonly type?: string;
        };
        /** metafield_Full */
        readonly metafield_Full: {
            /**
             * @description Unique ID of the metafield.
             * @example 6
             */
            readonly id?: number;
        } & components["schemas"]["metafield_Base"] & {
            /**
             * @description The type of resource with which the metafield is associated.
             *
             * @example product
             * @enum {string}
             */
            readonly resource_type?: "category" | "brand" | "product" | "variant";
            /**
             * @description The ID of the resource with which the metafield is associated.
             *
             * @example 111
             */
            readonly resource_id?: number;
            /**
             * Format: date-time
             * @description Date and time of the metafieldʼs creation.
             *
             * @example 2018-05-07T20:14:17+00:00
             */
            readonly date_created?: string;
            /**
             * Format: date-time
             * @description Date and time when the metafield was last updated.
             *
             * @example 2018-05-07T20:14:17+00:00
             */
            readonly date_modified?: string;
            /**
             * @description Client ID for the metafieldʼs creator.
             * @example asdfasdfasdfasdfasdfasdfasdf
             */
            readonly owner_client_id?: string;
        };
        /** @description Common Metafield properties.
         *      */
        readonly Metafield: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace?: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key?: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value?: string;
            /**
             * @description Description for the metafields.
             *
             * @example order
             */
            readonly description?: string;
            /**
             * @description The type of resource with which the metafield is associated.
             *
             * @example cart
             * @enum {string}
             */
            readonly resource_type?: "brand" | "product" | "variant" | "category" | "cart" | "channel" | "location" | "order" | "customer";
            /**
             * @description The unique identifier for the resource with which the metafield is associated.
             *
             * @example 424242
             */
            readonly resource_id?: number;
            /** @description The unique identifier for the metafield. */
            readonly id?: number;
            /**
             * Format: date-time
             * @description Date and time of the metafieldʼs creation.
             * @example 2022-06-16T18:39:00+00:00
             */
            readonly date_created?: string;
            /**
             * Format: date-time
             * @description Date and time when the metafield was last updated.
             * @example 2022-06-16T18:39:00+00:00
             */
            readonly date_modified?: string;
            /**
             * @description Client ID for the metafieldʼs creator.
             * @example asdfasdfasdfasdfasdfasdfasdf
             */
            readonly owner_client_id?: string;
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponse: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            readonly meta?: components["schemas"]["CollectionMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponse_POST_PUT: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            /**
             * @description Empty for 200 responses.
             * @example []
             */
            readonly errors?: readonly unknown[];
            readonly meta?: components["schemas"]["CollectionMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponsePartialSuccess_POST_PUT: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            readonly errors?: readonly components["schemas"]["Error"][];
            readonly meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponsePartialSuccess_DELETE: {
            /** @example [
             *       123
             *     ] */
            readonly data?: readonly number[];
            readonly errors?: readonly components["schemas"]["Error"][];
            readonly meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionDeleteResponseSuccess: {
            /** @example [
             *       123,
             *       124,
             *       125
             *     ] */
            readonly data?: readonly number[];
            /**
             * @description Empty for 200 responses.
             * @example []
             */
            readonly errors?: readonly unknown[];
            readonly meta?: components["schemas"]["WriteCollectionSuccessMeta"];
        };
        /**
         * Collection Meta
         * @description Additional data about the response.
         */
        readonly WriteCollectionPartialSuccessMeta: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 3
             */
            readonly total?: number;
            /**
             * @description Total number of items that were successfully deleted.
             *
             * @example 1
             */
            readonly success?: number;
            /**
             * @description Total number of items that failed to be deleted.
             *
             * @example 2
             */
            readonly failed?: number;
        };
        /**
         * Collection Meta
         * @description Additional data about the response.
         */
        readonly WriteCollectionSuccessMeta: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 3
             */
            readonly total?: number;
            /**
             * @description Total number of items that were successfully deleted.
             *
             * @example 3
             */
            readonly success?: number;
            /**
             * @description Total number of items that failed to be deleted.
             *
             * @example 0
             */
            readonly failed?: number;
        };
        /**
         * @description Total number of items in the result set.
         *
         * @example 3
         */
        readonly Total: number;
        /** @description Error response payload for the BigCommerce API.
         *      */
        readonly Error: {
            /**
             * @description The HTTP status code for the error.
             *
             * @example 422
             */
            readonly status?: number;
            /**
             * @description The error title.
             *
             * @example Bulk operation has failed
             */
            readonly title?: string;
            /**
             * @description The error type.
             *
             * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
             */
            readonly type?: string;
            readonly errors?: components["schemas"]["ErrorDetail"];
        };
        /**
         * @description Error detail response payload for the BigCommerce API.
         *
         * @example {
         *       "1": "Unauthorized to delete",
         *       "2": "Metafield does not exist"
         *     }
         */
        readonly ErrorDetail: {
            readonly [key: string]: unknown;
        };
        /**
         * Collection Meta
         * @description Data about the response, including pagination and collection totals.
         */
        readonly CollectionMeta: {
            /**
             * Pagination
             * @description Data about the response, including pagination and collection totals.
             */
            readonly pagination?: {
                /**
                 * @description Total number of items in the result set.
                 *
                 * @example 36
                 */
                readonly total?: number;
                /**
                 * @description Total number of items in the collection response.
                 *
                 * @example 36
                 */
                readonly count?: number;
                /**
                 * @description The amount of items returned in the collection per page, controlled by the limit parameter.
                 *
                 * @example 50
                 */
                readonly per_page?: number;
                /**
                 * @description The page you are currently on within the collection.
                 *
                 * @example 1
                 */
                readonly current_page?: number;
                /**
                 * @description The total number of pages in the collection.
                 *
                 * @example 1
                 */
                readonly total_pages?: number;
                /** @description Pagination links for the previous and next parts of the whole collection.
                 *      */
                readonly links?: {
                    /** @description Link to the previous page returned in the response.
                     *      */
                    readonly previous?: string;
                    /**
                     * @description Link to the current page returned in the response.
                     *
                     * @example ?page=1&limit=50
                     */
                    readonly current?: string;
                    /** @description Link to the next page returned in the response.
                     *      */
                    readonly next?: string;
                };
            };
        } & {
            readonly [key: string]: unknown;
        };
        /** @description Common Metafield properties.
         *      */
        readonly MetafieldBase_Post: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value: string;
            /**
             * @description Description for the metafields.
             *
             * @example Name of Staff Member
             */
            readonly description?: string;
        };
        /** @description The model for a POST to create metafield.
         *      */
        readonly MetafieldPost: components["schemas"]["MetafieldBase_Post"] & {
            /**
             * @description The ID for the resource with which the metafield is associated.
             *
             * @example 42
             */
            readonly resource_id: number;
        };
        /** @description Common Metafield properties.
         *      */
        readonly MetafieldBase_Put: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace?: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key?: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value?: string;
            /**
             * @description Description for the metafields.
             *
             * @example Name of Staff Member
             */
            readonly description?: string;
        };
        /** Error Response */
        readonly NotFoundError: {
            /** @description The HTTP status code. */
            readonly status: number;
            /** @description The error title describing the particular error. */
            readonly title: string;
            readonly type: string;
        };
        /** Error response */
        readonly Conflict: {
            /** @description The HTTP status code. */
            readonly status?: number;
            /** @description The error title describing the particular error. */
            readonly title?: string;
            readonly type?: string;
            /** Detailed Errors */
            readonly errors?: Record<string, unknown>;
        };
    };
    responses: {
        readonly Error: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Base"];
            };
        };
        readonly ErrorWithDetails: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Not Found */
        readonly NotFoundError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["NotFoundError"];
            };
        };
        /** @description Unauthorized */
        readonly UnauthorizedError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "plain/text": string;
            };
        };
        /** @description Bad Request */
        readonly BadRequestError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "plain/text": string;
            };
        };
        /** @description Multi-status. Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occurred, such as when a `POST` or `PUT` request is successful, but the URL or inventory data failed to save. */
        readonly MultiStatus: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["brand_Full"][];
                    readonly errors?: components["schemas"]["Error"];
                    readonly meta?: components["schemas"]["WriteCollectionSuccessMeta"];
                };
            };
        };
        /** @description Conflict */
        readonly Conflict: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Conflict"];
            };
        };
    };
    parameters: {
        /** @description Sort direction. Acceptable values are: `asc`, `desc`.
         *      */
        readonly DirectionQuery: "asc" | "desc";
        /** @description The ID of the brand to which the resource belongs.
         *      */
        readonly BrandIdPath: number;
        /** @description The ID of the `Metafield`.
         *      */
        readonly MetafieldIdPath: number;
        /** @description Filter based on a metafieldʼs key. */
        readonly MetafieldKeyParam: string;
        /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
        readonly MetafieldKeyInParam: readonly string[];
        /** @description Filter based on a metafieldʼs namespaces. */
        readonly MetafieldNamespaceParam: string;
        /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter. */
        readonly MetafieldNamespaceInParam: readonly string[];
        /** @description 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
         *      */
        readonly date_created_min: string;
        /** @description 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
         *      */
        readonly date_created_max: string;
        /** @description 'Query parameter that lets you filter by the maximum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
         *      */
        readonly date_modified_max: string;
        /** @description 'Query parameter that lets you filter by the minimum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
         *      */
        readonly date_modified_min: string;
        /** @description Sort direction. Acceptable values are: `asc`, `desc`.
         *      */
        readonly DirectionParam: "asc" | "desc";
        /** @description Filter items by ID.
         *      */
        readonly IdQuery: number;
        readonly IdInQuery: readonly number[];
        readonly IdNotInQuery: readonly number[];
        readonly IdMinQuery: readonly number[];
        readonly IdMaxQuery: readonly number[];
        readonly IdGreaterQuery: readonly number[];
        readonly IdLessQuery: readonly number[];
        /** @description Filter items by name.
         *      */
        readonly NameQuery: string;
        /** @description Filter items by name.
         *      */
        readonly NameRequired: string;
        /** @description Filter items by part of a name. For example, `name:like=new` returns brands with names that include `new`. */
        readonly NameLikeQuery: string;
        /** @description Filter items by page_title.
         *      */
        readonly PageTitleQuery: string;
        /** @description Specifies the page number in a limited (paginated) list of products. */
        readonly PageQuery: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products. */
        readonly LimitQuery: number;
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly IncludeFieldsQuery: readonly string[];
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly ExcludeFieldsQuery: readonly string[];
        /** @description Field name to sort by. */
        readonly SortQuery: "name";
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly IncludeFieldsParamMetafields: readonly ("resource_id" | "key" | "value" | "namespace" | "permission_set" | "resource_type" | "description" | "owner_client_id" | "date_created" | "date_modified")[];
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getBrands: {
        readonly parameters: {
            readonly query?: {
                /** @description Filter items by ID.
                 *      */
                readonly id?: components["parameters"]["IdQuery"];
                readonly "id:in"?: components["parameters"]["IdInQuery"];
                readonly "id:not_in"?: components["parameters"]["IdNotInQuery"];
                readonly "id:min"?: components["parameters"]["IdMinQuery"];
                readonly "id:max"?: components["parameters"]["IdMaxQuery"];
                readonly "id:greater"?: components["parameters"]["IdGreaterQuery"];
                readonly "id:less"?: components["parameters"]["IdLessQuery"];
                /** @description Filter items by name.
                 *      */
                readonly name?: components["parameters"]["NameQuery"];
                /** @description Filter items by part of a name. For example, `name:like=new` returns brands with names that include `new`. */
                readonly "name:like"?: components["parameters"]["NameLikeQuery"];
                /** @description Filter items by page_title.
                 *      */
                readonly page_title?: components["parameters"]["PageTitleQuery"];
                /** @description Specifies the page number in a limited (paginated) list of products. */
                readonly page?: components["parameters"]["PageQuery"];
                /** @description Controls the number of items per page in a limited (paginated) list of products. */
                readonly limit?: components["parameters"]["LimitQuery"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsQuery"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsQuery"];
                /** @description Field name to sort by. */
                readonly sort?: components["parameters"]["SortQuery"];
                /** @description Sort direction. Acceptable values are: `asc`, `desc`.
                 *      */
                readonly direction?: components["parameters"]["DirectionQuery"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "id": 35,
                     *           "name": "Sagaform",
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "",
                     *           "image_url": "",
                     *           "search_keywords": "",
                     *           "custom_url": {
                     *             "url": "/brands/Sagaform.html",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 36,
                     *           "name": "OFS",
                     *           "page_title": "OFS",
                     *           "meta_keywords": [
                     *             "modern",
                     *             "clean",
                     *             "contemporary"
                     *           ],
                     *           "meta_description": "OFS is a modern brand.",
                     *           "image_url": "",
                     *           "search_keywords": "kitchen, laundry, cart, storage",
                     *           "custom_url": {
                     *             "url": "/brands/OFS.html",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 37,
                     *           "name": "Common Good",
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "",
                     *           "image_url": "https://cdn8.bigcommerce.com/s-jrah6gmn/product_images/k/screen%20shot%202018-05-07%20at%2012.24.24%20pm_1525785365__65102.png",
                     *           "search_keywords": "",
                     *           "custom_url": {
                     *             "url": "/brands/Common-Good.html",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 38,
                     *           "name": "BigCommerce",
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "",
                     *           "image_url": "",
                     *           "search_keywords": "",
                     *           "custom_url": {
                     *             "url": "/bigcommerce/",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 39,
                     *           "name": "Test Brand One",
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "",
                     *           "image_url": "https://cdn8.bigcommerce.com/s-jrah6gmn/product_images/q/apihqggzm__53766.jpg",
                     *           "search_keywords": "",
                     *           "custom_url": {
                     *             "url": "/test-brand-one/",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 40,
                     *           "name": "Fog Linen Work",
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "description",
                     *           "image_url": "",
                     *           "search_keywords": "",
                     *           "custom_url": {
                     *             "url": "/fog-linen-work/",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 41,
                     *           "name": "Barr-Co.",
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "description",
                     *           "image_url": "",
                     *           "search_keywords": "",
                     *           "custom_url": {
                     *             "url": "/barr-co/",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 42,
                     *           "name": "Thames & Hudson",
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "description",
                     *           "image_url": "",
                     *           "search_keywords": "",
                     *           "custom_url": {
                     *             "url": "/thames-hudson/",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 43,
                     *           "name": "Able Brewing",
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "description",
                     *           "image_url": "",
                     *           "search_keywords": "",
                     *           "custom_url": {
                     *             "url": "/able-brewing/",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 44,
                     *           "name": "Chemex",
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "description",
                     *           "image_url": "",
                     *           "search_keywords": "",
                     *           "custom_url": {
                     *             "url": "/chemex/",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 45,
                     *           "name": "Kinfolk",
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "description",
                     *           "image_url": "",
                     *           "search_keywords": "",
                     *           "custom_url": {
                     *             "url": "/kinfolk/",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 46,
                     *           "name": "Iris Hantverk",
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "description",
                     *           "image_url": "",
                     *           "search_keywords": "",
                     *           "custom_url": {
                     *             "url": "/iris-hantverk/",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 47,
                     *           "name": "Gather Journal",
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "description",
                     *           "image_url": "",
                     *           "search_keywords": "",
                     *           "custom_url": {
                     *             "url": "/gather-journal/",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 48,
                     *           "name": "Openhouse Magazine",
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "description",
                     *           "image_url": "",
                     *           "search_keywords": "",
                     *           "custom_url": {
                     *             "url": "/openhouse-magazine/",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 49,
                     *           "name": "Smith Journal",
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "description",
                     *           "image_url": "",
                     *           "search_keywords": "",
                     *           "custom_url": {
                     *             "url": "/smith-journal/",
                     *             "is_customized": false
                     *           }
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "total": 15,
                     *           "count": 15,
                     *           "per_page": 50,
                     *           "current_page": 1,
                     *           "total_pages": 1,
                     *           "links": {
                     *             "current": "?page=1&limit=50"
                     *           }
                     *         }
                     *       }
                     *     } */
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["brand_Full"][];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["Error"];
        };
    };
    readonly createBrand: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description The name of the brand. Must be unique.
                     *     Required in POST.
                     * @example Common Good
                     */
                    readonly name: string;
                    /**
                     * @description The title shown in the browser while viewing the brand.
                     *
                     * @example Common Good
                     */
                    readonly page_title?: string;
                    /**
                     * @description An array of meta keywords to include in the HTML.
                     *
                     * @example [
                     *       "modern",
                     *       "clean",
                     *       "contemporary"
                     *     ]
                     */
                    readonly meta_keywords?: readonly string[];
                    /**
                     * @description A meta description to include.
                     *
                     * @example Common Good is a modern brand.
                     */
                    readonly meta_description?: string;
                    /**
                     * @description A comma-separated list of keywords that can be used to locate this brand.
                     *
                     * @example kitchen, laundry, cart, storage
                     */
                    readonly search_keywords?: string;
                    /**
                     * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
                     *
                     * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
                     */
                    readonly image_url?: string;
                    /**
                     * Custom Url Brand
                     * @description The custom URL for the brand on the storefront. If not provided, the URL will be autogenerated from the brand name.
                     */
                    readonly custom_url?: {
                        /**
                         * @description Brand URL on the storefront.
                         *
                         * @example /shoes
                         */
                        readonly url?: string;
                        /**
                         * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
                         *
                         * @example true
                         */
                        readonly is_customized?: boolean;
                    };
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 50,
                     *         "name": "Common Good",
                     *         "meta_keywords": [
                     *           "modern",
                     *           "clean",
                     *           "contemporary"
                     *         ],
                     *         "meta_description": "Common Good is a modern brand",
                     *         "image_url": "",
                     *         "search_keywords": "kitchen, laundry, cart, storage",
                     *         "custom_url": {
                     *           "url": "/brands/Common-Good.html",
                     *           "is_customized": false
                     *         }
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        /**
                         * Brand
                         * @description Common Brand properties.
                         */
                        readonly data?: {
                            /** @description Unique ID of the brand. */
                            readonly id?: number;
                            /**
                             * @description The name of the brand. Must be unique.
                             *     Required in POST.
                             * @example Common Good
                             */
                            readonly name?: string;
                            /**
                             * @description The title shown in the browser while viewing the brand.
                             *
                             * @example Common Good
                             */
                            readonly page_title?: string;
                            /**
                             * @description An array of meta keywords to include in the HTML.
                             *
                             * @example [
                             *       "modern",
                             *       "clean",
                             *       "contemporary"
                             *     ]
                             */
                            readonly meta_keywords?: readonly string[];
                            /**
                             * @description A meta description to include.
                             *
                             * @example Common Good is a modern brand.
                             */
                            readonly meta_description?: string;
                            /**
                             * @description A comma-separated list of keywords that can be used to locate this brand.
                             *
                             * @example kitchen, laundry, cart, storage
                             */
                            readonly search_keywords?: string;
                            /**
                             * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
                             *
                             * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
                             */
                            readonly image_url?: string;
                            /**
                             * Custom Url Brand
                             * @description The custom URL for the brand on the storefront.
                             */
                            readonly custom_url?: {
                                /**
                                 * @description Brand URL on the storefront.
                                 *
                                 * @example /shoes
                                 */
                                readonly url?: string;
                                /**
                                 * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
                                 *
                                 * @example true
                                 */
                                readonly is_customized?: boolean;
                            };
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            readonly 207: components["responses"]["MultiStatus"];
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["Error"];
            readonly 404: components["responses"]["NotFoundError"];
            /** @description Brand was in conflict with another brand. This is the result of duplicate unique fields such as name. */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description Brand was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly deleteBrands: {
        readonly parameters: {
            readonly query: {
                /** @description Filter items by name.
                 *      */
                readonly name: components["parameters"]["NameRequired"];
                /** @description Filter items by page_title.
                 *      */
                readonly page_title?: components["parameters"]["PageTitleQuery"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["Error"];
            readonly 422: components["responses"]["Error"];
        };
    };
    readonly getBrand: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsQuery"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsQuery"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the brand to which the resource belongs.
                 *      */
                readonly brand_id: components["parameters"]["BrandIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 50,
                     *         "name": "Common Good",
                     *         "meta_keywords": [
                     *           "modern",
                     *           "clean",
                     *           "contemporary"
                     *         ],
                     *         "meta_description": "Common Good is a modern brand",
                     *         "image_url": "",
                     *         "search_keywords": "kitchen, laundry, cart, storage",
                     *         "custom_url": {
                     *           "url": "/brands/Common-Good.html",
                     *           "is_customized": false
                     *         }
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: components["schemas"]["brand_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            readonly 207: components["responses"]["MultiStatus"];
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["Error"];
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
            readonly 409: components["responses"]["Conflict"];
            readonly 422: components["responses"]["ErrorWithDetails"];
        };
    };
    readonly updateBrand: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the brand to which the resource belongs.
                 *      */
                readonly brand_id: components["parameters"]["BrandIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Unique ID of the brand. */
                    readonly id?: number;
                    /**
                     * @description The name of the brand. Must be unique.
                     *     Required in POST.
                     * @example Common Good
                     */
                    readonly name: string;
                    /**
                     * @description The title shown in the browser while viewing the brand.
                     *
                     * @example Common Good
                     */
                    readonly page_title?: string;
                    /**
                     * @description An array of meta keywords to include in the HTML.
                     *
                     * @example [
                     *       "modern",
                     *       "clean",
                     *       "contemporary"
                     *     ]
                     */
                    readonly meta_keywords?: readonly string[];
                    /**
                     * @description A meta description to include.
                     *
                     * @example Common Good is a modern brand.
                     */
                    readonly meta_description?: string;
                    /**
                     * @description A comma-separated list of keywords that can be used to locate this brand.
                     *
                     * @example kitchen, laundry, cart, storage
                     */
                    readonly search_keywords?: string;
                    /**
                     * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
                     *
                     * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
                     */
                    readonly image_url?: string;
                    /**
                     * Custom Url Brand
                     * @description The custom URL for the brand on the storefront.
                     */
                    readonly custom_url?: {
                        /**
                         * @description Brand URL on the storefront.
                         *
                         * @example /shoes
                         */
                        readonly url?: string;
                        /**
                         * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
                         *
                         * @example true
                         */
                        readonly is_customized?: boolean;
                    };
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 50,
                     *         "name": "Common Good",
                     *         "meta_keywords": [
                     *           "modern",
                     *           "clean",
                     *           "contemporary"
                     *         ],
                     *         "meta_description": "Common Good is a modern brand",
                     *         "image_url": "",
                     *         "search_keywords": "kitchen, laundry, cart, storage",
                     *         "custom_url": {
                     *           "url": "/brands/Common-Good.html",
                     *           "is_customized": false
                     *         }
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        /**
                         * Brand
                         * @description Common Brand properties.
                         */
                        readonly data?: {
                            /** @description Unique ID of the brand. */
                            readonly id?: number;
                            /**
                             * @description The name of the brand. Must be unique.
                             *     Required in POST.
                             * @example Common Good
                             */
                            readonly name: string;
                            /**
                             * @description The title shown in the browser while viewing the brand.
                             *
                             * @example Common Good
                             */
                            readonly page_title?: string;
                            /**
                             * @description An array of meta keywords to include in the HTML.
                             *
                             * @example [
                             *       "modern",
                             *       "clean",
                             *       "contemporary"
                             *     ]
                             */
                            readonly meta_keywords?: readonly string[];
                            /**
                             * @description A meta description to include.
                             *
                             * @example Common Good is a modern brand.
                             */
                            readonly meta_description?: string;
                            /**
                             * @description A comma-separated list of keywords that can be used to locate this brand.
                             *
                             * @example kitchen, laundry, cart, storage
                             */
                            readonly search_keywords?: string;
                            /**
                             * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
                             *
                             * @example https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png
                             */
                            readonly image_url?: string;
                            /**
                             * Custom Url Brand
                             * @description The custom URL for the brand on the storefront.
                             */
                            readonly custom_url?: {
                                /**
                                 * @description Brand URL on the storefront.
                                 *
                                 * @example /shoes
                                 */
                                readonly url?: string;
                                /**
                                 * @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
                                 *
                                 * @example true
                                 */
                                readonly is_customized?: boolean;
                            };
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            readonly 207: components["responses"]["MultiStatus"];
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["Error"];
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description The `Brand` was in conflict with another product. This is the result of duplicate unique values, such as `name`.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description The `Brand` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly deleteBrand: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the brand to which the resource belongs.
                 *      */
                readonly brand_id: components["parameters"]["BrandIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["Error"];
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getBrandMetafields: {
        readonly parameters: {
            readonly query?: {
                /** @description Filter items by ID.
                 *      */
                readonly id?: components["parameters"]["IdQuery"];
                readonly "id:in"?: components["parameters"]["IdInQuery"];
                readonly "id:not_in"?: components["parameters"]["IdNotInQuery"];
                readonly "id:min"?: components["parameters"]["IdMinQuery"];
                readonly "id:max"?: components["parameters"]["IdMaxQuery"];
                readonly "id:greater"?: components["parameters"]["IdGreaterQuery"];
                readonly "id:less"?: components["parameters"]["IdLessQuery"];
                /** @description Specifies the page number in a limited (paginated) list of products. */
                readonly page?: components["parameters"]["PageQuery"];
                /** @description Controls the number of items per page in a limited (paginated) list of products. */
                readonly limit?: components["parameters"]["LimitQuery"];
                /** @description Filter based on a metafieldʼs key. */
                readonly key?: components["parameters"]["MetafieldKeyParam"];
                /** @description Filter based on a metafieldʼs namespaces. */
                readonly namespace?: components["parameters"]["MetafieldNamespaceParam"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsQuery"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsQuery"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the brand to which the resource belongs.
                 *      */
                readonly brand_id: components["parameters"]["BrandIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "id": 6,
                     *           "key": "Location",
                     *           "value": "4HG",
                     *           "namespace": "Warehouse Locations",
                     *           "permission_set": "app_only",
                     *           "resource_type": "brand",
                     *           "resource_id": 111,
                     *           "description": "Location in the warehouse",
                     *           "date_created": "1973-01-20T21:34:57.903Z",
                     *           "date_modified": "1990-12-30T00:29:23.515Z",
                     *           "owner_client_id": "e8o0nm9ujew7byzu6x5dwjqe2rya2fv"
                     *         },
                     *         {
                     *           "id": 7,
                     *           "key": "Brand location",
                     *           "value": "4HG",
                     *           "namespace": "Warehouse Locations",
                     *           "permission_set": "read",
                     *           "resource_type": "brand",
                     *           "resource_id": 111,
                     *           "description": "Location in the warehouse",
                     *           "date_created": "1973-01-20T21:34:57.903Z",
                     *           "date_modified": "1990-12-30T00:29:23.515Z",
                     *           "owner_client_id": "e8o0nm9ujew7byzu6x5dwjqe2rya2fv"
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "total": 2,
                     *           "count": 2,
                     *           "per_page": 50,
                     *           "current_page": 1,
                     *           "total_pages": 1,
                     *           "links": {
                     *             "current": "?page=1&limit=50"
                     *           }
                     *         }
                     *       }
                     *     } */
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["metafield_Full"][];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
        };
    };
    readonly createBrandMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the brand to which the resource belongs.
                 *      */
                readonly brand_id: components["parameters"]["BrandIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["metafield_Base"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["metafield_Full"];
                        /**
                         * Meta
                         * @description Empty meta object; may be used later.
                         */
                        readonly meta?: Record<string, unknown>;
                    };
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combination of the appʼs client id, namespace, key, resource_type, and resource_id.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly getBrandMetafield: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsQuery"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsQuery"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the brand to which the resource belongs.
                 *      */
                readonly brand_id: components["parameters"]["BrandIdPath"];
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafield_id: components["parameters"]["MetafieldIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 4,
                     *         "key": "location_id",
                     *         "value": "Shelf 3, Bin 5",
                     *         "namespace": "App Namespace",
                     *         "permission_set": "app_only",
                     *         "resource_type": "product",
                     *         "resource_id": 137,
                     *         "description": "Where products are located",
                     *         "date_created": "2021-08-06T19:15:35+00:00",
                     *         "date_modified": "2021-08-06T19:15:35+00:00",
                     *         "owner_client_id": "e8o0nm9ujew7byzu6x5dwjqe2rya2fv"
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: components["schemas"]["metafield_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly updateBrandMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the brand to which the resource belongs.
                 *      */
                readonly brand_id: components["parameters"]["BrandIdPath"];
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafield_id: components["parameters"]["MetafieldIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["MetafieldBase_Put"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 4,
                     *         "key": "location_id",
                     *         "value": "Shelf 3, Bin 5",
                     *         "namespace": "App Namespace",
                     *         "permission_set": "app_only",
                     *         "resource_type": "product",
                     *         "resource_id": 137,
                     *         "description": "Where products are located",
                     *         "date_created": "2021-08-06T19:15:35+00:00",
                     *         "date_modified": "2021-08-06T19:15:35+00:00"
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: components["schemas"]["metafield_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly deleteBrandMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the brand to which the resource belongs.
                 *      */
                readonly brand_id: components["parameters"]["BrandIdPath"];
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafield_id: components["parameters"]["MetafieldIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly createBrandImage: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the brand to which the resource belongs.
                 *      */
                readonly brand_id: components["parameters"]["BrandIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "multipart/form-data": {
                    /** Format: binary */
                    readonly image_file?: string;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "image_url": "https://cdn11.bigcommerce.com/s-{store_hash}/product_images/k/group_1545334669__76009.png"
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: {
                            readonly image_url?: string;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": Record<string, unknown>;
                };
            };
            /** @description The resource was not found. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
            /** @description Image was not valid. This is the result of a missing `image_file` field, or of an incorrect file type. See the response for more details. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly deleteBrandImage: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the brand to which the resource belongs.
                 *      */
                readonly brand_id: components["parameters"]["BrandIdPath"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getBrandsMetafields: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products. */
                readonly page?: components["parameters"]["PageQuery"];
                /** @description Controls the number of items per page in a limited (paginated) list of products. */
                readonly limit?: components["parameters"]["LimitQuery"];
                /** @description Filter based on a metafieldʼs key. */
                readonly key?: components["parameters"]["MetafieldKeyParam"];
                /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
                readonly "key:in"?: components["parameters"]["MetafieldKeyInParam"];
                /** @description Filter based on a metafieldʼs namespaces. */
                readonly namespace?: components["parameters"]["MetafieldNamespaceParam"];
                /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter. */
                readonly "namespace:in"?: components["parameters"]["MetafieldNamespaceInParam"];
                /** @description Sort direction. Acceptable values are: `asc`, `desc`.
                 *      */
                readonly direction?: components["parameters"]["DirectionParam"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParamMetafields"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description List of `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly errors?: unknown;
                    };
                };
            };
        };
    };
    readonly updateBrandsMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly (components["schemas"]["MetafieldBase_Put"] & {
                    /**
                     * @description The ID of metafield to update.
                     *
                     * @example 42
                     */
                    readonly id: number;
                })[];
            };
        };
        readonly responses: {
            /** @description List of updated `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "errors": {}
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly errors?: Record<string, unknown>;
                    };
                };
            };
            /** @description JSON data is missing or invalid */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        /** @description Empty for 200 responses. */
                        readonly errors?: Record<string, unknown>;
                    };
                };
            };
        };
    };
    readonly createBrandsMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly (components["schemas"]["MetafieldBase_Post"] & {
                    /**
                     * @description The ID for the brand with which the metafield is associated.
                     *
                     * @example 42
                     */
                    readonly resource_id: number;
                })[];
            };
        };
        readonly responses: {
            /** @description List of created `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Response object for metafields creation with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
                };
            };
        };
    };
    readonly deleteBrandsMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /** @description List of metafield IDs. */
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly number[];
            };
        };
        readonly responses: {
            /** @description Response object for metafields deletion with success.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionDeleteResponseSuccess"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Response object for metafields deletion with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_DELETE"];
                };
            };
        };
    };
}
