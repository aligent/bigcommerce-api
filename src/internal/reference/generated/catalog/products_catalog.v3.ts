/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/catalog/products": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Products
         * @description Returns a list of **Products**. Optional filter parameters can be passed in.
         */
        readonly get: operations["getProducts"];
        /**
         * Update Products (Batch)
         * @description Updates products in batches. Batches are limited to 10 products.
         *
         *     **Required Fields**
         *     * `id` - product `id` is required for batch updates to products.
         *
         *     **Read-Only Fields**
         *     - `id`
         *     - `date_created`
         *     - `date_modified`
         *     - `calculated_price`
         *     - `base_variant_id`
         */
        readonly put: operations["updateProducts"];
        /**
         * Create a Product
         * @description Creates a *Product*. Only one product can be created at a time; however, you can create multiple product variants using the `variants` array.
         *
         *     **Required Fields:**
         *     - `name`
         *     - `type`
         *     - `weight`
         *     - `price`
         *     - `categories` (required when you enable the V2 product experience in the control panel)
         *
         *     **Read-Only Fields**
         *     - `id`
         *     - `date_created`
         *     - `date_modified`
         *     - `calculated_price`
         *     - `base_variant_id`
         *
         *     **Limits**
         *     - 250 characters product name length.
         *     - A product can have up to 1000 images. Each image file or image uploaded by URL can be up to 8 MB.
         *
         *     **Usage Notes**
         *     * You can create multiple product variants using the `variants` array.
         *     * This endpoint accepts a `video` array. To create a product video that accepts a `video` object, see [Create a Product Video](/docs/rest-catalog/products/videos#create-a-product-video) for information.
         */
        readonly post: operations["createProduct"];
        /**
         * Delete Products
         * @description To delete *Product* objects, you must include a filter. This prevents inadvertently deleting all *Product* objects in a store.
         *
         *     > #### Note
         *     > The maximum number of products you can delete at one time is 250.
         *
         *     **Example**:
         *     To delete products with IDs 1,2 and 3, use `DELETE /v3/catalog/products?id:in=1,2,3`.
         */
        readonly delete: operations["deleteProducts"];
    };
    readonly "/catalog/products/{product_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Product
         * @description Returns a single *Product*. Optional parameters can be passed in.
         */
        readonly get: operations["getProduct"];
        /**
         * Update a Product
         * @description Updates a *Product*.
         *
         *     **Limits**
         *     - A product can have up to 1000 images. Each image file or image uploaded by URL can be up to 8 MB.
         *
         *     **Read-Only Fields**
         *     - id
         *     - date_created
         *     - date_modified
         *     - calculated_price
         *     - base_variant_id
         *
         */
        readonly put: operations["updateProduct"];
        /**
         * Delete a Product
         * @description Deletes a *Product*.
         */
        readonly delete: operations["deleteProduct"];
    };
    readonly "/catalog/products/{product_id}/images": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get All Product Images
         * @description Returns a list of *Product Images*. Optional parameters can be passed in.
         */
        readonly get: operations["getProductImages"];
        /**
         * Create a Product Image
         * @description Creates a *Product Image*.
         *
         *      **Required Fields**
         *     - `image_file`, or
         *     - `image_url`
         *
         *     **Usage Notes**
         *     - `image_url` - `255` character limit
         *     - `Content-Type` - For `image_file`, use the `multipart/form-data` media type. For `image_url`, use the `application/json` type. See [Adding product images](/docs/store-operations/catalog#adding-product-images) for more information.
         *     - You can create only one image at a time. A product can have up to 1000 images.
         *     - Supported image file types are BMP, GIF, JPEG, PNG, WBMP, XBM, and WEBP.
         *     - Each image file or image uploaded by URL can be up to 8 MB.
         */
        readonly post: operations["createProductImage"];
    };
    readonly "/catalog/products/{product_id}/images/{image_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Image` that is being operated on.
                 *      */
                readonly image_id: components["parameters"]["ImageIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Product Image
         * @description Returns a single *Product Image*. Optional parameters can be passed in.
         */
        readonly get: operations["getProductImage"];
        /**
         * Update a Product Image
         * @description Updates a *Product Image*.
         *
         *     **Usage Notes**
         *     - `image_url` - `255` character limit
         *     - Each image file or image uploaded by URL can be up to 8 MB.
         *     - For file uploads, send a POST request using the `multipart/form-data` media type
         */
        readonly put: operations["updateProductImage"];
        /**
         * Delete a Product Image
         * @description Deletes a *Product Image*.
         */
        readonly delete: operations["deleteProductImage"];
    };
    readonly "/catalog/products/{product_id}/videos": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get All Product Videos
         * @description Returns a list of *Product Videos*. Optional parameters can be passed in.
         */
        readonly get: operations["getProductVideos"];
        /**
         * Create a Product Video
         * @description Creates a *Product Video*.
         *
         *     **Required Fields**
         *     * video_id
         *
         *     **Read-Only Fields**
         *     * id
         *
         *     Publicly accessible URLs are valid parameters.
         *
         *     The Catalog API integrates with third-party YouTube, and you must load videos through YouTube.
         *     The [YouTube Terms of Service](https://www.youtube.com/t/terms) and [Google Privacy Policy](https://policies.google.com/privacy) apply, as indicated in our [Privacy Policy](https://www.bigcommerce.com/privacy/) and [Terms of Service](https://www.bigcommerce.com/terms/).
         */
        readonly post: operations["createProductVideo"];
    };
    readonly "/catalog/products/{product_id}/videos/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The BigCommerce ID of the `Video` */
                readonly id: components["parameters"]["VideoIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Product Video
         * @description Returns a single *Product Video*. Optional parameters can be passed in.
         */
        readonly get: operations["getProductVideo"];
        /**
         * Update a Product Video
         * @description Updates a *Product Video.
         *
         *     **Required Fields**
         *     * none
         *
         *     **Read-Only Fields**
         *     * id
         *
         *     The Catalog API integrates with third-party YouTube, and you must load videos through YouTube.
         *     The [YouTube Terms of Service](https://www.youtube.com/t/terms) and [Google Privacy Policy](https://policies.google.com/privacy) apply, as indicated in our [Privacy Policy](https://www.bigcommerce.com/privacy/) and [Terms of Service](https://www.bigcommerce.com/terms/).
         */
        readonly put: operations["updateProductVideo"];
        /**
         * Delete a Product Video
         * @description Deletes a *Product Video*.
         */
        readonly delete: operations["deleteProductVideo"];
    };
    readonly "/catalog/products/{product_id}/complex-rules": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get Complex Rules
         * @description Returns a list of all product *Complex Rules*. Optional parameters may be passed in.
         */
        readonly get: operations["getProductComplexRules"];
        /**
         * Create a Complex Rule
         * @description Creates a product *Complex Rule*.
         *
         *     **Required Fields**
         *     - modifier_id
         *     - modifier_value_id
         *     - variant_id
         *
         *     **Read-Only Fields**
         *     - complex_rule_id
         *     - conditions_id
         *     - rule_id
         *     - combination_id
         *     - id
         */
        readonly post: operations["createProductComplexRule"];
    };
    readonly "/catalog/products/{product_id}/complex-rules/{complex_rule_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `ComplexRule`.
                 *      */
                readonly complex_rule_id: components["parameters"]["ComplexRuleIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Product Complex Rule
         * @description Returns a single *Complex Rule*. Optional parameters can be passed in.
         */
        readonly get: operations["getProductComplexRule"];
        /**
         * Update a Product Complex Rule
         * @description Updates a *Complex Rule*.
         *
         *     **Required Fields**:
         *     - none
         *
         *     **Read-Only Fields**:
         *     - complex_rule_id
         *     - conditions_id
         *     - rule_id
         *     - combination_id
         *     - id
         */
        readonly put: operations["updateProductComplexRule"];
        /**
         * Delete a Product Complex Rule
         * @description Deletes a product *Complex Rule*.
         */
        readonly delete: operations["deleteProductComplexRule"];
    };
    readonly "/catalog/products/{product_id}/custom-fields": {
        readonly parameters: {
            readonly query?: never;
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get Product Custom Fields
         * @description Returns a list of product *Custom Fields*. You can pass in optional parameters.
         */
        readonly get: operations["getProductCustomFields"];
        /**
         * Create a Product Custom Field
         * @description Creates a *Custom Field*.
         *
         *     **Required Fields:**
         *     - name
         *     - value
         *
         *     **Name-Value Pair Uniqueness**
         *     - Every name-value pair must be unique inside a product.
         *
         *     **Read-Only:**
         *     - id
         *
         *     **Limits**
         *     - 200 custom fields per product limit.
         *     - 250 characters per custom field limit.
         */
        readonly post: operations["createProductCustomField"];
    };
    readonly "/catalog/products/{product_id}/custom-fields/{custom_field_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `CustomField`.
                 *      */
                readonly custom_field_id: components["parameters"]["CustomFieldIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Product Custom Field
         * @description Returns a *Custom Field*.
         *
         */
        readonly get: operations["getProductCustomField"];
        /**
         * Update a Product Custom Field
         * @description Updates a *Custom Field*.
         *
         *     **Required Fields**
         *     - none
         *
         *     **Name-Value Pair Uniqueness**
         *     - Every name-value pair must be unique inside a product.
         *
         *     **Read-Only**
         *     - id
         *
         *      **Limits**
         *     - 200 custom fields per product limit.
         *     - 250 characters per custom field limit.
         */
        readonly put: operations["updateProductCustomField"];
        /**
         * Delete a Product Custom Field
         * @description Deletes a product *Custom Field*.
         */
        readonly delete: operations["deleteProductCustomField"];
    };
    readonly "/catalog/products/{product_id}/bulk-pricing-rules": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type": components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get all Bulk Pricing Rules
         * @description Returns all *Bulk Pricing Rules*. Optional parameters can be passed in.
         */
        readonly get: operations["getAllBulkPricingRules"];
        /**
         * Create a Bulk Pricing Rule
         * @description Creates a *Bulk Pricing Rule*.
         */
        readonly post: operations["createBulkPricingRule"];
    };
    readonly "/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `BulkPricingRule`.
                 *      */
                readonly bulk_pricing_rule_id: components["parameters"]["BulkPricingRuleIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Bulk Pricing Rule
         * @description Returns a single *Bulk Pricing Rule*. Optional parameters can be passed in.
         */
        readonly get: operations["getBulkPricingRule"];
        /**
         * Update a Bulk Pricing Rule
         * @description Updates a *Bulk Pricing Rule*.
         *
         *     **Required Fields**
         *     * none
         *
         *     **Read-Only Fields**
         *     - id
         */
        readonly put: operations["updateBulkPricingRule"];
        /**
         * Delete a Bulk Pricing Rule
         * @description Deletes a *Bulk Pricing Rule*.
         */
        readonly delete: operations["deleteBulkPricingRule"];
    };
    readonly "/catalog/products/{product_id}/metafields": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get Product Metafields
         * @description Returns a list of *Product Metafields*. Optional parameters can be passed in.
         */
        readonly get: operations["getProductMetafields"];
        /**
         * Create a Product Metafield
         * @description Creates a *Product Metafield*.
         *
         *     **Required Fields:**
         *     * permission_set
         *     * namespace
         *     * key
         *     * value
         *
         *     **Note:** The maxiumum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        readonly post: operations["createProductMetafield"];
    };
    readonly "/catalog/products/{product_id}/metafields/{metafield_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafield_id: components["parameters"]["MetafieldIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Product Metafield
         * @description Returns a single *Product Metafield*. Optional parameters can be passed in.
         */
        readonly get: operations["getProductMetafield"];
        /**
         * Update a Product Metafield
         * @description Updates a *Product Metafield*.
         *
         *     **Required Fields**
         *     * none
         *
         *     **Read-Only Fields**
         *     * id
         *     * These fields can only be modified using the API account that created the metafield:
         *     	* `namespace`
         *     	* `key`
         *     	* `permission_set`
         *     	* `value`
         *
         *     **Usage Notes**
         *     * Attempting to modify the `namespace`, `key`, `permission_set`, or `value` field using an API account different from the one used to create those metafields will result in a `403` error message.
         */
        readonly put: operations["updateProductMetafield"];
        /**
         * Delete a Product Metafield
         * @description Deletes a *Product Metafield*.
         */
        readonly delete: operations["deleteProductMetafield"];
    };
    readonly "/catalog/products/{product_id}/reviews": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get Product Reviews
         * @description Returns a list of all *Product Reviews*. Optional parameters can be passed in.
         */
        readonly get: operations["getProductReviews"];
        /**
         * Create a Product Review
         * @description Creates a *Product Review*.
         *
         *     **Required Fields**
         *     - title
         *     - date_reviewed
         *
         *     **Read-Only Fields**
         *     * id
         */
        readonly post: operations["createProductReview"];
    };
    readonly "/catalog/products/{product_id}/reviews/{review_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `review` that is being operated on.
                 *      */
                readonly review_id: components["parameters"]["ReviewIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Product Review
         * @description Returns a single *Product Review*. Optional parameters maybe passed in.
         */
        readonly get: operations["getProductReview"];
        /**
         * Update a Product Review
         * @description Updates a *Product Review*.
         *
         *     **Required Fields**
         *     * none
         *
         *     **Read-Only Fields**
         *     * id
         */
        readonly put: operations["updateProductReview"];
        /**
         * Delete a Product Review
         * @description Deletes a *Product Review*.
         */
        readonly delete: operations["deleteProductReview"];
    };
    readonly "/catalog/products/channel-assignments": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Products Channel Assignments
         * @description Returns a list of products channel assignments.
         */
        readonly get: operations["getProductsChannelAssignments"];
        /**
         * Create Products Channel Assignments
         * @description Creates products channel assignments.
         *
         *     Notes:
         *      * Avoid parallel assignment requests if possible.
         *      * Do not make parallel assignment requests with the same product IDs.
         *
         */
        readonly put: operations["createProductsChannelAssignments"];
        /**
         * Delete Products Channel Assignments
         * @description Delete products channel assignments. A filter must be supplied.
         */
        readonly delete: operations["deleteProductsChannelAssignments"];
    };
    readonly "/catalog/products/category-assignments": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Products Category Assignments
         * @description Returns a list of products category assignments.
         */
        readonly get: operations["getProductsCategoryAssignments"];
        /**
         * Create Products Category Assignments
         * @description Creates products category assignments.
         */
        readonly put: operations["createProductsCategoryAssignments"];
        /**
         * Delete Products Category Assignments
         * @description Deletes products category assignments. A filter must be supplied.
         */
        readonly delete: operations["deleteProductsCategoryAssignments"];
    };
    readonly "/catalog/summary": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get a Catalog Summary
         * @description Returns a lightweight inventory summary from the BigCommerce Catalog.
         *
         *     The inventory summary includes:
         *     * "inventory_count"
         *     * "variant_count"
         *     * "inventory_value"
         *     * "highest_variant_price"
         *     * "average_variant_price"
         *     * "lowest_variant_price"
         *     * "oldest_variant_date"
         *     * "newest_variant_date"
         *     * "primary_category_id"
         *     * "primary_category_name"
         */
        readonly get: operations["getCatalogSummary"];
    };
    readonly "/catalog/products/metafields": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Product Metafields
         * @description Get all product metafields.
         */
        readonly get: operations["getProductsMetafields"];
        /**
         * Update multiple Metafields
         * @description Update multiple metafields.
         */
        readonly put: operations["updateProductsMetafields"];
        /**
         * Create multiple Metafields
         * @description Create multiple metafields.
         */
        readonly post: operations["createProductsMetafields"];
        /**
         * Delete Multiple Metafields
         * @description Delete all product metafields.
         */
        readonly delete: operations["deleteProductsMetafields"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        readonly modifierCondition: {
            /**
             * @description Use the [get all product modifiers](/docs/rest-catalog/product-modifiers#get-all-product-modifiers) endpoint to determine the `option_values` `id`. The `option_values` `id` is the `modifier_value_id`.
             * @example 55
             */
            readonly modifier_id?: number;
            /**
             * @description Use the [get all product modifiers](/docs/rest-catalog/product-modifiers#get-all-product-modifiers) endpoint to determine the `option_values` `option_id`. The `option_values` `option_id` is the same as the `modifier_id`.
             * @example 256
             */
            readonly modifier_value_id?: number;
        };
        readonly variantCondition: {
            /**
             * @description Use the [get all product variants](/docs/rest-catalog/product-variants#get-all-product-variants) endpoint to determine the variant `id`.
             * @example 1
             */
            readonly variant_id?: number;
        };
        readonly conditionsRequest: readonly (components["schemas"]["modifierCondition"] | components["schemas"]["variantCondition"])[];
        /**
         * productModifier_Base
         * @description Common Modifier properties.
         */
        readonly productModifier_Base: {
            /**
             * @description BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST.
             *
             * @enum {string}
             */
            readonly type: "date" | "checkbox" | "file" | "text" | "multi_line_text" | "numbers_only_text" | "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
            /** @description Whether or not this modifer is required or not at checkout. Required in a /POST.
             *      */
            readonly required: boolean;
            /** @description The order the modifiers display on the product detail page. */
            readonly sort_order?: number;
            readonly config?: components["schemas"]["config_Full"];
            /** @description The name of the option shown on the storefront. */
            readonly display_name?: string;
        };
        /**
         * productModifier_Full
         * @description Product Modifier
         */
        readonly productModifier_Full: components["schemas"]["productModifier_Base"] & {
            /**
             * @description The unique numeric ID of the modifier; increments sequentially.
             *
             * @example 12
             */
            readonly id?: number;
            /**
             * @description The unique numeric ID of the product to which the option belongs.
             *
             * @example 77
             */
            readonly product_id?: number;
            /**
             * @description The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
             *
             * @example Add-a-$5-Donation1535039590-191
             */
            readonly name?: string;
            readonly option_values?: readonly components["schemas"]["productModifierOptionValue_Full"][];
        };
        /**
         * productModifierOptionValue_Base
         * @description Common Product Modifer `option_value` properties.
         */
        readonly productModifierOptionValue_Base: {
            /**
             * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
             *
             * @example false
             */
            readonly is_default?: boolean;
            /**
             * @description The text display identifying the value on the storefront. Required in a /POST.
             *
             * @example Green
             */
            readonly label: string;
            /**
             * @description The order in which the value will be displayed on the product page. Required in a /POST.
             *
             * @example 0
             */
            readonly sort_order: number;
            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`.
             *      */
            readonly value_data?: Record<string, unknown> | null;
            readonly adjusters?: components["schemas"]["adjusters_Full"];
        };
        /**
         * productModifierOptionValue_Full
         * @description Product Modifer `option_value`.
         */
        readonly productModifierOptionValue_Full: components["schemas"]["productModifierOptionValue_Base"] & {
            /** @description The unique numeric ID of the value; increments sequentially.
             *      */
            readonly id?: number;
            readonly option_id?: number;
        };
        /**
         * productOption_Base
         * @description Common Option properties.
         */
        readonly productOption_Base: {
            /**
             * @description The unique numerical ID of the option, increments sequentially.
             *
             * @example 55
             */
            readonly id?: number | null;
            /**
             * @description The unique numerical ID of the product to which the option belongs.
             *
             * @example 4
             */
            readonly product_id?: number;
            /**
             * @description The name of the option shown on the storefront.
             *
             * @example Add-a-$5-Donation1535042499-187
             */
            readonly display_name?: string;
            /**
             * @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
             *
             * @enum {string}
             */
            readonly type?: "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
            readonly config?: components["schemas"]["productOptionConfig_Full"];
            /**
             * @description Order in which the option is displayed on the storefront.
             * @example 1
             */
            readonly sort_order?: number;
            readonly option_values?: readonly components["schemas"]["productOptionOptionValue_Full"][];
        };
        /**
         * productVariant_Base
         * @description Common Variant properties.
         */
        readonly productVariant_Base: {
            /**
             * Format: double
             * @description The cost price of the variant. Not affected by Price List prices.
             */
            readonly cost_price?: number | null;
            /**
             * Format: double
             * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
             */
            readonly price?: number | null;
            /**
             * Format: double
             * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
             */
            readonly sale_price?: number | null;
            /**
             * Format: double
             * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
             */
            readonly retail_price?: number | null;
            /** @description Minimum Advertised Price. */
            readonly map_price?: number;
            /**
             * Format: double
             * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
             */
            readonly weight?: number | null;
            /**
             * Format: double
             * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default width (set in the Product resourceʼs `width` field) will be used as the base width.
             *
             */
            readonly width?: number | null;
            /**
             * Format: double
             * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default height (set in the Product resourceʼs `height` field) will be used as the base height.
             *
             */
            readonly height?: number | null;
            /**
             * Format: double
             * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default depth (set in the Product resourceʼs `depth` field) will be used as the base depth.
             *
             */
            readonly depth?: number | null;
            /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.
             *      */
            readonly is_free_shipping?: boolean;
            /**
             * Format: double
             * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
             *
             */
            readonly fixed_cost_shipping_price?: number | null;
            /** @description If `true`, this variant will not be purchasable on the storefront. */
            readonly purchasing_disabled?: boolean;
            /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
            readonly purchasing_disabled_message?: string;
            /**
             * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
             *
             * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
             */
            readonly image_url?: string;
            /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
            readonly upc?: string;
            /** @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. The Catalog API returns the inventory for only the default location.
             *
             *     The inventory for a variant cannot exceed 2,147,483,647 in the catalog. The sum of the variant inventories, or the total inventory for a product, cannot exceed 2,147,483,647.
             *
             *     If you exceed the limit, the store sets the variant inventory to the limit if no other variant inventories are set. If other variant inventories are set, the store does not save the variant inventory rather than setting the variant inventory to the remaining limit.
             *
             *     The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).  */
            readonly inventory_level?: number | null;
            /** @description When the variant hits this inventory level, it is considered low stock. */
            readonly inventory_warning_level?: number | null;
            /** @description Identifies where in a warehouse the variant is located. */
            readonly bin_picking_number?: string | null;
            /** @description The Manufacturer Part Number (MPN) for the variant. */
            readonly mpn?: string;
            /** @example 012345678905 */
            readonly gtin?: string;
        };
        /** productVariant_Full */
        readonly productVariant_Full: components["schemas"]["productVariant_Base"] & {
            /** @description Product ID */
            readonly product_id: number;
            /** @description Variant ID */
            readonly id: number;
            /** @description A unique user-defined alphanumeric product code/stock keeping unit (SKU). The SKU is always unique regardless of the letter case for both products and variants. */
            readonly sku: string;
            /** @example 70 */
            readonly sku_id?: number;
            /** @description Array of option and option values IDs that make up this variant. Will be empty if the variant is the productʼs base variant. */
            readonly option_values?: readonly components["schemas"]["productVariantOptionValue_Full"][];
            /**
             * Format: double
             * @description The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant.
             *
             */
            readonly calculated_price?: number;
            readonly calculated_weight?: number;
        };
        /**
         * productVariant_Put_Product
         * @description The model for a PUT to update variants on a product.
         *
         */
        readonly productVariant_Put_Product: {
            /**
             * Format: double
             * @description The cost price of the variant. Not affected by Price List prices.
             */
            readonly cost_price?: number | null;
            /**
             * Format: double
             * @description This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
             */
            readonly price?: number | null;
            /**
             * Format: double
             * @description This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
             */
            readonly sale_price?: number | null;
            /**
             * Format: double
             * @description This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
             */
            readonly retail_price?: number | null;
            /**
             * Format: double
             * @description This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
             */
            readonly weight?: number | null;
            /**
             * Format: double
             * @description Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default width (set in the Product resourceʼs `width` field) will be used as the base width.
             *
             */
            readonly width?: number | null;
            /**
             * Format: double
             * @description Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default height (set in the Product resourceʼs `height` field) will be used as the base height.
             *
             */
            readonly height?: number | null;
            /**
             * Format: double
             * @description Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default depth (set in the Product resourceʼs `depth` field) will be used as the base depth.
             *
             */
            readonly depth?: number | null;
            /** @description Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.
             *      */
            readonly is_free_shipping?: boolean;
            /**
             * Format: double
             * @description A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
             *
             */
            readonly fixed_cost_shipping_price?: number | null;
            /** @description If `true`, this variant will not be purchasable on the storefront. */
            readonly purchasing_disabled?: boolean;
            /** @description If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected. */
            readonly purchasing_disabled_message?: string;
            /** @description The UPC code used in feeds for shopping comparison sites and external channel integrations. */
            readonly upc?: string;
            /** @description Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. The Catalog API returns the inventory for only the default location.
             *
             *     The inventory for a variant cannot exceed 2,147,483,647 in the catalog. The sum of the variant inventories, or the total inventory for a product, cannot exceed 2,147,483,647.
             *
             *     If you exceed the limit, the store sets the variant inventory to the limit if no other variant inventories are set. If other variant inventories are set, the store does not save the variant inventory rather than setting the variant inventory to the remaining limit.
             *
             *     The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).  */
            readonly inventory_level?: number | null;
            /** @description When the variant hits this inventory level, it is considered low stock. */
            readonly inventory_warning_level?: number | null;
            /** @description Identifies where in a warehouse the variant is located. */
            readonly bin_picking_number?: string | null;
            /** @description Product ID */
            readonly product_id: number;
            /** @description Variant ID */
            readonly id: number;
            readonly sku?: string;
        };
        /** productVariantOptionValue_Full */
        readonly productVariantOptionValue_Full: {
            /** @description The option_value ID. */
            readonly id?: number;
            /**
             * @description The label of the option value.
             *
             * @example Beige
             */
            readonly label: string;
            /**
             * @description The option ID.
             * @example 151
             */
            readonly option_id?: number;
            /**
             * @description The name of the option.
             *
             * @example Color
             */
            readonly option_display_name: string;
        };
        /**
         * productVariantOptionValue_Base
         * @description Common Product Variant Option properties.
         */
        readonly productVariantOptionValue_Base: {
            /**
             * @description `option_value` ID.
             * @example 146
             */
            readonly id?: number;
            /**
             * @description `option` ID.
             * @example 151
             */
            readonly option_id?: number;
        };
        /**
         * productOptionOptionValue_Base
         * @description Common Product Option `option_value` properties.
         */
        readonly productOptionOptionValue_Base: {
            /**
             * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
             *
             * @example false
             */
            readonly is_default?: boolean;
            /**
             * @description The text display identifying the value on the storefront. Required in a /POST.
             *
             * @example Green
             */
            readonly label: string;
            /**
             * @description The order in which the value will be displayed on the product page. Required in a /POST.
             *
             * @example 0
             */
            readonly sort_order: number;
            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`.
             *      */
            readonly value_data?: Record<string, unknown> | null;
        };
        /**
         * productOptionOptionValue_Full
         * @description Product Option `option_value`.
         */
        readonly productOptionOptionValue_Full: components["schemas"]["productOptionOptionValue_Base"] & {
            /** @description The unique numeric ID of the value; increments sequentially.
             *      */
            readonly id?: number;
        };
        /**
         * productImage_Base
         * @description Common ProductImage properties.
         */
        readonly productImage_Base: {
            /** @description Flag for identifying whether the image is used as the productʼs thumbnail.
             *      */
            readonly is_thumbnail?: boolean;
            /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered.
             *      */
            readonly sort_order?: number;
            /** @description The description for the image.
             *      */
            readonly description?: string;
            /**
             * Format: date-time
             * @description The date on which the product image was modified.
             *
             */
            readonly date_modified?: string;
        };
        /**
         * productImage_Post_Put
         * @description The model for a POST or PUT to create  or update applicable Product Image fields.
         */
        readonly productImage_Post_Put: {
            /** @description The unique numeric identifier for the product with which the image is associated.
             *      */
            readonly product_id?: number;
            /** @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
             *
             *     Cannot be used with `image_file`.
             *      */
            readonly image_url?: string;
        } & components["schemas"]["productImage_Base"];
        /**
         * productVideo_Base
         * @description The model for a POST to create a video on a product.
         *
         */
        readonly productVideo_Base: {
            /**
             * @description The title for the video. If left blank, this will be filled in according to data on a host site.
             *
             * @example Writing Great Documentation
             */
            readonly title?: string;
            /**
             * @description The description for the video. If left blank, this will be filled in according to data on a host site.
             *
             * @example A video about documenation
             */
            readonly description?: string;
            /**
             * @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the videoʼs new `sort_order` value will have their `sort_order`s reordered.
             *
             * @example 1
             */
            readonly sort_order?: number;
            /**
             * @description The video type (a short name of a host site).
             *
             * @enum {string}
             */
            readonly type?: "youtube";
            /**
             * @description The ID of the video on a host site.
             * @example z3fRu9pkuXE
             */
            readonly video_id?: string;
        };
        /**
         * productVideo_Full
         * @description A product video model.
         *
         */
        readonly productVideo_Full: components["schemas"]["productVideo_Base"] & {
            /** @description The unique numeric ID of the product video; increments sequentially.
             *      */
            readonly id?: number;
            /** @description The unique numeric identifier for the product with which the image is associated.
             *      */
            readonly product_id?: number;
            /** @description Length of the video. This will be filled in according to data on a host site.
             *      */
            readonly length?: string;
        };
        readonly IncludeParamBase: readonly ("bulk_pricing_rules" | "reviews" | "modifiers" | "options" | "parent_relations" | "custom_fields" | "channels" | "videos")[];
        /**
         * product_Put
         * @description The model for a PUT to update a product.
         */
        readonly product_Put: Record<string, unknown> & components["schemas"]["product_Base_PUT"];
        /**
         * metafield_Base
         * @description Metafield for products, categories, variants, and brands; the max number of metafields allowed on each is 250. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        readonly metafield_Base: {
            /**
             * @description The name of the field, for example: `location_id`, `color`. Required for POST.
             *
             * @example Location
             */
            readonly key: string;
            /**
             * @description The value of the field, for example: `1`, `blue`. You must enter a JSON formatted string for [ShipperHQ](/docs/store-operations/shipping/shipper-hq#shipperhq-object-properties) metafields. Required for POST.
             *
             * @example 4HG
             */
            readonly value: string;
            /**
             * @description Namespace for the metafield, for organizational purposes. This is set by the developer. Required for POST.
             *
             * @example Warehouse Locations
             */
            readonly namespace: string;
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *
             *     |Value|Description
             *     |-|-|
             *     |`app_only`|Private to the app that owns the field|
             *     |`read`|Visible to other API consumers|
             *     |`write`|Open for reading and writing by other API consumers|
             *     |`read_and_sf_access`|Visible to other API consumers, including on storefront|
             *     |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
             * @enum {string}
             */
            readonly permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Description for the metafields.
             *
             * @example Location in the warehouse
             */
            readonly description?: string;
        };
        /**
         * complexRule_Base
         * @description Common ComplexRule properties.
         */
        readonly complexRule_Base: {
            /**
             * @description The unique numeric ID of the rule; increments sequentially.
             *     Read-Only
             * @example 5
             */
            readonly id?: number;
            /**
             * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
             *
             * @example 67
             */
            readonly product_id?: number | null;
            /**
             * @description The priority to give this rule when making adjustments to the product properties.
             *
             * @example 0
             */
            readonly sort_order?: number;
            /**
             * @description Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
             *
             * @example true
             */
            readonly enabled?: boolean;
            /** @description Flag for determining whether other rules should not be applied after this rule has been applied.
             *      */
            readonly stop?: boolean;
            /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.
             *      */
            readonly purchasing_disabled?: boolean;
            /**
             * @description Message displayed on the storefront when a rule disables the purchasing of a product.
             *
             * @example This product is not available at this time.
             */
            readonly purchasing_disabled_message?: string;
            /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.
             *      */
            readonly purchasing_hidden?: boolean;
            /**
             * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
             *
             * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
             */
            readonly image_url?: string;
            readonly price_adjuster?: components["schemas"]["adjuster_Full"];
            readonly weight_adjuster?: components["schemas"]["adjuster_Full"];
            readonly conditions?: readonly components["schemas"]["complexRuleConditionBase"][];
        };
        /**
         * productCustomField_Base
         * @description Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product’s page, such as a book’s ISBN or a DVD’s release date.
         */
        readonly productCustomField_Base: {
            /**
             * @description The unique numeric ID of the custom field; increments sequentially.
             *     Read-Only
             * @example 6
             */
            readonly id?: number;
            /**
             * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
             *
             * @example ISBN
             */
            readonly name: string;
            /**
             * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
             *
             * @example 1234567890123
             */
            readonly value: string;
        };
        /**
         * productCustomField_Put
         * @description The model for a PUT to update a custom field on a product.
         */
        readonly productCustomField_Put: {
            /**
             * @description The unique numeric ID of the custom field; increments sequentially. Required to update existing custom field in /PUT request.
             *     Read-Only
             * @example 6
             */
            readonly id?: number;
            /**
             * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
             *
             * @example ISBN
             */
            readonly name: string;
            /**
             * @description The name of the field, shown on the storefront, orders, etc. Required for /POST
             *
             * @example 1234567890123
             */
            readonly value: string;
        };
        /**
         * complexRuleConditionBase
         * @description Complex rules may return with conditions that apply to one or more variants, or with a single modifier value (if the rules were created using the v2 API or the control panel). Complex rules created or updated in the v3 API must have conditions that either reference multiple `modifier_value_id`’s, or else reference a `modifier_value_id` and a `variant_id`.
         */
        readonly complexRuleConditionBase: {
            /**
             * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
             *
             * @example 3
             */
            readonly id?: number | null;
            /**
             * @description The unique numeric ID of the rule with which the condition is associated.
             *     Read-Only
             * @example 4
             */
            readonly rule_id?: number | null;
            /**
             * @description The unique numeric ID of the modifier with which the rule condition is associated.
             *     Required in /POST.
             * @example 55
             */
            readonly modifier_id: number | null;
            /**
             * @description The unique numeric ID of the modifier value with which the rule condition is associated.
             *     Required in /POST.
             * @example 256
             */
            readonly modifier_value_id: number | null;
            /**
             * @description The unique numeric ID of the variant with which the rule condition is associated.
             *     Required in /POST.
             * @example 1
             */
            readonly variant_id: number | null;
            /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3.
             *      */
            readonly combination_id?: number;
        };
        /**
         * customUrl_Full
         * @description The custom URL for the product on the storefront. If not provided in the POST request, the URL will be autogenerated from the product name.
         */
        readonly customUrl_Full: {
            /** @description Product URL on the storefront.
             *      */
            readonly url?: string;
            /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
             *      */
            readonly is_customized?: boolean;
            /** @description Optional field. This field automatically creates a dynamic 301 redirect when a product URL change occurs with a PUT request. Existing dynamic redirects will automatically update to a new URL to avoid a loop.
             *      */
            readonly create_redirect?: boolean;
        };
        /** bulkPricingRule_Response */
        readonly bulkPricingRule_Response: {
            /**
             * @description The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero. For `fixed` rules, the minimum quantity canʼt be less than two.
             *     Required in /POST.
             *
             * @example 10
             */
            readonly quantity_min?: number;
            /**
             * @description The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.
             *     Required in /POST.
             * @example 50
             */
            readonly quantity_max?: number;
            /**
             * @description The type of adjustment that is made. Values: `price` - the adjustment amount per product; `percent` - the adjustment as a percentage of the original price; `fixed` - the adjusted absolute price of the product.
             *     Required in /POST.
             * @example price
             * @enum {string}
             */
            readonly type?: "price" | "percent" | "fixed";
            /** @description You can express the adjustment type as either a fixed dollar amount or a percentage. Send a number; the response will return a number for `price` and `fixed` adjustments.
             *     Divide the adjustment percentage by 100 and send the result in string format. For example, represent 10% as “.10”. The response will return a float value for both `price` and `percentage` adjustments.  */
            readonly amount?: number | string;
        };
        /** bulkPricingRule_Full */
        readonly bulkPricingRule_Full: {
            /**
             * @description The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero. For `fixed` rules, the minimum quantity canʼt be less than two.
             *     Required in /POST.
             *
             * @example 10
             */
            readonly quantity_min: number;
            /**
             * @description The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.
             *     Required in /POST.
             * @example 50
             */
            readonly quantity_max: number;
            /**
             * @description The type of adjustment that is made. Values: `price` - the adjustment amount per product; `percent` - the adjustment as a percentage of the original price; `fixed` - the adjusted absolute price of the product.
             *     Required in /POST.
             * @example price
             * @enum {string}
             */
            readonly type: "price" | "percent" | "fixed";
            /** @description You can express the adjustment type as either a fixed dollar amount or a percentage. Send a number; the response will return a number for `price` and `fixed` adjustments.
             *     Divide the adjustment percentage by 100 and send the result in string format. For example, represent 10% as “.10”. The response will return a float value for both `price` and `percentage` adjustments.
             *     Required in /POST. */
            readonly amount: number | string;
        };
        /**
         * productOptionConfig_Full
         * @description The values for option config can vary based on the Modifier created.
         */
        readonly productOptionConfig_Full: {
            /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.
             *      */
            readonly default_value?: string;
            /** @description (checkbox) Flag for setting the checkbox to be checked by default.
             *      */
            readonly checked_by_default?: boolean;
            /** @description (checkbox) Label displayed for the checkbox option.
             *      */
            readonly checkbox_label?: string;
            /** @description (date) Flag to limit the dates allowed to be entered on a date option.
             *      */
            readonly date_limited?: boolean;
            /**
             * @description (date) The type of limit that is allowed to be entered on a date option.
             *
             * @example range
             * @enum {string}
             */
            readonly date_limit_mode?: "earliest" | "range" | "latest";
            /**
             * Format: date
             * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             */
            readonly date_earliest_value?: string;
            /**
             * Format: date
             * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             */
            readonly date_latest_value?: string;
            /**
             * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
             *
             * @example specific
             * @enum {string}
             */
            readonly file_types_mode?: "specific" | "all";
            /** @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *       `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *       `other` - Allows file types defined in the `file_types_other` array.
             *      */
            readonly file_types_supported?: readonly string[];
            /** @description (file) A list of other file types allowed with the file upload option.
             *      */
            readonly file_types_other?: readonly string[];
            /**
             * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
             *
             * @example 5
             */
            readonly file_max_size?: number;
            /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
             *      */
            readonly text_characters_limited?: boolean;
            /**
             * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
             *
             * @example 1
             */
            readonly text_min_length?: number;
            /**
             * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
             *
             * @example 55
             */
            readonly text_max_length?: number;
            /**
             * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
             *
             * @example true
             */
            readonly text_lines_limited?: boolean;
            /**
             * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
             *
             * @example 4
             */
            readonly text_max_lines?: number;
            /**
             * @description (numbers_only_text) Flag to limit the value of a number option.
             *
             * @example true
             */
            readonly number_limited?: boolean;
            /**
             * @description (numbers_only_text) The type of limit on values entered for a number option.
             *
             * @example lowest
             * @enum {string}
             */
            readonly number_limit_mode?: "lowest" | "highest" | "range";
            /**
             * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
             *
             * @example 100
             */
            readonly number_lowest_value?: number;
            /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
             *      */
            readonly number_highest_value?: number;
            /**
             * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
             *
             * @example false
             */
            readonly number_integers_only?: boolean;
            /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
             *      */
            readonly product_list_adjusts_inventory?: boolean;
            /** @description (product_list, product_list_with_images) Flag to add the optional productʼs price to the main productʼs price.
             *      */
            readonly product_list_adjusts_pricing?: boolean;
            /**
             * @description (product_list, product_list_with_images) How to factor the optional productʼs weight and package dimensions into the shipping quote. Values: `none` - donʼt adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
             *
             * @example weight
             * @enum {string}
             */
            readonly product_list_shipping_calc?: "none" | "weight" | "package";
        };
        /**
         * adjuster_Full
         * @description Adjuster for Complex Rules.
         */
        readonly adjuster_Full: {
            /**
             * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @enum {string|null}
             */
            readonly adjuster?: "relative" | "percentage" | null;
            /**
             * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             * @example 5
             */
            readonly adjuster_value?: number;
        };
        /**
         * metaCollection_Full
         * @description Data about the response, including pagination and collection totals.
         */
        readonly metaCollection_Full: {
            readonly pagination?: components["schemas"]["pagination_Full"];
        };
        /**
         * pagination_Full
         * @description Data about the response, including pagination and collection totals.
         */
        readonly pagination_Full: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 36
             */
            readonly total?: number;
            /**
             * @description Total number of items in the collection response.
             *
             * @example 36
             */
            readonly count?: number;
            /**
             * @description The amount of items returned in the collection per page, controlled by the limit parameter.
             *
             * @example 50
             */
            readonly per_page?: number;
            /**
             * @description The page you are currently on within the collection.
             *
             * @example 1
             */
            readonly current_page?: number;
            /**
             * @description The total number of pages in the collection.
             *
             * @example 1
             */
            readonly total_pages?: number;
            /** @description Pagination links for the previous and next parts of the whole collection.
             *      */
            readonly links?: {
                /** @description Link to the previous page returned in the response.
                 *      */
                readonly previous?: string;
                /**
                 * @description Link to the current page returned in the response.
                 *
                 * @example ?page=1&limit=50
                 */
                readonly current?: string;
                /** @description Link to the next page returned in the response.
                 *      */
                readonly next?: string;
            };
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly metaEmpty_Full: {
            readonly [key: string]: unknown;
        };
        /**
         * error_Base
         * @description Error payload for the BigCommerce API.
         *
         */
        readonly error_Base: {
            /** @description The HTTP status code.
             *      */
            readonly status?: number;
            /** @description The error title describing the particular error.
             *      */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
        };
        /** errorMultiStatus */
        readonly errorMultiStatus: {
            /** @description The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status) of the failure or partial success. */
            readonly status?: number;
            /** @description A summary of the failure or partial success. */
            readonly title?: string;
            /** @description A BigCommerce-defined error signifier. */
            readonly type?: string;
            readonly errors?: components["schemas"]["DetailedErrors"];
        };
        /**
         * DetailedErrors
         * @description Each key-value pair describes a failure or partial success case.
         */
        readonly DetailedErrors: {
            readonly [key: string]: unknown;
        };
        /** product_Full */
        readonly product_Full: {
            /** @description ID of the product. Read-Only. */
            readonly id?: number;
        } & components["schemas"]["product_Base_response"] & {
            /**
             * Format: date-time
             * @description The date on which the product was created.
             *
             * @example 2018-08-15T14:49:05+00:00
             */
            readonly date_created?: string;
            /**
             * Format: date-time
             * @description The date on which the product was modified.
             *
             * @example 2018-08-24T14:41:00+00:00
             */
            readonly date_modified?: string;
            /** @description The unique identifier of the base variant associated with a simple product. This value is `null` for complex products. */
            readonly base_variant_id?: number;
            /**
             * Format: float
             * @description The calculated_price is derived from the default price and sale price of the product. It is equal to the sale price if set or the default price if there is not a sale price present. Depending on your store settings and customer group, or channel-specific pricing, this value may or may not be equal to the price seen on the storefront.
             */
            readonly calculated_price?: number;
            readonly options?: readonly components["schemas"]["productOption_Base"][];
            readonly modifiers?: readonly components["schemas"]["productModifier_Full"][];
            /** @description Minimum Advertised Price. */
            readonly map_price?: number;
            /** @description Indicates that the product is in an Option Set (legacy V2 concept). */
            readonly option_set_id?: number;
            /** @description Legacy template setting which controls if the option set shows up to the side of or below the product image and description. */
            readonly option_set_display?: string;
        };
        /**
         * productImage_Full
         * @description Common ProductImage properties.
         */
        readonly productImage_Full: components["schemas"]["productImage_Base"] & {
            /** @description The unique numeric ID of the image; increments sequentially.
             *      */
            readonly id?: number;
            /** @description The unique numeric identifier for the product with which the image is associated.
             *      */
            readonly product_id?: number;
            /** @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
             *
             *     Cannot be used with `image_file`.
             *      */
            readonly image_url?: string;
            /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image.
             *      */
            readonly url_zoom?: string;
            /** @description The standard URL for this image. By default, this is used for product-page images.
             *      */
            readonly url_standard?: string;
            /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels.
             *      */
            readonly url_thumbnail?: string;
            /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page.
             *      */
            readonly url_tiny?: string;
            /**
             * Format: date-time
             * @description The date on which the product image was modified.
             *
             */
            readonly date_modified?: string;
        };
        /**
         * primaryImage_Full
         * @description Common PrimaryImage properties.
         */
        readonly primaryImage_Full: {
            /** @description The unique numeric ID of the image; increments sequentially.
             *      */
            readonly id?: number;
            /** @description The unique numeric identifier for the product with which the image is associated.
             *      */
            readonly product_id?: number;
            /** @description Flag for identifying whether the image is used as the productʼs thumbnail.
             *      */
            readonly is_thumbnail?: boolean;
            /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered.
             *      */
            readonly sort_order?: number;
            /** @description The description for the image.
             *      */
            readonly description?: string;
            /** @description The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
             *
             *     Must be sent as a `multipart/form-data` field in the request body. Limit of 8 MB per file.
             *      */
            readonly image_file?: string;
            /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image.
             *      */
            readonly url_zoom?: string;
            /** @description The standard URL for this image. By default, this is used for product-page images.
             *      */
            readonly url_standard?: string;
            /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels.
             *      */
            readonly url_thumbnail?: string;
            /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page.
             *      */
            readonly url_tiny?: string;
            /**
             * Format: date-time
             * @description The date on which the product image was modified.
             *
             */
            readonly date_modified?: string;
        };
        /**
         * product_Put_Collection
         * @description The model for batch updating products.
         */
        readonly product_Put_Collection: readonly ({
            /** @description Unique ID of the *Product*. Read-Only. */
            readonly id: number;
        } & components["schemas"]["product_Base_PUT"])[];
        /**
         * config_Full
         * @description The values for option config can vary based on the Modifier created.
         */
        readonly config_Full: {
            /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.
             *      */
            readonly default_value?: string;
            /** @description (checkbox) Flag for setting the checkbox to be checked by default.
             *      */
            readonly checked_by_default?: boolean;
            /** @description (checkbox) Label displayed for the checkbox option.
             *      */
            readonly checkbox_label?: string;
            /** @description (date) Flag to limit the dates allowed to be entered on a date option.
             *      */
            readonly date_limited?: boolean;
            /**
             * @description (date) The type of limit that is allowed to be entered on a date option.
             *
             * @example range
             * @enum {string}
             */
            readonly date_limit_mode?: "earliest" | "range" | "latest";
            /**
             * Format: date
             * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             */
            readonly date_earliest_value?: string;
            /**
             * Format: date
             * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             */
            readonly date_latest_value?: string;
            /**
             * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
             *
             * @example specific
             * @enum {string}
             */
            readonly file_types_mode?: "specific" | "all";
            /** @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *       `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *       `other` - Allows file types defined in the `file_types_other` array.
             *      */
            readonly file_types_supported?: readonly string[];
            /** @description (file) A list of other file types allowed with the file upload option.
             *      */
            readonly file_types_other?: readonly string[];
            /**
             * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
             *
             * @example 5
             */
            readonly file_max_size?: number;
            /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
             *      */
            readonly text_characters_limited?: boolean;
            /**
             * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
             *
             * @example 1
             */
            readonly text_min_length?: number;
            /**
             * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
             *
             * @example 55
             */
            readonly text_max_length?: number;
            /**
             * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
             *
             * @example true
             */
            readonly text_lines_limited?: boolean;
            /**
             * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
             *
             * @example 4
             */
            readonly text_max_lines?: number;
            /**
             * @description (numbers_only_text) Flag to limit the value of a number option.
             *
             * @example true
             */
            readonly number_limited?: boolean;
            /**
             * @description (numbers_only_text) The type of limit on values entered for a number option.
             *
             * @example lowest
             * @enum {string}
             */
            readonly number_limit_mode?: "lowest" | "highest" | "range";
            /**
             * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
             *
             * @example 100
             */
            readonly number_lowest_value?: number;
            /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
             *      */
            readonly number_highest_value?: number;
            /**
             * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
             *
             * @example false
             */
            readonly number_integers_only?: boolean;
            /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
             *      */
            readonly product_list_adjusts_inventory?: boolean;
            /** @description (product_list, product_list_with_images) Flag to add the optional productʼs price to the main productʼs price.
             *      */
            readonly product_list_adjusts_pricing?: boolean;
            /**
             * @description (product_list, product_list_with_images) How to factor the optional productʼs weight and package dimensions into the shipping quote. Values: `none` - donʼt adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
             *
             * @example weight
             * @enum {string}
             */
            readonly product_list_shipping_calc?: "none" | "weight" | "package";
        };
        /** adjusters_Full */
        readonly adjusters_Full: {
            readonly price?: components["schemas"]["adjuster_Full"];
            readonly weight?: components["schemas"]["adjuster_Full"];
            /**
             * @description The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
             *
             * @example https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2
             */
            readonly image_url?: string;
            readonly purchasing_disabled?: {
                /** @description Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.
                 *      */
                readonly status?: boolean;
                /** @description The message displayed on the storefront when the purchasing disabled status is `true`.
                 *      */
                readonly message?: string;
            };
        };
        /**
         * product_Base_POST
         * @description `Product` properties used in:
         *     * `POST`
         */
        readonly product_Base_POST: {
            /**
             * @description A unique product name.
             *
             * @example Smith Journal 13
             */
            readonly name: string;
            /**
             * @description The product type. One of: `physical` - a physical stock unit, `digital` - a digital download.
             *
             * @example physical
             * @enum {string}
             */
            readonly type: "physical" | "digital";
            /**
             * @description A unique user-defined alphanumeric product code/stock keeping unit (SKU). The SKU is always unique regardless of the letter case for both products and variants.
             *
             * @example SM-13
             */
            readonly sku?: string;
            /**
             * @description The product description, which can include HTML formatting.
             *
             * @example <p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>
             */
            readonly description?: string;
            /**
             * Format: float
             * @description Weight of the product, which can be used when calculating shipping costs. This is based on the unit set on the store
             *
             */
            readonly weight: number;
            /**
             * Format: float
             * @description Width of the product, which can be used when calculating shipping costs.
             *
             */
            readonly width?: number;
            /**
             * Format: float
             * @description Depth of the product, which can be used when calculating shipping costs.
             *
             */
            readonly depth?: number;
            /**
             * Format: float
             * @description Height of the product, which can be used when calculating shipping costs.
             *
             */
            readonly height?: number;
            /**
             * Format: float
             * @description The price of the product. The price should include or exclude tax, based on the store settings.
             *
             */
            readonly price: number;
            /**
             * Format: float
             * @description The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.
             *
             */
            readonly cost_price?: number;
            /**
             * Format: float
             * @description The retail cost of the product. If entered, the retail cost price will be shown on the product page.
             *
             */
            readonly retail_price?: number;
            /**
             * Format: float
             * @description If entered, the sale price will be used instead of value in the price field when calculating the productʼs cost.
             *
             */
            readonly sale_price?: number;
            /** @description Minimum Advertised Price */
            readonly map_price?: number;
            /** @description The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)
             *      */
            readonly tax_class_id?: number;
            /** @description Tax Codes, such as AvaTax System Tax Codes, identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to a tax provider integration, such as BigCommerceʼs Avalara Premium, can calculate sales taxes more accurately. Stores without a tax provider will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see the tax providerʼs documentation.
             *      */
            readonly product_tax_code?: string;
            /** @description An array of IDs for the categories to which this product belongs. You will overwrite all product categories when updating a product and supplying an array of categories. The limit is 1,000 ID values. When you enable the catalog V2 product experience in the control panel, you must include the categories array in the request body.
             *      */
            readonly categories?: readonly number[];
            /** @description You can add a product to an existing brand during a product /PUT or /POST. Use either the `brand_id` or the `brand_name` field. The response body can include `brand_id`.
             *      */
            readonly brand_id?: number;
            /**
             * @description You can create the brand during a product PUT or POST request. If the brand already exists, the product /PUT or /POST request adds the product to the brand. If not, the product /PUT or /POST request creates the brand and then adds the product to the brand. Brand name is not case-sensitive; "Common Good" and "Common good" are the same. Use either the `brand_id` or the `brand_name` field. The response body does not include `brand_name`.
             * @example Common Good
             */
            readonly brand_name?: string;
            /** @description Current inventory level of the product. You must track inventory by _product_ for this to take effect (see the `inventory_tracking` field). The Catalog API returns the inventory for only the default location.
             *
             *     The inventory for a product cannot exceed 2,147,483,647 in the catalog. If you exceed the limit, the store sets the inventory level to the limit.
             *
             *     The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).  */
            readonly inventory_level?: number;
            /** @description Inventory warning level for the product. When the productʼs inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the `inventory_tracking` field) for this to take any effect.
             *      */
            readonly inventory_warning_level?: number;
            /**
             * @description The type of inventory tracking for the product. Values are: `none` - inventory levels will not be tracked; `product` - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; `variant` - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels.
             *
             * @enum {string}
             */
            readonly inventory_tracking?: "none" | "product" | "variant";
            /**
             * Format: float
             * @description A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
             *
             */
            readonly fixed_cost_shipping_price?: number;
            /** @description Flag used to indicate whether the product has free shipping. If `true`, the shipping cost for the product will be zero.
             *      */
            readonly is_free_shipping?: boolean;
            /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the product will be displayed. If `false`, the product will be hidden from view.
             *      */
            readonly is_visible?: boolean;
            /** @description Flag to determine whether the product should be included in the `featured products` panel when viewing the store.
             *      */
            readonly is_featured?: boolean;
            /** @description An array of IDs for the related products.
             *      */
            readonly related_products?: readonly number[];
            /** @description Warranty information displayed on the product page. Can include HTML formatting.
             *      */
            readonly warranty?: string;
            /** @description The BIN picking number for the product.
             *      */
            readonly bin_picking_number?: string;
            /** @description The layout template file used to render this product category. This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
             *      */
            readonly layout_file?: string;
            /** @description The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations.
             *      */
            readonly upc?: string;
            /** @description A comma-separated list of keywords that can be used to locate the product when searching the store.
             *      */
            readonly search_keywords?: string;
            /** @description Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.'
             *      */
            readonly availability_description?: string;
            /**
             * @description Availability of the product. (Corresponds to the productʼs [Purchasability](https://support.bigcommerce.com/s/article/Adding-Products-v3?language=en_US#sections) section in the control panel.) Supported values: `available` - the product is available for purchase; `disabled` - the product is listed on the storefront, but cannot be purchased; `preorder` - the product is listed for pre-orders.
             *
             * @enum {string}
             */
            readonly availability?: "available" | "disabled" | "preorder";
            /**
             * @description Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift-wrapping on the product; `list` – provide a list of IDs in the `gift_wrapping_options_list` field.
             *
             *     Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
             *
             * @enum {string}
             */
            readonly gift_wrapping_options_type?: "any" | "none" | "list";
            /** @description A list of gift-wrapping option IDs.
             *
             *     Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
             *      */
            readonly gift_wrapping_options_list?: readonly number[];
            /** @description Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results.
             *      */
            readonly sort_order?: number;
            /**
             * @description The product condition. Will be shown on the product page if the `is_condition_shown` fieldʼs value is `true`. Possible values: `New`, `Used`, `Refurbished`.
             *
             * @enum {string}
             */
            readonly condition?: "New" | "Used" | "Refurbished";
            /** @description Flag used to determine whether the product condition is shown to the customer on the product page.
             *      */
            readonly is_condition_shown?: boolean;
            /** @description The minimum quantity an order must contain, to be eligible to purchase this product.
             *      */
            readonly order_quantity_minimum?: number;
            /** @description The maximum quantity an order can contain when purchasing the product.
             *      */
            readonly order_quantity_maximum?: number;
            /** @description Custom title for the product page. If not defined, the product name will be used as the meta title.
             *      */
            readonly page_title?: string;
            /** @description Custom meta keywords for the product page. If not defined, the storeʼs default keywords will be used.
             *      */
            readonly meta_keywords?: readonly string[];
            /** @description Custom meta description for the product page. If not defined, the storeʼs default meta description will be used.
             *      */
            readonly meta_description?: string;
            /**
             * @deprecated
             * @description The number of times the product has been viewed.
             *
             */
            readonly view_count?: number;
            /**
             * Format: date-time
             * @description Pre-order release date. See the `availability` field for details on setting a productʼs availability to accept pre-orders.
             *
             */
            readonly preorder_release_date?: string | null;
            /** @description Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the `%%DATE%%` placeholder, which will be substituted for the release date.
             *      */
            readonly preorder_message?: string;
            /** @description If set to true then on the preorder release date the preorder status will automatically be removed.
             *     If set to false, then on the release date the preorder status **will not** be removed. It will need to be changed manually either in the
             *     control panel or using the API. Using the API set `availability` to `available`.
             *      */
            readonly is_preorder_only?: boolean;
            /** @description False by default, indicating that this productʼs price should be shown on the product page. If set to `true`, the price is hidden. (NOTE: To successfully set `is_price_hidden` to `true`, the `availability` value must be `disabled`.)
             *      */
            readonly is_price_hidden?: boolean;
            /** @description By default, an empty string. If `is_price_hidden` is `true`, the value of `price_hidden_label` is displayed instead of the price. (NOTE: To successfully set a non-empty string value with `is_price_hidden` set to `true`, the `availability` value must be `disabled`.)
             *      */
            readonly price_hidden_label?: string;
            readonly custom_url?: components["schemas"]["customUrl_Full"];
            /**
             * @description Type of product, defaults to `product`.
             *
             * @enum {string}
             */
            readonly open_graph_type?: "product" | "album" | "book" | "drink" | "food" | "game" | "movie" | "song" | "tv_show";
            /** @description Title of the product, if not specified the product name will be used instead.
             *      */
            readonly open_graph_title?: string;
            /** @description Description to use for the product, if not specified then the meta_description will be used instead.
             *      */
            readonly open_graph_description?: string;
            /** @description Flag to determine if product description or open graph description is used.
             *      */
            readonly open_graph_use_meta_description?: boolean;
            /** @description Flag to determine if product name or open graph name is used.
             *      */
            readonly open_graph_use_product_name?: boolean;
            /** @description Flag to determine if product image or open graph image is used.
             *      */
            readonly open_graph_use_image?: boolean;
            /** @description Global Trade Item Number */
            readonly gtin?: string;
            /** @description Manufacturer Part Number */
            readonly mpn?: string;
            /** @description the date when the Product had been imported */
            readonly date_last_imported?: string;
            /**
             * @description The total (cumulative) rating for the product.
             *
             * @example 3
             */
            readonly reviews_rating_sum?: number;
            /**
             * @description The number of times the product has been rated.
             *
             * @example 4
             */
            readonly reviews_count?: number;
            /**
             * @description The total quantity of this product sold.
             *
             * @example 80
             */
            readonly total_sold?: number;
            /** @description 200 maximum custom fields per product. 255 maximum characters per custom field. */
            readonly custom_fields?: readonly components["schemas"]["productCustomField_Put"][];
            readonly bulk_pricing_rules?: readonly ({
                /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
                readonly id: number;
            } & components["schemas"]["bulkPricingRule_Full"])[];
            readonly images?: readonly components["schemas"]["productImage_Full"][];
            /** @description The Catalog API integrates with third-party YouTube.
             *     The [YouTube Terms of Service](https://www.youtube.com/t/terms) and [Google Privacy Policy](https://policies.google.com/privacy) apply, as indicated in our [Privacy Policy](https://www.bigcommerce.com/privacy/) and [Terms of Service](https://www.bigcommerce.com/terms/).
             *      */
            readonly videos?: readonly components["schemas"]["productVideo_Full"][];
            readonly variants?: readonly components["schemas"]["productVariant_Full"][];
        };
        /**
         * product_Base_PUT
         * @description `Product` properties used in:
         *     * `PUT`
         */
        readonly product_Base_PUT: {
            /**
             * @description A unique product name.
             *
             * @example Smith Journal 13
             */
            readonly name?: string;
            /**
             * @description The product type. One of: `physical` - a physical stock unit, `digital` - a digital download.
             *
             * @example physical
             * @enum {string}
             */
            readonly type?: "physical" | "digital";
            /**
             * @description A unique user-defined alphanumeric product code/stock keeping unit (SKU). The SKU is always unique regardless of the letter case for both products and variants.
             *
             * @example SM-13
             */
            readonly sku?: string;
            /**
             * @description The product description, which can include HTML formatting.
             *
             * @example <p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>
             */
            readonly description?: string;
            /**
             * Format: float
             * @description Weight of the product, which can be used when calculating shipping costs. This is based on the unit set on the store.
             *
             */
            readonly weight?: number;
            /**
             * Format: float
             * @description Width of the product, which can be used when calculating shipping costs.
             *
             */
            readonly width?: number;
            /**
             * Format: float
             * @description Depth of the product, which can be used when calculating shipping costs.
             *
             */
            readonly depth?: number;
            /**
             * Format: float
             * @description Height of the product, which can be used when calculating shipping costs.
             *
             */
            readonly height?: number;
            /**
             * Format: float
             * @description The price of the product. The price should include or exclude tax, based on the store settings.
             *
             */
            readonly price?: number;
            /**
             * Format: float
             * @description The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.
             *
             */
            readonly cost_price?: number;
            /**
             * Format: float
             * @description The retail cost of the product. If entered, the retail cost price will be shown on the product page.
             *
             */
            readonly retail_price?: number;
            /**
             * Format: float
             * @description If entered, the sale price will be used instead of value in the price field when calculating the productʼs cost.
             *
             */
            readonly sale_price?: number;
            /** @description Minimum Advertised Price */
            readonly map_price?: number;
            /** @description The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)
             *      */
            readonly tax_class_id?: number;
            /** @description Tax Codes, such as AvaTax System Tax Codes, identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to a tax provider integration, such as BigCommerceʼs Avalara Premium, can calculate sales taxes more accurately. Stores without a tax provider will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see the tax providerʼs documentation.
             *      */
            readonly product_tax_code?: string;
            /** @description An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values.
             *      */
            readonly categories?: readonly number[];
            /** @description You can add a product to an existing brand during a product /PUT or /POST. Use either the `brand_id` or the `brand_name` field. The response body can include `brand_id`.
             *      */
            readonly brand_id?: number;
            /**
             * @description You can create the brand during a product PUT or POST request. If the brand already exists, the product /PUT or /POST request adds the product to the brand. If not, the product /PUT or /POST request creates the brand and then adds the product to the brand. Brand name is not case-sensitive; "Common Good" and "Common good" are the same. Use either the `brand_id` or the `brand_name` field. The response body does not include `brand_name`.
             * @example Common Good
             */
            readonly brand_name?: string;
            /** @description Current inventory level of the product. You must track inventory by _product_ for this to take effect (see the `inventory_tracking` field). The Catalog API returns the inventory for only the default location.
             *
             *     The inventory for a product cannot exceed 2,147,483,647 in the catalog. If you exceed the limit, the store sets the inventory level to the limit.
             *
             *     The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).  */
            readonly inventory_level?: number;
            /** @description Inventory warning level for the product. When the productʼs inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the `inventory_tracking` field) for this to take any effect.
             *      */
            readonly inventory_warning_level?: number;
            /**
             * @description The type of inventory tracking for the product. Values are: `none` - inventory levels will not be tracked; `product` - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; `variant` - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels.
             *
             * @enum {string}
             */
            readonly inventory_tracking?: "none" | "product" | "variant";
            /**
             * Format: float
             * @description A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
             *
             */
            readonly fixed_cost_shipping_price?: number;
            /** @description Flag used to indicate whether the product has free shipping. If `true`, the shipping cost for the product will be zero.
             *      */
            readonly is_free_shipping?: boolean;
            /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the product will be displayed. If `false`, the product will be hidden from view.
             *      */
            readonly is_visible?: boolean;
            /** @description Flag to determine whether the product should be included in the `featured products` panel when viewing the store.
             *      */
            readonly is_featured?: boolean;
            /** @description An array of IDs for the related products.
             *      */
            readonly related_products?: readonly number[];
            /** @description Warranty information displayed on the product page. Can include HTML formatting.
             *      */
            readonly warranty?: string;
            /** @description The BIN picking number for the product.
             *      */
            readonly bin_picking_number?: string;
            /** @description The layout template file used to render this product category. This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
             *      */
            readonly layout_file?: string;
            /** @description The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations.
             *      */
            readonly upc?: string;
            /** @description A comma-separated list of keywords that can be used to locate the product when searching the store.
             *      */
            readonly search_keywords?: string;
            /** @description Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.'
             *      */
            readonly availability_description?: string;
            /**
             * @description Availability of the product. (Corresponds to the productʼs [Purchasability](https://support.bigcommerce.com/s/article/Adding-Products-v3?language=en_US#sections) section in the control panel.) Supported values: `available` - the product is available for purchase; `disabled` - the product is listed on the storefront, but cannot be purchased; `preorder` - the product is listed for pre-orders.
             *
             * @enum {string}
             */
            readonly availability?: "available" | "disabled" | "preorder";
            /**
             * @description Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift-wrapping on the product; `list` – provide a list of IDs in the `gift_wrapping_options_list` field.
             *
             *     Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
             *
             * @enum {string}
             */
            readonly gift_wrapping_options_type?: "any" | "none" | "list";
            /** @description A list of gift-wrapping option IDs.
             *
             *     Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
             *      */
            readonly gift_wrapping_options_list?: readonly number[];
            /** @description Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results.
             *      */
            readonly sort_order?: number;
            /**
             * @description The product condition. Will be shown on the product page if the `is_condition_shown` fieldʼs value is `true`. Possible values: `New`, `Used`, `Refurbished`.
             *
             * @enum {string}
             */
            readonly condition?: "New" | "Used" | "Refurbished";
            /** @description Flag used to determine whether the product condition is shown to the customer on the product page.
             *      */
            readonly is_condition_shown?: boolean;
            /** @description The minimum quantity an order must contain, to be eligible to purchase this product.
             *      */
            readonly order_quantity_minimum?: number;
            /** @description The maximum quantity an order can contain when purchasing the product.
             *      */
            readonly order_quantity_maximum?: number;
            /** @description Custom title for the product page. If not defined, the product name will be used as the meta title.
             *      */
            readonly page_title?: string;
            /** @description Custom meta keywords for the product page. If not defined, the storeʼs default keywords will be used.
             *      */
            readonly meta_keywords?: readonly string[];
            /** @description Custom meta description for the product page. If not defined, the storeʼs default meta description will be used.
             *      */
            readonly meta_description?: string;
            /**
             * @deprecated
             * @description The number of times the product has been viewed.
             *
             */
            readonly view_count?: number;
            /**
             * Format: date-time
             * @description Pre-order release date. See the `availability` field for details on setting a productʼs availability to accept pre-orders.
             *
             */
            readonly preorder_release_date?: string | null;
            /** @description Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the `%%DATE%%` placeholder, which will be substituted for the release date.
             *      */
            readonly preorder_message?: string;
            /** @description If set to true then on the preorder release date the preorder status will automatically be removed.
             *     If set to false, then on the release date the preorder status **will not** be removed. It will need to be changed manually either in the
             *     control panel or using the API. Using the API set `availability` to `available`.
             *      */
            readonly is_preorder_only?: boolean;
            /** @description False by default, indicating that this productʼs price should be shown on the product page. If set to `true`, the price is hidden. (NOTE: To successfully set `is_price_hidden` to `true`, the `availability` value must be `disabled`.)
             *      */
            readonly is_price_hidden?: boolean;
            /** @description By default, an empty string. If `is_price_hidden` is `true`, the value of `price_hidden_label` is displayed instead of the price. (NOTE: To successfully set a non-empty string value with `is_price_hidden` set to `true`, the `availability` value must be `disabled`.)
             *      */
            readonly price_hidden_label?: string;
            readonly custom_url?: components["schemas"]["customUrl_Full"];
            /**
             * @description Type of product, defaults to `product`.
             *
             * @enum {string}
             */
            readonly open_graph_type?: "product" | "album" | "book" | "drink" | "food" | "game" | "movie" | "song" | "tv_show";
            /** @description Title of the product, if not specified the product name will be used instead.
             *      */
            readonly open_graph_title?: string;
            /** @description Description to use for the product, if not specified then the meta_description will be used instead.
             *      */
            readonly open_graph_description?: string;
            /** @description Flag to determine if product description or open graph description is used.
             *      */
            readonly open_graph_use_meta_description?: boolean;
            /** @description Flag to determine if product name or open graph name is used.
             *      */
            readonly open_graph_use_product_name?: boolean;
            /** @description Flag to determine if product image or open graph image is used.
             *      */
            readonly open_graph_use_image?: boolean;
            /** @description Global Trade Item Number */
            readonly gtin?: string;
            /** @description Manufacturer Part Number */
            readonly mpn?: string;
            /** @description the date when the Product had been imported */
            readonly date_last_imported?: string;
            /**
             * @description The total (cumulative) rating for the product.
             *
             * @example 3
             */
            readonly reviews_rating_sum?: number;
            /**
             * @description The number of times the product has been rated.
             *
             * @example 4
             */
            readonly reviews_count?: number;
            /**
             * @description The total quantity of this product sold.
             *
             * @example 80
             */
            readonly total_sold?: number;
            /** @description 200 maximum custom fields per product. 255 maximum characters per custom field. */
            readonly custom_fields?: readonly components["schemas"]["productCustomField_Put"][];
            readonly bulk_pricing_rules?: readonly ({
                /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
                readonly id: number;
            } & components["schemas"]["bulkPricingRule_Full"])[];
            readonly images?: readonly components["schemas"]["productImage_Full"][];
            /** @description The Catalog API integrates with third-party YouTube.
             *     The [YouTube Terms of Service](https://www.youtube.com/t/terms) and [Google Privacy Policy](https://policies.google.com/privacy) apply, as indicated in our [Privacy Policy](https://www.bigcommerce.com/privacy/) and [Terms of Service](https://www.bigcommerce.com/terms/).
             *      */
            readonly videos?: readonly components["schemas"]["productVideo_Full"][];
        };
        /**
         * product_Base_response
         * @description Base Product response
         */
        readonly product_Base_response: {
            /**
             * @description A unique product name.
             *
             * @example Smith Journal 13
             */
            readonly name?: string;
            /**
             * @description The product type. One of: `physical` - a physical stock unit, `digital` - a digital download.
             *
             * @example physical
             * @enum {string}
             */
            readonly type?: "physical" | "digital";
            /**
             * @description A unique user-defined alphanumeric product code/stock keeping unit (SKU).
             *
             * @example SM-13
             */
            readonly sku?: string;
            /**
             * @description The product description, which can include HTML formatting.
             *
             * @example <p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>
             */
            readonly description?: string;
            /**
             * Format: float
             * @description Weight of the product, which can be used when calculating shipping costs. This is based on the unit set on the store
             *
             */
            readonly weight?: number;
            /**
             * Format: float
             * @description Width of the product, which can be used when calculating shipping costs.
             *
             */
            readonly width?: number;
            /**
             * Format: float
             * @description Depth of the product, which can be used when calculating shipping costs.
             *
             */
            readonly depth?: number;
            /**
             * Format: float
             * @description Height of the product, which can be used when calculating shipping costs.
             *
             */
            readonly height?: number;
            /**
             * Format: float
             * @description The price of the product. The price should include or exclude tax, based on the store settings.
             *
             */
            readonly price?: number;
            /**
             * Format: float
             * @description The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.
             *
             */
            readonly cost_price?: number;
            /**
             * Format: float
             * @description The retail cost of the product. If entered, the retail cost price will be shown on the product page.
             *
             */
            readonly retail_price?: number;
            /**
             * Format: float
             * @description If entered, the sale price will be used instead of value in the price field when calculating the productʼs cost.
             *
             */
            readonly sale_price?: number;
            /** @description Minimum Advertised Price */
            readonly map_price?: number;
            /** @description The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)
             *      */
            readonly tax_class_id?: number;
            /** @description Tax Codes, such as AvaTax System Tax Codes, identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to a tax provider integration, such as BigCommerceʼs Avalara Premium, can calculate sales taxes more accurately. Stores without a tax provider will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see the tax providerʼs documentation.
             *      */
            readonly product_tax_code?: string;
            /** @description An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values.
             *      */
            readonly categories?: readonly number[];
            /** @description You can add a product to an existing brand during a product /PUT or /POST use the `brand_id` field. The response body can include `brand_id'.
             *      */
            readonly brand_id?: number;
            /** @description Current inventory level of the product. You must track inventory by _product_ for this to take effect (see the `inventory_tracking` field). The Catalog API returns the inventory for only the default location.
             *
             *     The inventory for a product cannot exceed 2,147,483,647 in the catalog. If you exceed the limit, the store sets the inventory level to the limit.
             *
             *     The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api). */
            readonly inventory_level?: number;
            /** @description Inventory warning level for the product. When the productʼs inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the `inventory_tracking` field) for this to take any effect.
             *      */
            readonly inventory_warning_level?: number;
            /**
             * @description The type of inventory tracking for the product. Values are: `none` - inventory levels will not be tracked; `product` - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; `variant` - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels.
             *
             * @enum {string}
             */
            readonly inventory_tracking?: "none" | "product" | "variant";
            /**
             * Format: float
             * @description A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
             *
             */
            readonly fixed_cost_shipping_price?: number;
            /** @description Flag used to indicate whether the product has free shipping. If `true`, the shipping cost for the product will be zero.
             *      */
            readonly is_free_shipping?: boolean;
            /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the product will be displayed. If `false`, the product will be hidden from view.
             *      */
            readonly is_visible?: boolean;
            /** @description Flag to determine whether the product should be included in the `featured products` panel when viewing the store.
             *      */
            readonly is_featured?: boolean;
            /** @description An array of IDs for the related products.
             *      */
            readonly related_products?: readonly number[];
            /** @description Warranty information displayed on the product page. Can include HTML formatting.
             *      */
            readonly warranty?: string;
            /** @description The BIN picking number for the product.
             *      */
            readonly bin_picking_number?: string;
            /** @description The layout template file used to render this product category. This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
             *      */
            readonly layout_file?: string;
            /** @description The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations.
             *      */
            readonly upc?: string;
            /** @description A comma-separated list of keywords that can be used to locate the product when searching the store.
             *      */
            readonly search_keywords?: string;
            /** @description Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.'
             *      */
            readonly availability_description?: string;
            /**
             * @description Availability of the product. (Corresponds to the productʼs [Purchasability](https://support.bigcommerce.com/s/article/Adding-Products-v3?language=en_US#sections) section in the control panel.) Supported values: `available` - the product is available for purchase; `disabled` - the product is listed on the storefront, but cannot be purchased; `preorder` - the product is listed for pre-orders.
             *
             * @enum {string}
             */
            readonly availability?: "available" | "disabled" | "preorder";
            /**
             * @description Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift-wrapping on the product; `list` – provide a list of IDs in the `gift_wrapping_options_list` field.
             *
             *     Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
             *
             * @enum {string}
             */
            readonly gift_wrapping_options_type?: "any" | "none" | "list";
            /** @description A list of gift-wrapping option IDs.
             *
             *     Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
             *      */
            readonly gift_wrapping_options_list?: readonly number[];
            /** @description Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results.
             *      */
            readonly sort_order?: number;
            /**
             * @description The product condition. Will be shown on the product page if the `is_condition_shown` fieldʼs value is `true`. Possible values: `New`, `Used`, `Refurbished`.
             *
             * @enum {string}
             */
            readonly condition?: "New" | "Used" | "Refurbished";
            /** @description Flag used to determine whether the product condition is shown to the customer on the product page.
             *      */
            readonly is_condition_shown?: boolean;
            /** @description The minimum quantity an order must contain, to be eligible to purchase this product.
             *      */
            readonly order_quantity_minimum?: number;
            /** @description The maximum quantity an order can contain when purchasing the product.
             *      */
            readonly order_quantity_maximum?: number;
            /** @description Custom title for the product page. If not defined, the product name will be used as the meta title.
             *      */
            readonly page_title?: string;
            /** @description Custom meta keywords for the product page. If not defined, the storeʼs default keywords will be used.
             *      */
            readonly meta_keywords?: readonly string[];
            /** @description Custom meta description for the product page. If not defined, the storeʼs default meta description will be used.
             *      */
            readonly meta_description?: string;
            /**
             * @deprecated
             * @description The number of times the product has been viewed.
             *
             */
            readonly view_count?: number;
            /**
             * Format: date-time
             * @description Pre-order release date. See the `availability` field for details on setting a productʼs availability to accept pre-orders.
             *
             */
            readonly preorder_release_date?: string | null;
            /** @description Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the `%%DATE%%` placeholder, which will be substituted for the release date.
             *      */
            readonly preorder_message?: string;
            /** @description If set to true then on the preorder release date the preorder status will automatically be removed.
             *     If set to false, then on the release date the preorder status **will not** be removed. It will need to be changed manually either in the
             *     control panel or using the API. Using the API set `availability` to `available`.
             *      */
            readonly is_preorder_only?: boolean;
            /** @description False by default, indicating that this productʼs price should be shown on the product page. If set to `true`, the price is hidden. (NOTE: To successfully set `is_price_hidden` to `true`, the `availability` value must be `disabled`.)
             *      */
            readonly is_price_hidden?: boolean;
            /** @description By default, an empty string. If `is_price_hidden` is `true`, the value of `price_hidden_label` is displayed instead of the price. (NOTE: To successfully set a non-empty string value with `is_price_hidden` set to `true`, the `availability` value must be `disabled`.)
             *      */
            readonly price_hidden_label?: string;
            readonly custom_url?: components["schemas"]["customUrl_Full"];
            /**
             * @description Type of product, defaults to `product`.
             *
             * @enum {string}
             */
            readonly open_graph_type?: "product" | "album" | "book" | "drink" | "food" | "game" | "movie" | "song" | "tv_show";
            /** @description Title of the product, if not specified the product name will be used instead.
             *      */
            readonly open_graph_title?: string;
            /** @description Description to use for the product, if not specified then the meta_description will be used instead.
             *      */
            readonly open_graph_description?: string;
            /** @description Flag to determine if product description or open graph description is used.
             *      */
            readonly open_graph_use_meta_description?: boolean;
            /** @description Flag to determine if product name or open graph name is used.
             *      */
            readonly open_graph_use_product_name?: boolean;
            /** @description Flag to determine if product image or open graph image is used.
             *      */
            readonly open_graph_use_image?: boolean;
            /** @description Global Trade Item Number */
            readonly gtin?: string;
            /** @description Manufacturer Part Number */
            readonly mpn?: string;
            /** @description the date when the Product had been imported */
            readonly date_last_imported?: string;
            /**
             * @description The total (cumulative) rating for the product.
             *
             * @example 3
             */
            readonly reviews_rating_sum?: number;
            /**
             * @description The number of times the product has been rated.
             *
             * @example 4
             */
            readonly reviews_count?: number;
            /**
             * @description The total quantity of this product sold.
             *
             * @example 80
             */
            readonly total_sold?: number;
            /** @description 200 maximum custom fields per product. 255 maximum characters per custom field. */
            readonly custom_fields?: readonly components["schemas"]["productCustomField_Put"][];
            readonly bulk_pricing_rules?: readonly ({
                /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
                readonly id: number;
            } & components["schemas"]["bulkPricingRule_Full"])[];
            readonly images?: readonly components["schemas"]["productImage_Full"][];
            readonly primary_image?: components["schemas"]["primaryImage_Full"];
            /** @description The Catalog API integrates with third-party YouTube.
             *     The [YouTube Terms of Service](https://www.youtube.com/t/terms) and [Google Privacy Policy](https://policies.google.com/privacy) apply, as indicated in our [Privacy Policy](https://www.bigcommerce.com/privacy/) and [Terms of Service](https://www.bigcommerce.com/terms/).
             *      */
            readonly videos?: readonly components["schemas"]["productVideo_Full"][];
        };
        /** metafield_Full */
        readonly metafield_Full: {
            /**
             * @description Unique ID of the *Metafield*. Read-Only.
             * @example 6
             */
            readonly id?: number;
        } & components["schemas"]["metafield_Base"] & {
            /**
             * @description The type of resource with which the metafield is associated.
             *
             * @example product
             * @enum {string}
             */
            readonly resource_type?: "category" | "brand" | "product" | "variant";
            /**
             * @description The ID of the resource with which the metafield is associated.
             *
             * @example 111
             */
            readonly resource_id?: number;
            /**
             * Format: date-time
             * @description Date and time of the metafieldʼs creation. Read-Only.
             *
             * @example 2018-05-07T20:14:17+00:00
             */
            readonly date_created?: string;
            /**
             * Format: date-time
             * @description Date and time when the metafield was last updated. Read-Only.
             *
             * @example 2018-05-07T20:14:17+00:00
             */
            readonly date_modified?: string;
            /** @description ID of metafield's creator */
            readonly owner_client_id?: string;
        };
        /** errorResponse_409 */
        readonly errorResponse_409: {
            readonly code?: number;
            readonly status?: number;
            /** @description The error title describing the particular error. */
            readonly title?: string;
            readonly type?: string;
        } & {
            readonly errors?: components["schemas"]["DetailedErrors"];
        };
        /** errorResponse_422 */
        readonly errorResponse_422: {
            readonly code?: number;
            readonly status?: number;
            /** @description The error title describing the particular error. */
            readonly title?: string;
            readonly type?: string;
        } & {
            readonly errors?: components["schemas"]["DetailedErrors"];
        };
        readonly MetaPaginationObject: {
            readonly pagination?: {
                /** @example 246 */
                readonly total?: number;
                /** @example 5 */
                readonly count?: number;
                /** @example 5 */
                readonly per_page?: number;
                /** @example 1 */
                readonly current_page?: number;
                /** @example 50 */
                readonly total_pages?: number;
                readonly links?: {
                    /** @example ?limit=50&page=1 */
                    readonly previous?: string;
                    /** @example ?limit=50&page=1 */
                    readonly current?: string;
                    /** @example ?limit=50&page=2 */
                    readonly next?: string;
                };
            };
        };
        /** @description Error payload for the BigCommerce API.
         *      */
        readonly BaseError: {
            /** @description The HTTP status code.
             *      */
            readonly status?: number;
            /** @description The error title describing the particular error.
             *      */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
        };
        readonly ProductChannelAssignment: {
            readonly product_id?: number;
            readonly channel_id?: number;
        };
        readonly ProductCategoryAssignment: {
            readonly product_id?: number;
            readonly category_id?: number;
        };
        readonly beta5DetailedErrors: {
            readonly [key: string]: unknown;
        };
        readonly beta5ErrorResponse: components["schemas"]["BaseError"] & {
            readonly errors?: components["schemas"]["beta5DetailedErrors"];
        };
        /** @description Common Metafield properties.
         *      */
        readonly Metafield: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value: string;
            /**
             * @description Description for the metafields.
             *
             * @example order
             */
            readonly description: string;
            /**
             * @description The type of resource with which the metafield is associated.
             *
             * @example cart
             * @enum {string}
             */
            readonly resource_type: "brand" | "product" | "variant" | "category" | "cart" | "channel" | "location" | "order" | "customer";
            /**
             * @description The unique identifier for the resource with which the metafield is associated.
             *
             * @example 424242
             */
            readonly resource_id: number;
            /** @description The unique identifier for the metafield. */
            readonly id: number;
            /**
             * Format: date-time
             * @description Date and time of the metafieldʼs creation.
             * @example 2022-06-16T18:39:00+00:00
             */
            readonly date_created: string;
            /**
             * Format: date-time
             * @description Date and time when the metafield was last updated.
             * @example 2022-06-16T18:39:00+00:00
             */
            readonly date_modified: string;
            /**
             * @description Client ID for the metafieldʼs creator.
             * @example asdfasdfasdfasdfasdfasdfasdf
             */
            readonly owner_client_id?: string;
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponse: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            readonly meta?: components["schemas"]["CollectionMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponse_POST_PUT: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            /**
             * @description Empty for 200 responses.
             * @example []
             */
            readonly errors?: readonly unknown[];
            readonly meta?: components["schemas"]["WriteCollectionSuccessMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponsePartialSuccess_POST_PUT: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            readonly errors?: readonly components["schemas"]["Error"][];
            readonly meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponsePartialSuccess_DELETE: {
            /** @example [
             *       123
             *     ] */
            readonly data?: readonly number[];
            readonly errors?: readonly components["schemas"]["Error"][];
            readonly meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionDeleteResponseSuccess: {
            /** @example [
             *       123,
             *       124,
             *       125
             *     ] */
            readonly data?: readonly number[];
            /**
             * @description Empty for 200 responses.
             * @example []
             */
            readonly errors?: readonly unknown[];
            readonly meta?: components["schemas"]["WriteCollectionSuccessMeta"];
        };
        /**
         * Collection Meta
         * @description Additional data about the response.
         */
        readonly WriteCollectionPartialSuccessMeta: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 3
             */
            readonly total?: number;
            /**
             * @description Total number of items that were successfully deleted.
             *
             * @example 1
             */
            readonly success?: number;
            /**
             * @description Total number of items that failed to be deleted.
             *
             * @example 2
             */
            readonly failed?: number;
        };
        /**
         * Collection Meta
         * @description Additional data about the response.
         */
        readonly WriteCollectionSuccessMeta: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 3
             */
            readonly total?: number;
            /**
             * @description Total number of items that were successfully deleted.
             *
             * @example 3
             */
            readonly success?: number;
            /**
             * @description Total number of items that failed to be deleted.
             *
             * @example 0
             */
            readonly failed?: number;
        };
        /**
         * @description Total number of items in the result set.
         *
         * @example 3
         */
        readonly Total: number;
        /**
         * @description Total number of items that were successfully deleted.
         *
         * @example 1
         */
        readonly Success: number;
        /**
         * @description Total number of items that failed to be deleted.
         *
         * @example 2
         */
        readonly Failed: number;
        /** @description Error response payload for the BigCommerce API.
         *      */
        readonly Error: {
            /**
             * @description The HTTP status code for the error.
             *
             * @example 422
             */
            readonly status?: number;
            /**
             * @description The error title.
             *
             * @example Bulk operation has failed
             */
            readonly title?: string;
            /**
             * @description The error type.
             *
             * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
             */
            readonly type?: string;
            readonly errors?: components["schemas"]["ErrorDetail"];
        };
        /**
         * @description Error detail response payload for the BigCommerce API.
         *
         * @example {
         *       "1": "Unauthorized to delete",
         *       "2": "Metafield does not exist"
         *     }
         */
        readonly ErrorDetail: {
            readonly [key: string]: unknown;
        };
        /**
         * Collection Meta
         * @description Data about the response, including pagination and collection totals.
         */
        readonly CollectionMeta: {
            /**
             * Pagination
             * @description Data about the response, including pagination and collection totals.
             */
            readonly pagination?: {
                /**
                 * @description Total number of items in the result set.
                 *
                 * @example 36
                 */
                readonly total?: number;
                /**
                 * @description Total number of items in the collection response.
                 *
                 * @example 36
                 */
                readonly count?: number;
                /**
                 * @description The amount of items returned in the collection per page, controlled by the limit parameter.
                 *
                 * @example 50
                 */
                readonly per_page?: number;
                /**
                 * @description The page you are currently on within the collection.
                 *
                 * @example 1
                 */
                readonly current_page?: number;
                /**
                 * @description The total number of pages in the collection.
                 *
                 * @example 1
                 */
                readonly total_pages?: number;
                /** @description Pagination links for the previous and next parts of the whole collection.
                 *      */
                readonly links?: {
                    /** @description Link to the previous page returned in the response.
                     *      */
                    readonly previous?: string;
                    /**
                     * @description Link to the current page returned in the response.
                     *
                     * @example ?page=1&limit=50
                     */
                    readonly current?: string;
                    /** @description Link to the next page returned in the response.
                     *      */
                    readonly next?: string;
                };
            };
        } & {
            readonly [key: string]: unknown;
        };
        /** @description Common Metafield properties.
         *      */
        readonly MetafieldBase_Post: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value: string;
            /**
             * @description Description for the metafields.
             *
             * @example Name of Staff Member
             */
            readonly description?: string;
        };
        /** @description Common Metafield properties.
         *      */
        readonly MetafieldBase_Put: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace?: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key?: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value?: string;
            /**
             * @description Description for the metafields.
             *
             * @example Name of Staff Member
             */
            readonly description?: string;
        };
        /**
         * Product Custom Field Data
         * @description Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product’s page, such as a book’s ISBN or a DVD’s release date.
         */
        readonly customFieldData: {
            /**
             * @description The unique numeric ID of the custom field increments sequentially. Read-Only.
             * @example 6
             */
            readonly id?: number;
            /**
             * @description The name of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
             *
             * @example ISBN
             */
            readonly name?: string;
            /**
             * @description The value of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
             *
             * @example 1234567890123
             */
            readonly value?: string;
        };
        /**
         * Custom Field Post
         * @description Payload for POST request to create custom fields associated with a product.
         */
        readonly customFieldPost: {
            /**
             * @description The name of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
             *
             * @example ISBN
             */
            readonly name: string;
            /**
             * @description The value of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
             *
             * @example 1234567890123
             */
            readonly value: string;
        };
        /**
         * Custom Field Put
         * @description Payload for PUT request to update custom fields associated with a product.
         */
        readonly customFieldPut: {
            /**
             * @description The value of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
             *
             * @example ISBN
             */
            readonly name?: string;
            /**
             * @description The value of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
             *
             * @example 1234567890123
             */
            readonly value?: string;
        };
        /**
         * metaCollectionFull
         * @description Data about the response, including pagination and collection totals.
         */
        readonly metaCollectionFull: {
            /** @description Data about the response, including pagination and collection totals. */
            readonly pagination?: {
                /**
                 * @description Total number of items in the result set.
                 *
                 * @example 36
                 */
                readonly total?: number;
                /**
                 * @description Total number of items in the collection response.
                 *
                 * @example 36
                 */
                readonly count?: number;
                /**
                 * @description The amount of items returned in the collection per page, controlled by the limit parameter.
                 *
                 * @example 50
                 */
                readonly per_page?: number;
                /**
                 * @description The page you are currently on within the collection.
                 *
                 * @example 2
                 */
                readonly current_page?: number;
                /**
                 * @description The total number of pages in the collection.
                 *
                 * @example 3
                 */
                readonly total_pages?: number;
                /** @description Pagination links for the previous and next parts of the whole collection.
                 *      */
                readonly links?: {
                    /**
                     * @description Link to the previous page returned in the response.
                     *
                     * @example ?page=1&limit=50
                     */
                    readonly previous?: string;
                    /**
                     * @description Link to the current page returned in the response.
                     *
                     * @example ?page=2&limit=50
                     */
                    readonly current?: string;
                    /**
                     * @description Link to the next page returned in the response.
                     *
                     * @example ?page=3&limit=50
                     */
                    readonly next?: string;
                };
            };
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly metaEmptyFull: {
            readonly [key: string]: unknown;
        };
        /** Error Response */
        readonly GeneralErrorWithErrors: {
            /** @description The HTTP status code. */
            readonly status: number;
            /** @description The error title describes the particular error. */
            readonly title: string;
            readonly type: string;
            /** Detailed Errors */
            readonly errors: {
                readonly [key: string]: unknown;
            };
        };
        /** Error Response */
        readonly GeneralError: {
            /** @description The HTTP status code. */
            readonly status: number;
            /** @description The error title describes the particular error. */
            readonly title: string;
            readonly type: string;
            /** @description The custom code of the error. */
            readonly code?: number;
        };
        /** Error Response */
        readonly MethodNotAllowedError: {
            /**
             * @description The HTTP status code.
             * @example 405
             */
            readonly status: number;
            /** @description The error title describes the particular error. */
            readonly title: string;
            readonly type: string;
            /**
             * Detailed Errors
             * @description The detailed title describes the particular error.
             */
            readonly detail: string;
        };
    };
    responses: {
        /** @description General Error. */
        readonly GeneralError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["GeneralError"];
            };
        };
        /** @description General Error */
        readonly GeneralErrorWithErrors: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["GeneralErrorWithErrors"];
            };
        };
        /** @description 401 Unauthorized */
        readonly UnauthorizedError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "plain/text": string;
            };
        };
        /** @description 405 Method Not Allowed */
        readonly MethodNotAllowedError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["MethodNotAllowedError"];
            };
        };
        /** @description 415 Unsupported Media Type */
        readonly UnsupportedMediaTypeError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "text/html": string;
            };
        };
        /** @description Gets array of Custom fields. */
        readonly CustomFieldsResponse: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["customFieldData"][];
                    readonly meta?: components["schemas"]["metaCollectionFull"];
                };
            };
        };
        /** @description Gets Custom field. */
        readonly CustomFieldResponse: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["customFieldData"];
                    readonly meta?: components["schemas"]["metaEmptyFull"];
                };
            };
        };
    };
    parameters: {
        /** @description The ID of the `Product` to which the resource belongs.
         *      */
        readonly ProductIdParam: number;
        /** @description The ID of the `review` that is being operated on.
         *      */
        readonly ReviewIdParam: number;
        /** @description The ID of the `Image` that is being operated on.
         *      */
        readonly ImageIdParam: number;
        /** @description The ID of the `Metafield`.
         *      */
        readonly MetafieldIdParam: number;
        /** @description The BigCommerce ID of the `Video` */
        readonly VideoIdParam: number;
        /** @description The ID of the `ComplexRule`.
         *      */
        readonly ComplexRuleIdParam: number;
        /** @description The ID of the `CustomField`.
         *      */
        readonly CustomFieldIdParam: number;
        /** @description The ID of the `BulkPricingRule`.
         *      */
        readonly BulkPricingRuleIdParam: number;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
        /** @description Specifies the page number in a limited (paginated) list of products.
         *      */
        readonly PageParam: number;
        /** @description Filter based on a metafieldʼs key. */
        readonly MetafieldKeyParam: string;
        /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
        readonly MetafieldKeyInParam: readonly string[];
        /** @description Filter based on a metafieldʼs namespaces. */
        readonly MetafieldNamespaceParam: string;
        /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter. */
        readonly MetafieldNamespaceInParam: readonly string[];
        /** @description Controls the number of items per page in a limited (paginated) list of products.
         *      */
        readonly LimitParam: number;
        /** @description 'Query parameter that lets you filter by the minimum date created, ffor example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
         *      */
        readonly date_created_min: string;
        /** @description 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
         *      */
        readonly date_created_max: string;
        /** @description 'Query parameter that lets you filter by the maximum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
         *      */
        readonly date_modified_max: string;
        /** @description 'Query parameter that lets you filter by the minimum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
         *      */
        readonly date_modified_min: string;
        /** @description Sort direction. Acceptable values are: `asc`, `desc`.
         *      */
        readonly DirectionParam: "asc" | "desc";
        /** @description Field name to sort by. Note: Since ID increments when new products are added, you can use the ID value to sort by product create date.
         *      */
        readonly SortParam: "id" | "name" | "sku" | "price" | "date_modified" | "date_last_imported" | "inventory_level" | "is_visible" | "total_sold" | "calculated_price";
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly IncludeFieldsBulkPricingParam: readonly ("quantity_min" | "quantity_max" | "type" | "amount")[];
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly IncludeFieldsParam: readonly ("name" | "type" | "sku" | "description" | "weight" | "width" | "depth" | "height" | "price" | "cost_price" | "retail_price" | "sale_price" | "map_price" | "tax_class_id" | "product_tax_code" | "calculated_price" | "categories" | "brand_id" | "option_set_id" | "option_set_display" | "inventory_level" | "inventory_warning_level" | "inventory_tracking" | "reviews_rating_sum" | "reviews_count" | "total_sold" | "fixed_cost_shipping_price" | "is_free_shipping" | "is_visible" | "is_featured" | "related_products" | "warranty" | "bin_picking_number" | "layout_file" | "upc" | "mpn" | "gtin" | "date_last_imported" | "search_keywords" | "availability" | "availability_description" | "condition" | "is_condition_shown" | "order_quantity_minimum" | "order_quantity_maximum" | "page_title" | "meta_keywords" | "meta_description" | "date_created" | "date_modified" | "view_count" | "preorder_release_date" | "preorder_message" | "is_preorder_only" | "is_price_hidden" | "price_hidden_label" | "custom_url" | "base_variant_id" | "open_graph_type" | "open_graph_title" | "open_graph_description" | "open_graph_use_meta_description" | "open_graph_use_product_name" | "open_graph_use_image")[];
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly IncludeFieldsParamMetafields: readonly ("resource_id" | "resource_id:in" | "key" | "value" | "namespace" | "permission_set" | "resource_type" | "description" | "owner_client_id" | "date_created" | "date_modified")[];
        /** @description Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. The ID and the specified fields will be returned. */
        readonly IncludeFieldsEnumParam: readonly ("variants" | "images" | "custom_fields" | "bulk_pricing_rules" | "primary_image" | "modifiers" | "options" | "videos")[];
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly ExcludeFieldsParam: readonly string[];
        /** @description Pass a comma-separated list to filter by one or more product IDs. */
        readonly IdInParam: readonly number[];
        /** @description Pass a comma-separated list to exclude one or more product IDs. */
        readonly IdNotInParam: readonly number[];
        /** @description Pass a comma-separated list to filter by one or more product IDs. */
        readonly ProductIdInParam: readonly number[];
        /** @description Pass a comma-separated list to filter by one or more category IDs. */
        readonly CategoryIdInParam: readonly number[];
        /** @description A comma-separated list of category IDs. Returns a list of products that are in all the categories specified. */
        readonly CategoriesInParam: readonly number[];
        /** @description Pass a comma-separated list to filter by one or more channel IDs. */
        readonly ChannelIdInParam: readonly number[];
        /** @description A comma-separated list of sub-resources to return with a product object.
         *     When you specify `options` or `modifiers`, results are limited to 10 per page. */
        readonly IncludeParamGetProducts: components["schemas"]["IncludeParamBase"];
        /** @description A comma-separated list of sub-resources to return with a product object. */
        readonly IncludeParamGetProduct: components["schemas"]["IncludeParamBase"];
        readonly IdMinParam: number;
        readonly IdMaxParam: number;
        readonly IdGreaterParam: number;
        readonly IdLessParam: number;
        /** @description Filter items by name.
         *      */
        readonly NameParam: string;
        /** @description Filter items by Manufacturer Part Number (MPN).
         *      */
        readonly MpnParam: string;
        /** @description Filter items by UPC.
         *      */
        readonly UpcParam: string;
        /** @description Filter items by price.
         *      */
        readonly PriceParam: number;
        /** @description Filter items by weight.
         *      */
        readonly WeightParam: number;
        /** @description Filter items by condition.
         *      */
        readonly ConditionParam: "new" | "used" | "refurbished";
        /** @description Filter items by brand ID.
         *      */
        readonly BrandIdParam: number;
        /**
         * @description Filter items by `date_modified`.
         * @example 2024-07-18
         */
        readonly DateModifiedParam: string;
        /** @description Filter items by `date_modified`. If the `date modified:max` does not include hours, minutes and seconds, the API automatically adds the current time of the request to the date. For example, `date_modified:max=2025-01-15` or `date_modified:max=2025-01-15T00:03:17Z`. */
        readonly DateModifiedMaxParam: string;
        /** @description Filter items by `date_modified`. If the `date modified:min` does not include hours, minutes and seconds, the API automatically adds the current time of the request to the date. For example, `date_modified:min=2025-01-15` or `date_modified:min=2025-01-15T00:03:17Z`. */
        readonly DateModifiedMinParam: string;
        /**
         * @description Filter items by date_last_imported.
         * @example 2020-07-18
         */
        readonly DateLastImportedParam: string;
        /**
         * @description Filter products by specifying a date they were NOT last imported. For example, `date_last_imported:not=2015-08-21T22%3A53%3A23%2B00%3A00`.
         * @example 2020-07-18
         */
        readonly DateLastImportedNotParam: string;
        /**
         * @description Filter items by date_last_imported. For example, `date_last_imported:max=2015-08-21T22%3A53%3A23%2B00%3A00`.
         * @example 2020-07-18
         */
        readonly DateLastImportedMaxParam: string;
        /**
         * @description Filter items by date_last_imported. For example, `date_last_imported:min=2015-08-21T22%3A53%3A23%2B00%3A00`.
         * @example 2020-07-18
         */
        readonly DateLastImportedMinParam: string;
        /**
         * @description Filter items based on whether the product is currently visible on the storefront.
         * @example true
         */
        readonly IsVisibleParam: boolean;
        /** @description Filter items by is_featured. `1` for true, `0` for false. */
        readonly IsFeaturedParam: 1 | 0;
        /** @description Filter items by is_free_shipping. `1` for true, `0` for false. */
        readonly IsFreeShippingParam: number;
        /** @description Filter items by inventory_level.
         *      */
        readonly InventoryLevelParam: number;
        /** @description A comma-separated list of inventory levels. Returns a list of all products that have any of the listed inventory amounts. */
        readonly InventoryLevelInParam: readonly number[];
        /** @description A comma-separated list of inventory levels. Returns a list of all products that have inventory amounts other than those specified. */
        readonly InventoryLevelNotInParam: readonly number[];
        readonly InventoryLevelMinParam: number;
        readonly InventoryLevelMaxParam: number;
        readonly InventoryLevelGreaterParam: number;
        readonly InventoryLevelLessParam: number;
        /** @description Filter items by inventory_low. Values: 1, 0.
         *      */
        readonly InventoryLowParam: number;
        /** @description Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`.
         *      */
        readonly OutOfStockParam: number;
        /** @description Filter items by total_sold.
         *      */
        readonly TotalSoldParam: number;
        /** @description Filter items by type. */
        readonly ProductTypeParam: "digital" | "physical";
        /** @description Filter items by categories.
         *       If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`. */
        readonly CategoriesParam: number;
        /** @description Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
        readonly KeywordParam: string;
        /** @description Set context used by the search algorithm to return results targeted towards the specified group. Use `merchant` to help merchants search their own catalog. Use `shopper` to return shopper-facing search results. */
        readonly KeywordContextParam: "shopper" | "merchant";
        /** @description Filter items by availability. Values are: available, disabled, preorder.
         *      */
        readonly AvailabilityParam: "available" | "disabled" | "preorder";
        /** @description Filter items by main SKU. To filter by variant SKU, see [Get all variants](/docs/rest-catalog/product-variants#get-all-product-variants).  */
        readonly SkuParam: string;
        /** @description A comma-separated list of SKUs. Returns a list of products with those SKUs. */
        readonly SkuInParam: readonly string[];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getProducts: {
        readonly parameters: {
            readonly query?: {
                /** @description Filter items by product ID.
                 *      */
                readonly id?: number;
                /** @description Pass a comma-separated list to filter by one or more product IDs. */
                readonly "id:in"?: components["parameters"]["IdInParam"];
                /** @description Pass a comma-separated list to filter by one or more channel IDs. */
                readonly "channel_id:in"?: components["parameters"]["ChannelIdInParam"];
                /** @description Pass a comma-separated list to exclude one or more product IDs. */
                readonly "id:not_in"?: components["parameters"]["IdNotInParam"];
                /** @description A comma-separated list of sub-resources to return with a product object.
                 *     When you specify `options` or `modifiers`, results are limited to 10 per page. */
                readonly include?: components["parameters"]["IncludeParamGetProducts"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Sort direction. Acceptable values are: `asc`, `desc`.
                 *      */
                readonly direction?: components["parameters"]["DirectionParam"];
                /** @description Field name to sort by. Note: Since ID increments when new products are added, you can use the ID value to sort by product create date.
                 *      */
                readonly sort?: components["parameters"]["SortParam"];
                /** @description A comma-separated list of category IDs. Returns a list of products that are in all the categories specified. */
                readonly "categories:in"?: components["parameters"]["CategoriesInParam"];
                readonly "id:min"?: components["parameters"]["IdMinParam"];
                readonly "id:max"?: components["parameters"]["IdMaxParam"];
                readonly "id:greater"?: components["parameters"]["IdGreaterParam"];
                readonly "id:less"?: components["parameters"]["IdLessParam"];
                /** @description Filter items by name.
                 *      */
                readonly name?: components["parameters"]["NameParam"];
                /** @description Filter items by Manufacturer Part Number (MPN).
                 *      */
                readonly mpn?: components["parameters"]["MpnParam"];
                /** @description Filter items by UPC.
                 *      */
                readonly upc?: components["parameters"]["UpcParam"];
                /** @description Filter items by price.
                 *      */
                readonly price?: components["parameters"]["PriceParam"];
                /** @description Filter items by weight.
                 *      */
                readonly weight?: components["parameters"]["WeightParam"];
                /** @description Filter items by condition.
                 *      */
                readonly condition?: components["parameters"]["ConditionParam"];
                /** @description Filter items by brand ID.
                 *      */
                readonly brand_id?: components["parameters"]["BrandIdParam"];
                /**
                 * @description Filter items by `date_modified`.
                 * @example 2024-07-18
                 */
                readonly date_modified?: components["parameters"]["DateModifiedParam"];
                /** @description Filter items by `date_modified`. If the `date modified:max` does not include hours, minutes and seconds, the API automatically adds the current time of the request to the date. For example, `date_modified:max=2025-01-15` or `date_modified:max=2025-01-15T00:03:17Z`. */
                readonly "date_modified:max"?: components["parameters"]["DateModifiedMaxParam"];
                /** @description Filter items by `date_modified`. If the `date modified:min` does not include hours, minutes and seconds, the API automatically adds the current time of the request to the date. For example, `date_modified:min=2025-01-15` or `date_modified:min=2025-01-15T00:03:17Z`. */
                readonly "date_modified:min"?: components["parameters"]["DateModifiedMinParam"];
                /**
                 * @description Filter items by date_last_imported.
                 * @example 2020-07-18
                 */
                readonly date_last_imported?: components["parameters"]["DateLastImportedParam"];
                /**
                 * @description Filter products by specifying a date they were NOT last imported. For example, `date_last_imported:not=2015-08-21T22%3A53%3A23%2B00%3A00`.
                 * @example 2020-07-18
                 */
                readonly "date_last_imported:not"?: components["parameters"]["DateLastImportedNotParam"];
                /**
                 * @description Filter items by date_last_imported. For example, `date_last_imported:max=2015-08-21T22%3A53%3A23%2B00%3A00`.
                 * @example 2020-07-18
                 */
                readonly "date_last_imported:max"?: components["parameters"]["DateLastImportedMaxParam"];
                /**
                 * @description Filter items by date_last_imported. For example, `date_last_imported:min=2015-08-21T22%3A53%3A23%2B00%3A00`.
                 * @example 2020-07-18
                 */
                readonly "date_last_imported:min"?: components["parameters"]["DateLastImportedMinParam"];
                /**
                 * @description Filter items based on whether the product is currently visible on the storefront.
                 * @example true
                 */
                readonly is_visible?: components["parameters"]["IsVisibleParam"];
                /** @description Filter items by is_featured. `1` for true, `0` for false. */
                readonly is_featured?: components["parameters"]["IsFeaturedParam"];
                /** @description Filter items by is_free_shipping. `1` for true, `0` for false. */
                readonly is_free_shipping?: components["parameters"]["IsFreeShippingParam"];
                /** @description Filter items by inventory_level.
                 *      */
                readonly inventory_level?: components["parameters"]["InventoryLevelParam"];
                /** @description A comma-separated list of inventory levels. Returns a list of all products that have any of the listed inventory amounts. */
                readonly "inventory_level:in"?: components["parameters"]["InventoryLevelInParam"];
                /** @description A comma-separated list of inventory levels. Returns a list of all products that have inventory amounts other than those specified. */
                readonly "inventory_level:not_in"?: components["parameters"]["InventoryLevelNotInParam"];
                readonly "inventory_level:min"?: components["parameters"]["InventoryLevelMinParam"];
                readonly "inventory_level:max"?: components["parameters"]["InventoryLevelMaxParam"];
                readonly "inventory_level:greater"?: components["parameters"]["InventoryLevelGreaterParam"];
                readonly "inventory_level:less"?: components["parameters"]["InventoryLevelLessParam"];
                /** @description Filter items by inventory_low. Values: 1, 0.
                 *      */
                readonly inventory_low?: components["parameters"]["InventoryLowParam"];
                /** @description Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`.
                 *      */
                readonly out_of_stock?: components["parameters"]["OutOfStockParam"];
                /** @description Filter items by total_sold.
                 *      */
                readonly total_sold?: components["parameters"]["TotalSoldParam"];
                /** @description Filter items by type. */
                readonly type?: components["parameters"]["ProductTypeParam"];
                /** @description Filter items by categories.
                 *       If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`. */
                readonly categories?: components["parameters"]["CategoriesParam"];
                /** @description Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
                readonly keyword?: components["parameters"]["KeywordParam"];
                /** @description Set context used by the search algorithm to return results targeted towards the specified group. Use `merchant` to help merchants search their own catalog. Use `shopper` to return shopper-facing search results. */
                readonly keyword_context?: components["parameters"]["KeywordContextParam"];
                /** @description Filter items by availability. Values are: available, disabled, preorder.
                 *      */
                readonly availability?: components["parameters"]["AvailabilityParam"];
                /** @description Filter items by main SKU. To filter by variant SKU, see [Get all variants](/docs/rest-catalog/product-variants#get-all-product-variants).  */
                readonly sku?: components["parameters"]["SkuParam"];
                /** @description A comma-separated list of SKUs. Returns a list of products with those SKUs. */
                readonly "sku:in"?: components["parameters"]["SkuInParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly (components["schemas"]["product_Full"] & {
                            /** @description The channels to which the product is assigned. This field only appears in the response if you include `channels` in the `include` query parameter. */
                            readonly channels?: readonly number[];
                        })[];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
        };
    };
    readonly updateProducts: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                /** @example [
                 *       {
                 *         "id": 0,
                 *         "name": "Smith Journal 13",
                 *         "type": "physical",
                 *         "sku": "SM-13",
                 *         "description": "<p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>",
                 *         "weight": 0,
                 *         "width": 0,
                 *         "depth": 0,
                 *         "height": 0,
                 *         "price": 0,
                 *         "cost_price": 0,
                 *         "retail_price": 0,
                 *         "sale_price": 0,
                 *         "map_price": 0,
                 *         "tax_class_id": 0,
                 *         "product_tax_code": "string",
                 *         "categories": [
                 *           0
                 *         ],
                 *         "brand_id": 37,
                 *         "inventory_level": 0,
                 *         "inventory_warning_level": 0,
                 *         "inventory_tracking": "none",
                 *         "fixed_cost_shipping_price": 0,
                 *         "is_free_shipping": true,
                 *         "is_visible": true,
                 *         "is_featured": true,
                 *         "related_products": [
                 *           0
                 *         ],
                 *         "warranty": "string",
                 *         "bin_picking_number": "string",
                 *         "layout_file": "string",
                 *         "upc": "string",
                 *         "search_keywords": "string",
                 *         "availability": "available",
                 *         "availability_description": "string",
                 *         "gift_wrapping_options_type": "any",
                 *         "gift_wrapping_options_list": [
                 *           0
                 *         ],
                 *         "sort_order": -2147483648,
                 *         "condition": "New",
                 *         "is_condition_shown": true,
                 *         "order_quantity_minimum": 0,
                 *         "order_quantity_maximum": 0,
                 *         "page_title": "string",
                 *         "meta_keywords": [
                 *           "string"
                 *         ],
                 *         "meta_description": "string",
                 *         "view_count": 0,
                 *         "preorder_release_date": "2019-08-24T14:15:22Z",
                 *         "preorder_message": "string",
                 *         "is_preorder_only": true,
                 *         "is_price_hidden": true,
                 *         "price_hidden_label": "string",
                 *         "custom_url": {
                 *           "url": "string",
                 *           "is_customized": true
                 *         },
                 *         "open_graph_type": "product",
                 *         "open_graph_title": "string",
                 *         "open_graph_description": "string",
                 *         "open_graph_use_meta_description": true,
                 *         "open_graph_use_product_name": true,
                 *         "open_graph_use_image": true,
                 *         "gtin": "string",
                 *         "mpn": "string",
                 *         "date_last_imported": "2015-07-03T18:16:02+00:00",
                 *         "reviews_rating_sum": 3,
                 *         "reviews_count": 4,
                 *         "total_sold": 80,
                 *         "custom_fields": [
                 *           {
                 *             "id": 6,
                 *             "name": "ISBN",
                 *             "value": "1234567890123"
                 *           }
                 *         ],
                 *         "bulk_pricing_rules": [
                 *           {
                 *             "id": 0,
                 *             "quantity_min": 10,
                 *             "quantity_max": 50,
                 *             "type": "price",
                 *             "amount": 10
                 *           }
                 *         ],
                 *         "images": [
                 *           {
                 *             "image_file": "string",
                 *             "is_thumbnail": true,
                 *             "sort_order": -2147483648,
                 *             "description": "string",
                 *             "image_url": "string",
                 *             "id": 0,
                 *             "product_id": 0,
                 *             "date_modified": "2019-08-24T14:15:22Z"
                 *           }
                 *         ]
                 *       }
                 *     ] */
                readonly "application/json": components["schemas"]["product_Put_Collection"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": 0,
                     *       "name": "Smith Journal 13",
                     *       "type": "physical",
                     *       "sku": "SM-13",
                     *       "description": "<p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>",
                     *       "weight": 0,
                     *       "width": 0,
                     *       "depth": 0,
                     *       "height": 0,
                     *       "price": 0,
                     *       "cost_price": 0,
                     *       "retail_price": 0,
                     *       "sale_price": 0,
                     *       "map_price": 0,
                     *       "tax_class_id": 0,
                     *       "product_tax_code": "string",
                     *       "categories": [
                     *         0
                     *       ],
                     *       "brand_id": 37,
                     *       "inventory_level": 0,
                     *       "inventory_warning_level": 0,
                     *       "inventory_tracking": "none",
                     *       "fixed_cost_shipping_price": 0,
                     *       "is_free_shipping": true,
                     *       "is_visible": true,
                     *       "is_featured": true,
                     *       "related_products": [
                     *         0
                     *       ],
                     *       "warranty": "string",
                     *       "bin_picking_number": "string",
                     *       "layout_file": "string",
                     *       "upc": "string",
                     *       "search_keywords": "string",
                     *       "availability": "available",
                     *       "availability_description": "string",
                     *       "gift_wrapping_options_type": "any",
                     *       "gift_wrapping_options_list": [
                     *         0
                     *       ],
                     *       "sort_order": -2147483648,
                     *       "condition": "New",
                     *       "is_condition_shown": true,
                     *       "order_quantity_minimum": 0,
                     *       "order_quantity_maximum": 0,
                     *       "page_title": "string",
                     *       "meta_keywords": [
                     *         "string"
                     *       ],
                     *       "meta_description": "string",
                     *       "view_count": 0,
                     *       "preorder_release_date": "2019-08-24T14:15:22Z",
                     *       "preorder_message": "string",
                     *       "is_preorder_only": true,
                     *       "is_price_hidden": true,
                     *       "price_hidden_label": "string",
                     *       "custom_url": {
                     *         "url": "string",
                     *         "is_customized": true
                     *       },
                     *       "open_graph_type": "product",
                     *       "open_graph_title": "string",
                     *       "open_graph_description": "string",
                     *       "open_graph_use_meta_description": true,
                     *       "open_graph_use_product_name": true,
                     *       "open_graph_use_image": true,
                     *       "gtin": "string",
                     *       "mpn": "string",
                     *       "date_last_imported": "2015-07-03T18:16:02+00:00",
                     *       "reviews_rating_sum": 3,
                     *       "reviews_count": 4,
                     *       "total_sold": 80,
                     *       "custom_fields": [
                     *         {
                     *           "id": 6,
                     *           "name": "ISBN",
                     *           "value": "1234567890123"
                     *         }
                     *       ],
                     *       "bulk_pricing_rules": [
                     *         {
                     *           "id": 0,
                     *           "quantity_min": 10,
                     *           "quantity_max": 50,
                     *           "type": "price",
                     *           "amount": 10
                     *         }
                     *       ],
                     *       "images": [
                     *         {
                     *           "image_file": "string",
                     *           "is_thumbnail": true,
                     *           "sort_order": -2147483648,
                     *           "description": "string",
                     *           "image_url": "string",
                     *           "id": 0,
                     *           "product_id": 0,
                     *           "url_zoom": "string",
                     *           "url_standard": "string",
                     *           "url_thumbnail": "string",
                     *           "url_tiny": "string",
                     *           "date_modified": "2019-08-24T14:15:22Z"
                     *         }
                     *       ]
                     *     } */
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["product_Full"][];
                        readonly meta?: unknown;
                    };
                };
            };
            /** @description Multi-status. Typically indicates that a partial failure has occurred, such as when a POST or PUT request is successful, but saving one of the attributes has failed.
             *
             *     For example, the product information was updated successfully, but the inventory data failed to update or saving the URL failed.
             *
             *     If inventory data failed to update, verify that the inventory-related updates are well-formed and correct; for example, that they donʼt result in negative stock levels. Then consider updating the inventory data again.
             *
             *     If the URL failed to update, check that the URL uses Latin letters, is no more than 255 characters, and is not taken by any other entity. */
            readonly 207: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["product_Full"][];
                        readonly errors?: components["schemas"]["errorMultiStatus"];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
            /** @description The resource was not found. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
            /** @description `Product` was in conflict with another product. This is the result of duplicate unique values such as name or SKU; a missing or invalid `category_id`, `brand_id`, or `tax_class id`; or a conflicting `bulk_pricing_rule`. */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["errorResponse_409"];
                };
            };
            /** @description 413 Request Entity Too Large */
            readonly 413: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "errors": {},
                     *       "status": 413,
                     *       "title": "The request payload is too large. The maximum items allowed in the array is 10.",
                     *       "type": "/api-docs/getting-started/api-status-codes"
                     *     } */
                    readonly "application/json": components["schemas"]["error_Base"];
                };
            };
            /** @description `Product` was not valid. This is the result of missing required fields or invalid data. See the response for more details. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["errorResponse_422"];
                };
            };
        };
    };
    readonly createProduct: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["product_Base_POST"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": 0,
                     *       "name": "Smith Journal 13",
                     *       "type": "physical",
                     *       "sku": "SM-13",
                     *       "description": "<p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>",
                     *       "weight": 0,
                     *       "width": 0,
                     *       "depth": 0,
                     *       "height": 0,
                     *       "price": 0,
                     *       "cost_price": 0,
                     *       "retail_price": 0,
                     *       "sale_price": 0,
                     *       "map_price": 0,
                     *       "tax_class_id": 0,
                     *       "product_tax_code": "string",
                     *       "categories": [
                     *         0
                     *       ],
                     *       "brand_id": 37,
                     *       "inventory_level": 0,
                     *       "inventory_warning_level": 0,
                     *       "inventory_tracking": "none",
                     *       "fixed_cost_shipping_price": 0,
                     *       "is_free_shipping": true,
                     *       "is_visible": true,
                     *       "is_featured": true,
                     *       "related_products": [
                     *         0
                     *       ],
                     *       "warranty": "string",
                     *       "bin_picking_number": "string",
                     *       "layout_file": "string",
                     *       "upc": "string",
                     *       "search_keywords": "string",
                     *       "availability": "available",
                     *       "availability_description": "string",
                     *       "gift_wrapping_options_type": "any",
                     *       "gift_wrapping_options_list": [
                     *         0
                     *       ],
                     *       "sort_order": -2147483648,
                     *       "condition": "New",
                     *       "is_condition_shown": true,
                     *       "order_quantity_minimum": 0,
                     *       "order_quantity_maximum": 0,
                     *       "page_title": "string",
                     *       "meta_keywords": [
                     *         "string"
                     *       ],
                     *       "meta_description": "string",
                     *       "view_count": 0,
                     *       "preorder_release_date": "2019-08-24T14:15:22Z",
                     *       "preorder_message": "string",
                     *       "is_preorder_only": true,
                     *       "is_price_hidden": true,
                     *       "price_hidden_label": "string",
                     *       "custom_url": {
                     *         "url": "string",
                     *         "is_customized": true
                     *       },
                     *       "open_graph_type": "product",
                     *       "open_graph_title": "string",
                     *       "open_graph_description": "string",
                     *       "open_graph_use_meta_description": true,
                     *       "open_graph_use_product_name": true,
                     *       "open_graph_use_image": true,
                     *       "gtin": "string",
                     *       "mpn": "string",
                     *       "date_last_imported": "2015-07-03T18:16:02+00:00",
                     *       "reviews_rating_sum": 3,
                     *       "reviews_count": 4,
                     *       "total_sold": 80,
                     *       "custom_fields": [
                     *         {
                     *           "id": 6,
                     *           "name": "ISBN",
                     *           "value": "1234567890123"
                     *         }
                     *       ],
                     *       "bulk_pricing_rules": [
                     *         {
                     *           "id": 0,
                     *           "quantity_min": 10,
                     *           "quantity_max": 50,
                     *           "type": "price",
                     *           "amount": 10
                     *         }
                     *       ],
                     *       "images": [
                     *         {
                     *           "image_file": "string",
                     *           "is_thumbnail": true,
                     *           "sort_order": -2147483648,
                     *           "description": "string",
                     *           "image_url": "string",
                     *           "id": 0,
                     *           "product_id": 0,
                     *           "url_zoom": "string",
                     *           "url_standard": "string",
                     *           "url_thumbnail": "string",
                     *           "url_tiny": "string",
                     *           "date_modified": "2019-08-24T14:15:22Z"
                     *         }
                     *       ]
                     *     } */
                    readonly "application/json": {
                        readonly data?: components["schemas"]["product_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description Multi-status. Typically indicates that a partial failure has occurred, such as when a POST or PUT request is successful, but saving one of the attributes has failed.
             *
             *     For example, the product information was updated successfully, but the inventory data failed to update or saving the URL failed.
             *
             *     If inventory data failed to update, verify that the inventory-related updates are well-formed and correct; for example, that they donʼt result in negative stock levels. Then consider updating the inventory data again.
             *
             *     If the URL failed to update, check that the URL uses Latin letters, is no more than 255 characters, and is not taken by any other entity. */
            readonly 207: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["product_Full"][];
                        readonly errors?: components["schemas"]["errorMultiStatus"];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
            /** @description `Product` conflicted with another product. This is the result of duplicate unique values, such as name or SKU; a missing or invalid `category_id`, `brand_id`, or `tax_class id`; or a conflicting `bulk_pricing_rule` or `custom_url`.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description `Product` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly deleteProducts: {
        readonly parameters: {
            readonly query?: {
                /** @description Filter items by name.
                 *      */
                readonly name?: components["parameters"]["NameParam"];
                /** @description Filter items by main SKU. To filter by variant SKU, see [Get all variants](/docs/rest-catalog/product-variants#get-all-product-variants).  */
                readonly sku?: components["parameters"]["SkuParam"];
                /** @description Filter items by price.
                 *      */
                readonly price?: components["parameters"]["PriceParam"];
                /** @description Filter items by weight.
                 *      */
                readonly weight?: components["parameters"]["WeightParam"];
                /** @description Filter items by condition.
                 *      */
                readonly condition?: components["parameters"]["ConditionParam"];
                /** @description Filter items by brand ID.
                 *      */
                readonly brand_id?: components["parameters"]["BrandIdParam"];
                /**
                 * @description Filter items by `date_modified`.
                 * @example 2024-07-18
                 */
                readonly date_modified?: components["parameters"]["DateModifiedParam"];
                /**
                 * @description Filter items by date_last_imported.
                 * @example 2020-07-18
                 */
                readonly date_last_imported?: components["parameters"]["DateLastImportedParam"];
                /**
                 * @description Filter items based on whether the product is currently visible on the storefront.
                 * @example true
                 */
                readonly is_visible?: components["parameters"]["IsVisibleParam"];
                /** @description Filter items by is_featured. `1` for true, `0` for false. */
                readonly is_featured?: components["parameters"]["IsFeaturedParam"];
                /** @description Pass a comma-separated list to filter by one or more product IDs. */
                readonly "id:in"?: components["parameters"]["IdInParam"];
                /** @description Filter items by inventory_level.
                 *      */
                readonly inventory_level?: components["parameters"]["InventoryLevelParam"];
                /** @description Filter items by total_sold.
                 *      */
                readonly total_sold?: components["parameters"]["TotalSoldParam"];
                /** @description Filter items by type. */
                readonly type?: components["parameters"]["ProductTypeParam"];
                /** @description Filter items by categories.
                 *       If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`. */
                readonly categories?: components["parameters"]["CategoriesParam"];
                /** @description Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
                readonly keyword?: components["parameters"]["KeywordParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getProduct: {
        readonly parameters: {
            readonly query?: {
                /** @description A comma-separated list of sub-resources to return with a product object. */
                readonly include?: components["parameters"]["IncludeParamGetProduct"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 174,
                     *         "name": "1L Le Parfait Jar",
                     *         "type": "physical",
                     *         "sku": "",
                     *         "description": "<p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>",
                     *         "weight": 1,
                     *         "width": 0,
                     *         "depth": 0,
                     *         "height": 0,
                     *         "price": 7.95,
                     *         "cost_price": 0,
                     *         "retail_price": 10,
                     *         "sale_price": 0,
                     *         "map_price": 0,
                     *         "tax_class_id": 0,
                     *         "product_tax_code": "",
                     *         "calculated_price": 7.95,
                     *         "categories": [
                     *           23,
                     *           21
                     *         ],
                     *         "brand_id": 36,
                     *         "option_set_id": 55,
                     *         "option_set_display": "right",
                     *         "inventory_level": 0,
                     *         "inventory_warning_level": 0,
                     *         "inventory_tracking": "none",
                     *         "reviews_rating_sum": 0,
                     *         "reviews_count": 0,
                     *         "total_sold": 7,
                     *         "fixed_cost_shipping_price": 0,
                     *         "is_free_shipping": false,
                     *         "is_visible": true,
                     *         "is_featured": false,
                     *         "related_products": [
                     *           -1
                     *         ],
                     *         "warranty": "",
                     *         "bin_picking_number": "",
                     *         "layout_file": "product.html",
                     *         "upc": "",
                     *         "mpn": "",
                     *         "gtin": "",
                     *         "search_keywords": "jar, glass",
                     *         "availability": "available",
                     *         "availability_description": "",
                     *         "gift_wrapping_options_type": "any",
                     *         "gift_wrapping_options_list": [],
                     *         "sort_order": 0,
                     *         "condition": "New",
                     *         "is_condition_shown": false,
                     *         "order_quantity_minimum": 0,
                     *         "order_quantity_maximum": 0,
                     *         "page_title": "",
                     *         "meta_keywords": [],
                     *         "meta_description": "",
                     *         "date_created": "2018-08-15T14:48:46+00:00",
                     *         "date_modified": "2018-09-05T20:42:07+00:00",
                     *         "view_count": 10,
                     *         "preorder_release_date": "2018-09-05T20:42:07+00:00",
                     *         "preorder_message": "",
                     *         "is_preorder_only": false,
                     *         "is_price_hidden": false,
                     *         "price_hidden_label": "",
                     *         "custom_url": {
                     *           "url": "/all/1l-le-parfait-jar/",
                     *           "is_customized": true
                     *         },
                     *         "base_variant_id": 345,
                     *         "open_graph_type": "product",
                     *         "open_graph_title": "",
                     *         "open_graph_description": "",
                     *         "open_graph_use_meta_description": true,
                     *         "open_graph_use_product_name": true,
                     *         "open_graph_use_image": true
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: components["schemas"]["product_Full"] & {
                            /** @description The channels to which the product is assigned. This field only appears in the response if you include `channels` in the `include` query parameter. */
                            readonly channels?: readonly number[];
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly updateProduct: {
        readonly parameters: {
            readonly query?: {
                /** @description Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsEnumParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["product_Put"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["product_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                    /** @example {
                     *       "name": "Smith Journal 13",
                     *       "type": "physical",
                     *       "sku": "SM-13",
                     *       "description": "<p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>",
                     *       "weight": 0,
                     *       "width": 0,
                     *       "depth": 0,
                     *       "height": 0,
                     *       "price": 0,
                     *       "cost_price": 0,
                     *       "retail_price": 0,
                     *       "sale_price": 0,
                     *       "map_price": 0,
                     *       "tax_class_id": 0,
                     *       "product_tax_code": "string",
                     *       "categories": [
                     *         0
                     *       ],
                     *       "brand_id": 0,
                     *       "inventory_level": 0,
                     *       "inventory_warning_level": 0,
                     *       "inventory_tracking": "none",
                     *       "fixed_cost_shipping_price": 0,
                     *       "is_free_shipping": true,
                     *       "is_visible": true,
                     *       "is_featured": true,
                     *       "related_products": [
                     *         0
                     *       ],
                     *       "warranty": "string",
                     *       "bin_picking_number": "string",
                     *       "layout_file": "string",
                     *       "upc": "string",
                     *       "search_keywords": "string",
                     *       "availability": "available",
                     *       "availability_description": "string",
                     *       "gift_wrapping_options_type": "any",
                     *       "gift_wrapping_options_list": [
                     *         0
                     *       ],
                     *       "sort_order": -2147483648,
                     *       "condition": "New",
                     *       "is_condition_shown": true,
                     *       "order_quantity_minimum": 0,
                     *       "order_quantity_maximum": 0,
                     *       "page_title": "string",
                     *       "meta_keywords": [
                     *         "string"
                     *       ],
                     *       "meta_description": "string",
                     *       "view_count": 0,
                     *       "preorder_release_date": "2019-08-24T14:15:22+00:00",
                     *       "preorder_message": "string",
                     *       "is_preorder_only": true,
                     *       "is_price_hidden": true,
                     *       "price_hidden_label": "string",
                     *       "custom_url": {
                     *         "url": "string",
                     *         "is_customized": true
                     *       },
                     *       "open_graph_type": "product",
                     *       "open_graph_title": "string",
                     *       "open_graph_description": "string",
                     *       "open_graph_use_meta_description": true,
                     *       "open_graph_use_product_name": true,
                     *       "open_graph_use_image": true,
                     *       "brand_name": "Common Good",
                     *       "gtin": "string",
                     *       "mpn": "string",
                     *       "reviews_rating_sum": 3.2,
                     *       "reviews_count": 4,
                     *       "total_sold": 80,
                     *       "custom_fields": [
                     *         {
                     *           "id": 6,
                     *           "name": "ISBN",
                     *           "value": "1234567890123"
                     *         }
                     *       ],
                     *       "bulk_pricing_rules": [
                     *         {
                     *           "id": 0,
                     *           "quantity_min": 10,
                     *           "quantity_max": 50,
                     *           "type": "price",
                     *           "amount": 10
                     *         }
                     *       ],
                     *       "images": [
                     *         {
                     *           "image_file": "string",
                     *           "is_thumbnail": true,
                     *           "sort_order": -2147483648,
                     *           "description": "string",
                     *           "image_url": "string",
                     *           "id": 0,
                     *           "product_id": 0,
                     *           "url_zoom": "string",
                     *           "url_standard": "string",
                     *           "url_thumbnail": "string",
                     *           "url_tiny": "string",
                     *           "date_modified": "2019-08-24T14:15:22+00:00"
                     *         }
                     *       ],
                     *       "videos": [
                     *         {
                     *           "title": "string",
                     *           "description": "string",
                     *           "sort_order": -2147483648,
                     *           "type": "youtube",
                     *           "video_id": "string",
                     *           "id": 0,
                     *           "product_id": 0,
                     *           "length": "string"
                     *         }
                     *       ],
                     *       "date_created": "2018-08-15T14:49:05+00:00",
                     *       "date_modified": "2018-08-24T14:41:00+00:00",
                     *       "id": 1,
                     *       "base_variant_id": 0,
                     *       "calculated_price": 0,
                     *       "options": [
                     *         {
                     *           "id": 55,
                     *           "product_id": 4,
                     *           "display_name": "Add-a-$5-Donation1535042499-187",
                     *           "type": "radio_buttons",
                     *           "config": {
                     *             "default_value": "string",
                     *             "checked_by_default": true,
                     *             "checkbox_label": "string",
                     *             "date_limited": true,
                     *             "date_limit_mode": "range",
                     *             "date_earliest_value": "2019-08-24T00:00:00+00:00",
                     *             "date_latest_value": "2019-08-24T00:00:00+00:00",
                     *             "file_types_mode": "specific",
                     *             "file_types_supported": [
                     *               "images, documents, other"
                     *             ],
                     *             "file_types_other": [
                     *               "pdf"
                     *             ],
                     *             "file_max_size": 5,
                     *             "text_characters_limited": true,
                     *             "text_min_length": 1,
                     *             "text_max_length": 55,
                     *             "text_lines_limited": true,
                     *             "text_max_lines": 4,
                     *             "number_limited": true,
                     *             "number_limit_mode": "lowest",
                     *             "number_lowest_value": 100,
                     *             "number_highest_value": 0,
                     *             "number_integers_only": false,
                     *             "product_list_adjusts_inventory": true,
                     *             "product_list_adjusts_pricing": true,
                     *             "product_list_shipping_calc": "weight"
                     *           },
                     *           "sort_order": 1,
                     *           "option_values": {
                     *             "is_default": false,
                     *             "label": "Green",
                     *             "sort_order": 0,
                     *             "value_data": {},
                     *             "id": 0
                     *           }
                     *         }
                     *       ],
                     *       "modifiers": [
                     *         {
                     *           "type": "date",
                     *           "required": true,
                     *           "sort_order": 0,
                     *           "config": {
                     *             "default_value": "string",
                     *             "checked_by_default": true,
                     *             "checkbox_label": "string",
                     *             "date_limited": true,
                     *             "date_limit_mode": "range",
                     *             "date_earliest_value": "2019-08-24T00:00:00+00:00",
                     *             "date_latest_value": "2019-08-24T00:00:00+00:00",
                     *             "file_types_mode": "specific",
                     *             "file_types_supported": [
                     *               "images, documents, other"
                     *             ],
                     *             "file_types_other": [
                     *               "pdf"
                     *             ],
                     *             "file_max_size": 5,
                     *             "text_characters_limited": true,
                     *             "text_min_length": 1,
                     *             "text_max_length": 55,
                     *             "text_lines_limited": true,
                     *             "text_max_lines": 4,
                     *             "number_limited": true,
                     *             "number_limit_mode": "lowest",
                     *             "number_lowest_value": 100,
                     *             "number_highest_value": 0,
                     *             "number_integers_only": false,
                     *             "product_list_adjusts_inventory": true,
                     *             "product_list_adjusts_pricing": true,
                     *             "product_list_shipping_calc": "weight"
                     *           },
                     *           "display_name": "string",
                     *           "id": 12,
                     *           "product_id": 77,
                     *           "name": "Add-a-$5-Donation1535039590-191",
                     *           "option_values": [
                     *             {
                     *               "is_default": false,
                     *               "label": "Green",
                     *               "sort_order": 0,
                     *               "value_data": {},
                     *               "adjusters": {
                     *                 "price": {
                     *                   "adjuster": "relative",
                     *                   "adjuster_value": 5
                     *                 },
                     *                 "weight": {
                     *                   "adjuster": "relative",
                     *                   "adjuster_value": 5
                     *                 },
                     *                 "image_url": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2",
                     *                 "purchasing_disabled": {
                     *                   "status": true,
                     *                   "message": "string"
                     *                 }
                     *               },
                     *               "id": 0,
                     *               "option_id": 0
                     *             }
                     *           ]
                     *         }
                     *       ],
                     *       "option_set_id": 0,
                     *       "option_set_display": "string",
                     *       "variants": [
                     *         {
                     *           "cost_price": 0,
                     *           "price": 0,
                     *           "sale_price": 0,
                     *           "retail_price": 0,
                     *           "weight": 0,
                     *           "width": 0,
                     *           "height": 0,
                     *           "depth": 0,
                     *           "is_free_shipping": true,
                     *           "fixed_cost_shipping_price": 0,
                     *           "purchasing_disabled": true,
                     *           "purchasing_disabled_message": "string",
                     *           "upc": "string",
                     *           "inventory_level": 0,
                     *           "inventory_warning_level": 0,
                     *           "bin_picking_number": "string",
                     *           "mpn": "string",
                     *           "gtin": 12345678905,
                     *           "id": 0,
                     *           "product_id": 0,
                     *           "sku": "string",
                     *           "sku_id": 0,
                     *           "option_values": [
                     *             {
                     *               "option_display_name": "Color",
                     *               "label": "Beige",
                     *               "id": 146,
                     *               "option_id": 151
                     *             }
                     *           ],
                     *           "calculated_price": 0,
                     *           "calculated_weight": 0
                     *         }
                     *       ],
                     *       "meta": {}
                     *     } */
                    readonly "example-1": unknown;
                };
            };
            /** @description Multi-status. Typically indicates that a partial failure has occurred, such as when a POST or PUT request is successful, but saving one of the attributes has failed.
             *
             *     For example, the product information was updated successfully, but the inventory data failed to update or saving the URL failed.
             *
             *     If inventory data failed to update, verify that the inventory-related updates are well-formed and correct; for example, that they donʼt result in negative stock levels. Then consider updating the inventory data again.
             *
             *     If the URL failed to update, check that the URL uses Latin letters, is no more than 255 characters, and is not taken by any other entity. */
            readonly 207: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["product_Full"];
                        readonly errors?: components["schemas"]["errorMultiStatus"];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
            /** @description `Product` was in conflict with another product. This is caused by: duplicate unique values, such as name or SKU; a missing category, brand, or tax_class with which the product is being associated; or a conflicting bulk pricing rule.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description `Product` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly deleteProduct: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getProductImages: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "id": 382,
                     *           "product_id": 158,
                     *           "is_thumbnail": true,
                     *           "sort_order": 0,
                     *           "description": "",
                     *           "image_file": "a/521/foglinenbeigestripetowel1b_1024x1024__83011__60806.jpg",
                     *           "url_zoom": "https://cdn8.bigcommerce.com/s-id30h7ohwf/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.1280.1280.jpg?c=2",
                     *           "url_standard": "https://cdn8.bigcommerce.com/s-id30h7ohwf/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.560.850.jpg?c=2",
                     *           "url_thumbnail": "https://cdn8.bigcommerce.com/s-id30h7ohwf/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.330.500.jpg?c=2",
                     *           "url_tiny": "https://cdn8.bigcommerce.com/s-id30h7ohwf/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.66.100.jpg?c=2",
                     *           "date_modified": "2018-08-15T14:48:31+00:00"
                     *         },
                     *         {
                     *           "id": 383,
                     *           "product_id": 158,
                     *           "is_thumbnail": false,
                     *           "sort_order": 0,
                     *           "description": "",
                     *           "image_file": "k/050/foglinenbeigestripetowel2b_1024x1024__16082__46564.jpg",
                     *           "url_zoom": "https://cdn8.bigcommerce.com/s-id30h7ohwf/products/158/images/383/foglinenbeigestripetowel2b_1024x1024__16082__46564.1534344511.1280.1280.jpg?c=2",
                     *           "url_standard": "https://cdn8.bigcommerce.com/s-id30h7ohwf/products/158/images/383/foglinenbeigestripetowel2b_1024x1024__16082__46564.1534344511.560.850.jpg?c=2",
                     *           "url_thumbnail": "https://cdn8.bigcommerce.com/s-id30h7ohwf/products/158/images/383/foglinenbeigestripetowel2b_1024x1024__16082__46564.1534344511.330.500.jpg?c=2",
                     *           "url_tiny": "https://cdn8.bigcommerce.com/s-id30h7ohwf/products/158/images/383/foglinenbeigestripetowel2b_1024x1024__16082__46564.1534344511.66.100.jpg?c=2",
                     *           "date_modified": "2018-08-15T14:48:31+00:00"
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "total": 2,
                     *           "count": 2,
                     *           "per_page": 50,
                     *           "current_page": 1,
                     *           "total_pages": 1,
                     *           "links": {
                     *             "current": "?page=1&limit=50"
                     *           }
                     *         }
                     *       }
                     *     } */
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["productImage_Full"][];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
            /** @description There are not any images on this product.
             *      */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The product ID does not exist.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly createProductImage: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["productImage_Post_Put"];
                readonly "multipart/form-data": {
                    /** @description The unique numeric identifier for the product with which the image is associated.
                     *      */
                    readonly product_id?: number;
                    /**
                     * Format: date-time
                     * @description The date on which the product image was modified.
                     *
                     */
                    readonly date_modified?: string;
                    /** @description Flag for identifying whether the image is used as the productʼs thumbnail.
                     *      */
                    readonly is_thumbnail?: boolean;
                    /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered.
                     *      */
                    readonly sort_order?: number;
                    /** @description The description for the image.
                     *      */
                    readonly description?: string;
                    /** @description The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
                     *
                     *     Must be sent as a `multipart/form-data` field in the request body. Limit of 8 MB per file. Cannot be used with `image_url`.
                     *      */
                    readonly image_file?: string;
                };
            };
        };
        readonly responses: {
            /** @description Success */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Product Image */
                        readonly data?: {
                            /** @description The unique numeric ID of the image; increments sequentially.
                             *      */
                            readonly id?: number;
                            /** @description The unique numeric identifier for the product with which the image is associated.
                             *      */
                            readonly product_id?: number;
                            /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image.
                             *      */
                            readonly url_zoom?: string;
                            /** @description The standard URL for this image. By default, this is used for product-page images.
                             *      */
                            readonly url_standard?: string;
                            /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels.
                             *      */
                            readonly url_thumbnail?: string;
                            /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page.
                             *      */
                            readonly url_tiny?: string;
                            /**
                             * Format: date-time
                             * @description The date on which the product image was modified.
                             *
                             */
                            readonly date_modified?: string;
                            /** @description Flag for identifying whether the image is used as the productʼs thumbnail.
                             *      */
                            readonly is_thumbnail?: boolean;
                            /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered.
                             *      */
                            readonly sort_order?: number;
                            /** @description The description for the image.
                             *      */
                            readonly description?: string;
                            /** @description Must be a fully qualified URL path, including protocol. Limit of 8MB per file.
                             *      */
                            readonly image_url?: string;
                        } | {
                            /** @description The unique numeric ID of the image; increments sequentially.
                             *      */
                            readonly id?: number;
                            /** @description The unique numeric identifier for the product with which the image is associated.
                             *      */
                            readonly product_id?: number;
                            /** @description The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
                             *     A `multipart/form-data` media type.
                             *
                             *     Must be sent as a multipart/form-data field in the request body. Limit of 8 MB per file. */
                            readonly image_file?: string;
                            /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image.
                             *      */
                            readonly url_zoom?: string;
                            /** @description The standard URL for this image. By default, this is used for product-page images.
                             *      */
                            readonly url_standard?: string;
                            /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels.
                             *      */
                            readonly url_thumbnail?: string;
                            /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page.
                             *      */
                            readonly url_tiny?: string;
                            /**
                             * Format: date-time
                             * @description The date on which the product image was modified.
                             *
                             */
                            readonly date_modified?: string;
                            /** @description Flag for identifying whether the image is used as the productʼs thumbnail.
                             *      */
                            readonly is_thumbnail?: boolean;
                            /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered.
                             *      */
                            readonly sort_order?: number;
                            /** @description The description for the image.
                             *      */
                            readonly description?: string;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": Record<string, unknown>;
                };
            };
            /** @description The product ID does not exist.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
            /** @description Unprocessable Entity.
             *
             *     May occur if the `Content-Type` header is set to `multipart/form-data` rather than `application/json` when creating a product image using `image_url`. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 422,
                     *       "title": "image_url must be present if uploading by url",
                     *       "type": "/api-docs/getting-started/api-status-codes"
                     *     } */
                    readonly "application/json": {
                        readonly status: number;
                        readonly title: string;
                        readonly type: string;
                    };
                };
            };
        };
    };
    readonly getProductImage: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Image` that is being operated on.
                 *      */
                readonly image_id: components["parameters"]["ImageIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 485,
                     *         "product_id": 158,
                     *         "is_thumbnail": false,
                     *         "sort_order": 1,
                     *         "description": "",
                     *         "image_file": "o/381/product-image__98178.png",
                     *         "url_zoom": "https://cdn8.bigcommerce.com/s-id30h7ohwf/products/158/images/485/product-image__98178.1536854227.1280.1280.png?c=2",
                     *         "url_standard": "https://cdn8.bigcommerce.com/s-id30h7ohwf/products/158/images/485/product-image__98178.1536854227.560.850.png?c=2",
                     *         "url_thumbnail": "https://cdn8.bigcommerce.com/s-id30h7ohwf/products/158/images/485/product-image__98178.1536854227.330.500.png?c=2",
                     *         "url_tiny": "https://cdn8.bigcommerce.com/s-id30h7ohwf/products/158/images/485/product-image__98178.1536854227.66.100.png?c=2",
                     *         "date_modified": "2018-09-13T15:57:07+00:00"
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: components["schemas"]["productImage_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly updateProductImage: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Image` that is being operated on.
                 *      */
                readonly image_id: components["parameters"]["ImageIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["productImage_Post_Put"];
                readonly "multipart/form-data": {
                    /** @description The unique numeric identifier for the product with which the image is associated.
                     *      */
                    readonly product_id?: number;
                    /**
                     * Format: date-time
                     * @description The date on which the product image was modified.
                     *
                     */
                    readonly date_modified?: string;
                    /** @description Flag for identifying whether the image is used as the productʼs thumbnail.
                     *      */
                    readonly is_thumbnail?: boolean;
                    /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered.
                     *      */
                    readonly sort_order?: number;
                    /** @description The description for the image.
                     *      */
                    readonly description?: string;
                    /** @description The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
                     *
                     *     Must be sent as a `multipart/form-data` field in the request body. Limit of 8 MB per file. Cannot be used with `image_url`.
                     *      */
                    readonly image_file?: string;
                };
            };
        };
        readonly responses: {
            /** @description Success */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Product Image */
                        readonly data?: {
                            /** @description The unique numeric ID of the image; increments sequentially.
                             *      */
                            readonly id?: number;
                            /** @description The unique numeric identifier for the product with which the image is associated.
                             *      */
                            readonly product_id?: number;
                            /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image.
                             *      */
                            readonly url_zoom?: string;
                            /** @description The standard URL for this image. By default, this is used for product-page images.
                             *      */
                            readonly url_standard?: string;
                            /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels.
                             *      */
                            readonly url_thumbnail?: string;
                            /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page.
                             *      */
                            readonly url_tiny?: string;
                            /**
                             * Format: date-time
                             * @description The date on which the product image was modified.
                             *
                             */
                            readonly date_modified?: string;
                            /** @description Flag for identifying whether the image is used as the productʼs thumbnail.
                             *      */
                            readonly is_thumbnail?: boolean;
                            /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered.
                             *      */
                            readonly sort_order?: number;
                            /** @description The description for the image.
                             *      */
                            readonly description?: string;
                            /** @description Must be a fully qualified URL path, including protocol. Limit of 8MB per file.
                             *      */
                            readonly image_url?: string;
                        } | {
                            /** @description The unique numeric ID of the image; increments sequentially.
                             *      */
                            readonly id?: number;
                            /** @description The unique numeric identifier for the product with which the image is associated.
                             *      */
                            readonly product_id?: number;
                            /** @description The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
                             *     A `multipart/form-data` media type.
                             *
                             *     Must be sent as a multipart/form-data field in the request body. Limit of 8 MB per file. */
                            readonly image_file?: string;
                            /** @description The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image.
                             *      */
                            readonly url_zoom?: string;
                            /** @description The standard URL for this image. By default, this is used for product-page images.
                             *      */
                            readonly url_standard?: string;
                            /** @description The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels.
                             *      */
                            readonly url_thumbnail?: string;
                            /** @description The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page.
                             *      */
                            readonly url_tiny?: string;
                            /**
                             * Format: date-time
                             * @description The date on which the product image was modified.
                             *
                             */
                            readonly date_modified?: string;
                            /** @description Flag for identifying whether the image is used as the productʼs thumbnail.
                             *      */
                            readonly is_thumbnail?: boolean;
                            /** @description The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered.
                             *      */
                            readonly sort_order?: number;
                            /** @description The description for the image.
                             *      */
                            readonly description?: string;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": Record<string, unknown>;
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
            /** @description Product image was not valid. This is the result of missing required fields or invalid data. See the response for more details. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["errorResponse_422"];
                };
            };
        };
    };
    readonly deleteProductImage: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Image` that is being operated on.
                 *      */
                readonly image_id: components["parameters"]["ImageIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getProductVideos: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "id": 6,
                     *           "type": "youtube",
                     *           "video_id": "PqBTp23RLhI",
                     *           "product_id": 192,
                     *           "sort_order": 1,
                     *           "title": "Creating and Editing Banners | BigCommerce Tutorials",
                     *           "description": "Learn how to create and edit marketing banners. Marketing banners are a great way to advertise sales, display coupon codes, and add design elements. Let’s take a look at how you can leverage banners to convert your store’s visitors into paying customers.",
                     *           "length": "01:54"
                     *         },
                     *         {
                     *           "id": 7,
                     *           "type": "youtube",
                     *           "video_id": "EhYBjzqd-nI",
                     *           "product_id": 192,
                     *           "sort_order": 2,
                     *           "title": "BigCommerce Company Values",
                     *           "description": "These are the core principles upon which BigCommerce was built, guiding what we do and how we do it. Each employee learns them, loves them and lives them. Our merchants benefit from them every time they use our product or get help from our support team.\n\nJoin the BigCommerce team and help us build software that changes lives!\n\nhttps://www.bigcommerce.com/careers/",
                     *           "length": "03:30"
                     *         },
                     *         {
                     *           "id": 8,
                     *           "type": "youtube",
                     *           "video_id": "vAUdo4kRjrU",
                     *           "product_id": 192,
                     *           "sort_order": 3,
                     *           "title": "TOP WORKPLACES 2016 - Austin American Statesman + BigCommerce",
                     *           "description": "We've been named one of Austin American-Statesmanʼs Top WorkPlaces for the 5th year in a row! Hereʼs what some employees have to say:\n\n“I am given the freedom and trust to make a difference.”\n\n“Everyone believes in the product and growing the company.”\n\n“I'm appreciated for the work I do and there is room to grown within the company.”\n\nWork With Us!\nhttp://www.bigcommerce.com/careers.php",
                     *           "length": "01:37"
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "total": 3,
                     *           "count": 3,
                     *           "per_page": 50,
                     *           "current_page": 1,
                     *           "total_pages": 1,
                     *           "links": {
                     *             "current": "?page=1&limit=50"
                     *           }
                     *         }
                     *       }
                     *     } */
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["productVideo_Full"][];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
        };
    };
    readonly createProductVideo: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description The title for the video. If left blank, this will be filled in according to data on a host site.
                     *
                     * @example Writing Great Documentation
                     */
                    readonly title?: string;
                    /**
                     * @description The description for the video. If left blank, this will be filled in according to data on a host site.
                     *
                     * @example A video about documenation
                     */
                    readonly description?: string;
                    /**
                     * @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the videoʼs new `sort_order` value will have their `sort_order`s reordered.
                     *
                     * @example 1
                     */
                    readonly sort_order?: number;
                    /**
                     * @description The video type (a short name of a host site).
                     *
                     * @enum {string}
                     */
                    readonly type?: "youtube";
                } & {
                    /**
                     * @description The ID of the video on a host site.
                     *
                     * @example z3fRu9pkuXE
                     */
                    readonly video_id?: string;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "title": "Your Video",
                     *       "description": "Company Values",
                     *       "sort_order": 1,
                     *       "type": "youtube",
                     *       "video_id": "123345AA"
                     *     } */
                    readonly "application/json": {
                        /**
                         * Product Video
                         * @description A product video model.
                         *
                         */
                        readonly data?: {
                            /** @description The title for the video. If left blank, this will be filled in according to data on a host site.
                             *      */
                            readonly title?: string;
                            /** @description The description for the video. If left blank, this will be filled in according to data on a host site.
                             *      */
                            readonly description?: string;
                            /** @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the videoʼs new `sort_order` value will have their `sort_order`s reordered.
                             *      */
                            readonly sort_order?: number;
                            /**
                             * @description The video type (a short name of a host site).
                             *
                             * @enum {string}
                             */
                            readonly type?: "youtube";
                        } & {
                            /** @description The unique numeric ID of the product video; increments sequentially.
                             *      */
                            readonly id?: number;
                            /** @description The ID of the video on a host site.
                             *      */
                            readonly video_id?: string;
                            /** @description The unique numeric identifier for the product with which the image is associated.
                             *      */
                            readonly product_id?: number;
                            /** @description Length of the video. This will be filled in according to data on a host site.
                             *      */
                            readonly length?: string;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly getProductVideo: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The BigCommerce ID of the `Video` */
                readonly id: components["parameters"]["VideoIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "title": "Your Video",
                     *       "description": "Company Values",
                     *       "sort_order": 1,
                     *       "type": "youtube",
                     *       "video_id": "123345AA"
                     *     } */
                    readonly "application/json": {
                        readonly data?: components["schemas"]["productVideo_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly updateProductVideo: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The BigCommerce ID of the `Video` */
                readonly id: components["parameters"]["VideoIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description The title for the video. If left blank, this will be filled in according to data on a host site.
                     *      */
                    readonly title?: string;
                    /** @description The description for the video. If left blank, this will be filled in according to data on a host site.
                     *      */
                    readonly description?: string;
                    /** @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the videoʼs new `sort_order` value will have their `sort_order`s reordered.
                     *      */
                    readonly sort_order?: number;
                    /**
                     * @description The video type (a short name of a host site).
                     *
                     * @enum {string}
                     */
                    readonly type?: "youtube";
                } & {
                    /** @description The unique numeric ID of the product video; increments sequentially.
                     *      */
                    readonly id?: number;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "title": "Your Video",
                     *       "description": "Company Values",
                     *       "sort_order": 1,
                     *       "type": "youtube",
                     *       "video_id": "123345AA"
                     *     } */
                    readonly "application/json": {
                        /**
                         * Product Video
                         * @description A product video model.
                         *
                         */
                        readonly data?: {
                            /** @description The title for the video. If left blank, this will be filled in according to data on a host site.
                             *      */
                            readonly title?: string;
                            /** @description The description for the video. If left blank, this will be filled in according to data on a host site.
                             *      */
                            readonly description?: string;
                            /** @description The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the videoʼs new `sort_order` value will have their `sort_order`s reordered.
                             *      */
                            readonly sort_order?: number;
                            /**
                             * @description The video type (a short name of a host site).
                             *
                             * @enum {string}
                             */
                            readonly type?: "youtube";
                        } & {
                            /** @description The unique numeric ID of the product video; increments sequentially.
                             *      */
                            readonly id?: number;
                            /** @description The ID of the video on a host site.
                             *      */
                            readonly video_id?: string;
                            /** @description The unique numeric identifier for the product with which the image is associated.
                             *      */
                            readonly product_id?: number;
                            /** @description Length of the video. This will be filled in according to data on a host site.
                             *      */
                            readonly length?: string;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly deleteProductVideo: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The BigCommerce ID of the `Video` */
                readonly id: components["parameters"]["VideoIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getProductComplexRules: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "id": 82,
                     *           "product_id": 195,
                     *           "sort_order": 0,
                     *           "enabled": true,
                     *           "stop": false,
                     *           "price_adjuster": {
                     *             "adjuster": "relative",
                     *             "adjuster_value": 8
                     *           },
                     *           "weight_adjuster": {},
                     *           "purchasing_disabled": false,
                     *           "purchasing_disabled_message": "",
                     *           "purchasing_hidden": false,
                     *           "image_url": "",
                     *           "conditions": [
                     *             {
                     *               "rule_id": 82,
                     *               "modifier_id": 221,
                     *               "modifier_value_id": 175,
                     *               "variant_id": 1,
                     *               "combination_id": 0
                     *             }
                     *           ]
                     *         },
                     *         {
                     *           "id": 83,
                     *           "product_id": 195,
                     *           "sort_order": 1,
                     *           "enabled": true,
                     *           "stop": false,
                     *           "price_adjuster": {},
                     *           "weight_adjuster": {
                     *             "adjuster": "relative",
                     *             "adjuster_value": 3
                     *           },
                     *           "purchasing_disabled": false,
                     *           "purchasing_disabled_message": "",
                     *           "purchasing_hidden": false,
                     *           "image_url": "",
                     *           "conditions": [
                     *             {
                     *               "rule_id": 83,
                     *               "modifier_id": 221,
                     *               "modifier_value_id": 174,
                     *               "variant_id": 1,
                     *               "combination_id": 0
                     *             }
                     *           ]
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "total": 2,
                     *           "count": 2,
                     *           "per_page": 50,
                     *           "current_page": 1,
                     *           "total_pages": 1,
                     *           "links": {
                     *             "current": "?page=1&limit=50"
                     *           }
                     *         }
                     *       }
                     *     } */
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["complexRule_Base"][];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
        };
    };
    readonly createProductComplexRule: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description The priority to give this rule when making adjustments to the product properties.
                     *
                     * @example 0
                     */
                    readonly sort_order?: number;
                    /**
                     * @description Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
                     *
                     * @example true
                     */
                    readonly enabled?: boolean;
                    /** @description Flag for determining whether other rules should not be applied after this rule has been applied.
                     *      */
                    readonly stop?: boolean;
                    /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.
                     *      */
                    readonly purchasing_disabled?: boolean;
                    /**
                     * @description Message displayed on the storefront when a rule disables the purchasing of a product.
                     *
                     * @example This product is not available at this time.
                     */
                    readonly purchasing_disabled_message?: string;
                    /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.
                     *      */
                    readonly purchasing_hidden?: boolean;
                    /**
                     * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
                     *
                     * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
                     */
                    readonly image_url?: string;
                    /**
                     * Adjuster
                     * @description Adjuster for Complex Rules.
                     */
                    readonly price_adjuster?: {
                        /**
                         * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                         *
                         * @enum {string|null}
                         */
                        readonly adjuster?: "relative" | "percentage" | null;
                        /**
                         * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                         *
                         * @example 5
                         */
                        readonly adjuster_value?: number;
                    };
                    /**
                     * Adjuster
                     * @description Adjuster for Complex Rules.
                     */
                    readonly weight_adjuster?: {
                        /**
                         * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                         *
                         * @enum {string|null}
                         */
                        readonly adjuster?: "relative" | "percentage" | null;
                        /**
                         * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                         *
                         * @example 5
                         */
                        readonly adjuster_value?: number;
                    };
                    readonly conditions?: components["schemas"]["conditionsRequest"];
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /**
                         * Complex Rule
                         * @description Common ComplexRule properties.
                         */
                        readonly data?: {
                            /**
                             * @description The unique numeric ID of the rule; increments sequentially.
                             *     Read-Only
                             * @example 5
                             */
                            readonly id?: number;
                            /**
                             * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
                             *
                             * @example 67
                             */
                            readonly product_id?: number | null;
                            /**
                             * @description The priority to give this rule when making adjustments to the product properties.
                             *
                             * @example 0
                             */
                            readonly sort_order?: number;
                            /**
                             * @description Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
                             *
                             * @example true
                             */
                            readonly enabled?: boolean;
                            /** @description Flag for determining whether other rules should not be applied after this rule has been applied.
                             *      */
                            readonly stop?: boolean;
                            /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.
                             *      */
                            readonly purchasing_disabled?: boolean;
                            /**
                             * @description Message displayed on the storefront when a rule disables the purchasing of a product.
                             *
                             * @example This product is not available at this time.
                             */
                            readonly purchasing_disabled_message?: string;
                            /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.
                             *      */
                            readonly purchasing_hidden?: boolean;
                            /**
                             * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
                             *
                             * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
                             */
                            readonly image_url?: string;
                            /**
                             * Adjuster
                             * @description Adjuster for Complex Rules.
                             */
                            readonly price_adjuster?: {
                                /**
                                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                 *
                                 * @enum {string|null}
                                 */
                                readonly adjuster?: "relative" | "percentage" | null;
                                /**
                                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                 *
                                 * @example 5
                                 */
                                readonly adjuster_value?: number;
                            };
                            /**
                             * Adjuster
                             * @description Adjuster for Complex Rules.
                             */
                            readonly weight_adjuster?: {
                                /**
                                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                 *
                                 * @enum {string|null}
                                 */
                                readonly adjuster?: "relative" | "percentage" | null;
                                /**
                                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                 *
                                 * @example 5
                                 */
                                readonly adjuster_value?: number;
                            };
                            readonly conditions?: readonly {
                                /**
                                 * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
                                 *
                                 * @example 3
                                 */
                                readonly id?: number | null;
                                /**
                                 * @description The unique numeric ID of the rule with which the condition is associated.
                                 *     Read-Only
                                 * @example 4
                                 */
                                readonly rule_id?: number | null;
                                /**
                                 * @description The unique numeric ID of the modifier with which the rule condition is associated.
                                 *     Required in /POST.
                                 * @example 55
                                 */
                                readonly modifier_id: number | null;
                                /**
                                 * @description The unique numeric ID of the modifier value with which the rule condition is associated.
                                 *     Required in /POST.
                                 * @example 256
                                 */
                                readonly modifier_value_id: number | null;
                                /**
                                 * @description The unique numeric ID of the variant with which the rule condition is associated.
                                 *     Required in /POST.
                                 * @example 1
                                 */
                                readonly variant_id: number | null;
                                /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3.
                                 *      */
                                readonly combination_id?: number;
                            }[];
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The `ComplexRule` was in conflict with another `ComplexRule`. This is the result of duplicate conditions.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description The `ComplexRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly getProductComplexRule: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `ComplexRule`.
                 *      */
                readonly complex_rule_id: components["parameters"]["ComplexRuleIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /**
                         * Complex Rule
                         * @description Common ComplexRule properties.
                         */
                        readonly data?: {
                            /**
                             * @description The unique numeric ID of the rule; increments sequentially.
                             *     Read-Only
                             * @example 5
                             */
                            readonly id?: number;
                            /**
                             * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
                             *
                             * @example 67
                             */
                            readonly product_id?: number;
                            /**
                             * @description The priority to give this rule when making adjustments to the product properties.
                             *
                             * @example 0
                             */
                            readonly sort_order?: number;
                            /**
                             * @description Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
                             *
                             * @example true
                             */
                            readonly enabled?: boolean;
                            /** @description Flag for determining whether other rules should not be applied after this rule has been applied.
                             *      */
                            readonly stop?: boolean;
                            /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.
                             *      */
                            readonly purchasing_disabled?: boolean;
                            /**
                             * @description Message displayed on the storefront when a rule disables the purchasing of a product.
                             *
                             * @example This product is not available at this time.
                             */
                            readonly purchasing_disabled_message?: string;
                            /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.
                             *      */
                            readonly purchasing_hidden?: boolean;
                            /**
                             * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
                             *
                             * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
                             */
                            readonly image_url?: string;
                            /**
                             * Adjuster
                             * @description Adjuster for Complex Rules.
                             */
                            readonly price_adjuster?: {
                                /**
                                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                 *
                                 * @enum {string}
                                 */
                                readonly adjuster?: "relative" | "percentage";
                                /**
                                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                 *
                                 * @example 5
                                 */
                                readonly adjuster_value?: number;
                            };
                            /**
                             * Adjuster
                             * @description Adjuster for Complex Rules.
                             */
                            readonly weight_adjuster?: {
                                /**
                                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                 *
                                 * @enum {string}
                                 */
                                readonly adjuster?: "relative" | "percentage";
                                /**
                                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                 *
                                 * @example 5
                                 */
                                readonly adjuster_value?: number;
                            };
                            readonly conditions?: readonly {
                                /**
                                 * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
                                 *
                                 * @example 3
                                 */
                                readonly id?: number;
                                /**
                                 * @description The unique numeric ID of the rule with which the condition is associated.
                                 *     Read-Only
                                 * @example 4
                                 */
                                readonly rule_id?: number;
                                /**
                                 * @description The unique numeric ID of the modifier with which the rule condition is associated.
                                 *     Required in /POST.
                                 * @example 55
                                 */
                                readonly modifier_id: number;
                                /**
                                 * @description The unique numeric ID of the modifier value with which the rule condition is associated.
                                 *     Required in /POST.
                                 * @example 256
                                 */
                                readonly modifier_value_id: number;
                                /**
                                 * @description The unique numeric ID of the variant with which the rule condition is associated.
                                 *     Required in /POST.
                                 * @example 1
                                 */
                                readonly variant_id: number;
                                /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3.
                                 *      */
                                readonly combination_id?: number;
                            }[];
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly updateProductComplexRule: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `ComplexRule`.
                 *      */
                readonly complex_rule_id: components["parameters"]["ComplexRuleIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description The priority to give this rule when making adjustments to the product properties.
                     *
                     * @example 0
                     */
                    readonly sort_order?: number;
                    /**
                     * @description Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
                     *
                     * @example true
                     */
                    readonly enabled?: boolean;
                    /** @description Flag for determining whether other rules should not be applied after this rule has been applied.
                     *      */
                    readonly stop?: boolean;
                    /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.
                     *      */
                    readonly purchasing_disabled?: boolean;
                    /**
                     * @description Message displayed on the storefront when a rule disables the purchasing of a product.
                     *
                     * @example This product is not available at this time.
                     */
                    readonly purchasing_disabled_message?: string;
                    /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.
                     *      */
                    readonly purchasing_hidden?: boolean;
                    /**
                     * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
                     *
                     * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
                     */
                    readonly image_url?: string;
                    /**
                     * Adjuster
                     * @description Adjuster for Complex Rules.
                     */
                    readonly price_adjuster?: {
                        /**
                         * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                         *
                         * @enum {string|null}
                         */
                        readonly adjuster?: "relative" | "percentage" | null;
                        /**
                         * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                         *
                         * @example 5
                         */
                        readonly adjuster_value?: number;
                    };
                    /**
                     * Adjuster
                     * @description Adjuster for Complex Rules.
                     */
                    readonly weight_adjuster?: {
                        /**
                         * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                         *
                         * @enum {string|null}
                         */
                        readonly adjuster?: "relative" | "percentage" | null;
                        /**
                         * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                         *
                         * @example 5
                         */
                        readonly adjuster_value?: number;
                    };
                    readonly conditions?: readonly {
                        /**
                         * @description The unique numeric ID of the modifier with which the rule condition is associated.
                         *     Required in /POST.
                         * @example 55
                         */
                        readonly modifier_id: number | null;
                        /**
                         * @description The unique numeric ID of the modifier value with which the rule condition is associated.
                         *     Required in /POST.
                         * @example 256
                         */
                        readonly modifier_value_id: number | null;
                        /**
                         * @description The unique numeric ID of the variant with which the rule condition is associated.
                         *     Required in /POST.
                         * @example 1
                         */
                        readonly variant_id: number | null;
                    }[];
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /**
                         * Complex Rule
                         * @description Common ComplexRule properties.
                         */
                        readonly data?: {
                            /**
                             * @description The unique numeric ID of the rule; increments sequentially.
                             *     Read-Only
                             * @example 5
                             */
                            readonly id?: number;
                            /**
                             * @description The unique numeric ID of the product with which the rule is associated; increments sequentially.
                             *
                             * @example 67
                             */
                            readonly product_id?: number;
                            /**
                             * @description The priority to give this rule when making adjustments to the product properties.
                             *
                             * @example 0
                             */
                            readonly sort_order?: number;
                            /**
                             * @description Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
                             *
                             * @example true
                             */
                            readonly enabled?: boolean;
                            /** @description Flag for determining whether other rules should not be applied after this rule has been applied.
                             *      */
                            readonly stop?: boolean;
                            /** @description Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.
                             *      */
                            readonly purchasing_disabled?: boolean;
                            /**
                             * @description Message displayed on the storefront when a rule disables the purchasing of a product.
                             *
                             * @example This product is not available at this time.
                             */
                            readonly purchasing_disabled_message?: string;
                            /** @description Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.
                             *      */
                            readonly purchasing_hidden?: boolean;
                            /**
                             * @description The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
                             *
                             * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
                             */
                            readonly image_url?: string;
                            /**
                             * Adjuster
                             * @description Adjuster for Complex Rules.
                             */
                            readonly price_adjuster?: {
                                /**
                                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                 *
                                 * @enum {string}
                                 */
                                readonly adjuster?: "relative" | "percentage";
                                /**
                                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                 *
                                 * @example 5
                                 */
                                readonly adjuster_value?: number;
                            };
                            /**
                             * Adjuster
                             * @description Adjuster for Complex Rules.
                             */
                            readonly weight_adjuster?: {
                                /**
                                 * @description The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                 *
                                 * @enum {string}
                                 */
                                readonly adjuster?: "relative" | "percentage";
                                /**
                                 * @description The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                                 *
                                 * @example 5
                                 */
                                readonly adjuster_value?: number;
                            };
                            readonly conditions?: readonly {
                                /**
                                 * @description The unique numeric ID of the rule condition; increments sequentially. Read-Only
                                 *
                                 * @example 3
                                 */
                                readonly id?: number;
                                /**
                                 * @description The unique numeric ID of the rule with which the condition is associated.
                                 *     Read-Only
                                 * @example 4
                                 */
                                readonly rule_id?: number;
                                /**
                                 * @description The unique numeric ID of the modifier with which the rule condition is associated.
                                 *     Required in /POST.
                                 * @example 55
                                 */
                                readonly modifier_id: number;
                                /**
                                 * @description The unique numeric ID of the modifier value with which the rule condition is associated.
                                 *     Required in /POST.
                                 * @example 256
                                 */
                                readonly modifier_value_id: number;
                                /**
                                 * @description The unique numeric ID of the variant with which the rule condition is associated.
                                 *     Required in /POST.
                                 * @example 1
                                 */
                                readonly variant_id: number;
                                /** @description (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3.
                                 *      */
                                readonly combination_id?: number;
                            }[];
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The `ComplexRule` was in conflict with another `ComplexRule`. This is the result of duplicate conditions.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description The `ComplexRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly deleteProductComplexRule: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `ComplexRule`.
                 *      */
                readonly complex_rule_id: components["parameters"]["ComplexRuleIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getProductCustomFields: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
            };
            readonly header?: never;
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["CustomFieldsResponse"];
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["GeneralErrorWithErrors"];
            readonly 404: components["responses"]["GeneralError"];
            readonly 405: components["responses"]["MethodNotAllowedError"];
        };
    };
    readonly createProductCustomField: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["customFieldPost"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["CustomFieldResponse"];
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["GeneralErrorWithErrors"];
            readonly 404: components["responses"]["GeneralError"];
            readonly 405: components["responses"]["MethodNotAllowedError"];
            readonly 415: components["responses"]["UnsupportedMediaTypeError"];
            readonly 422: components["responses"]["GeneralError"];
        };
    };
    readonly getProductCustomField: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: never;
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `CustomField`.
                 *      */
                readonly custom_field_id: components["parameters"]["CustomFieldIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["CustomFieldResponse"];
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["GeneralErrorWithErrors"];
            readonly 404: components["responses"]["GeneralError"];
            readonly 405: components["responses"]["MethodNotAllowedError"];
        };
    };
    readonly updateProductCustomField: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `CustomField`.
                 *      */
                readonly custom_field_id: components["parameters"]["CustomFieldIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["customFieldPut"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["CustomFieldResponse"];
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["GeneralErrorWithErrors"];
            readonly 404: components["responses"]["GeneralError"];
            readonly 405: components["responses"]["MethodNotAllowedError"];
            readonly 415: components["responses"]["UnsupportedMediaTypeError"];
            readonly 422: components["responses"]["GeneralError"];
        };
    };
    readonly deleteProductCustomField: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `CustomField`.
                 *      */
                readonly custom_field_id: components["parameters"]["CustomFieldIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description 204 No Content */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["GeneralErrorWithErrors"];
            readonly 404: components["responses"]["GeneralError"];
            readonly 405: components["responses"]["MethodNotAllowedError"];
        };
    };
    readonly getAllBulkPricingRules: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsBulkPricingParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 83,
                     *         "quantity_min": 1,
                     *         "quantity_max": 3,
                     *         "type": "price",
                     *         "amount": 1
                     *       },
                     *       "meta": {
                     *         "pagination": {
                     *           "total": 2,
                     *           "count": 2,
                     *           "per_page": 50,
                     *           "current_page": 1,
                     *           "total_pages": 1,
                     *           "links": {
                     *             "current": "?page=1&limit=50"
                     *           }
                     *         }
                     *       }
                     *     } */
                    readonly "application/json": {
                        readonly data?: {
                            /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
                            readonly id?: number;
                        } & components["schemas"]["bulkPricingRule_Response"];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
        };
    };
    readonly createBulkPricingRule: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["bulkPricingRule_Full"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 83,
                     *         "quantity_min": 1,
                     *         "quantity_max": 3,
                     *         "type": "price",
                     *         "amount": 1
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: {
                            /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
                            readonly id?: number;
                        } & components["schemas"]["bulkPricingRule_Response"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
        };
    };
    readonly getBulkPricingRule: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsBulkPricingParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `BulkPricingRule`.
                 *      */
                readonly bulk_pricing_rule_id: components["parameters"]["BulkPricingRuleIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 83,
                     *         "quantity_min": 1,
                     *         "quantity_max": 3,
                     *         "type": "price",
                     *         "amount": 1
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: {
                            /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
                            readonly id: number;
                        } & components["schemas"]["bulkPricingRule_Response"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource or parent resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly updateBulkPricingRule: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `BulkPricingRule`.
                 *      */
                readonly bulk_pricing_rule_id: components["parameters"]["BulkPricingRuleIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
                    readonly id: number;
                } & components["schemas"]["bulkPricingRule_Full"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 83,
                     *         "quantity_min": 1,
                     *         "quantity_max": 3,
                     *         "type": "price",
                     *         "amount": 1
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: {
                            /** @description Unique ID of the *Bulk Pricing Rule*. Read-Only. */
                            readonly id?: number;
                        } & components["schemas"]["bulkPricingRule_Response"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource or parent resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
            /** @description The `BulkPricingRule` was in conflict with another bulk pricing rule. This is the result of quantity range overlapping with existing bulk pricing rules.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description The `BulkPricingRule` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly deleteBulkPricingRule: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `BulkPricingRule`.
                 *      */
                readonly bulk_pricing_rule_id: components["parameters"]["BulkPricingRuleIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The resource or parent resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly getProductMetafields: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Filter based on a metafieldʼs key. */
                readonly key?: components["parameters"]["MetafieldKeyParam"];
                /** @description Filter based on a metafieldʼs namespaces. */
                readonly namespace?: components["parameters"]["MetafieldNamespaceParam"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "id": 6,
                     *           "key": "Location",
                     *           "value": "4HG",
                     *           "namespace": "Warehouse Locations",
                     *           "permission_set": "app_only",
                     *           "resource_type": "product",
                     *           "resource_id": 111,
                     *           "description": "Location in the warehouse",
                     *           "date_created": "1973-01-20T21:34:57.903Z",
                     *           "date_modified": "1990-12-30T00:29:23.515Z"
                     *         },
                     *         {
                     *           "id": 7,
                     *           "key": "Sublocation",
                     *           "value": "4HG",
                     *           "namespace": "Warehouse Locations",
                     *           "permission_set": "read",
                     *           "resource_type": "product",
                     *           "resource_id": 111,
                     *           "description": "Location in the warehouse",
                     *           "date_created": "1973-01-20T21:34:57.903Z",
                     *           "date_modified": "1990-12-30T00:29:23.515Z"
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "total": 2,
                     *           "count": 2,
                     *           "per_page": 50,
                     *           "current_page": 1,
                     *           "total_pages": 1,
                     *           "links": {
                     *             "current": "?page=1&limit=50"
                     *           }
                     *         }
                     *       }
                     *     } */
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["metafield_Full"][];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
        };
    };
    readonly createProductMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["metafield_Base"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 8,
                     *         "key": "location_id",
                     *         "value": "Shelf 3, Bin 5",
                     *         "namespace": "Inventory Namespace",
                     *         "permission_set": "read",
                     *         "resource_type": "product",
                     *         "resource_id": 158,
                     *         "description": "Where products are located",
                     *         "date_created": "2018-09-13T16:42:37+00:00",
                     *         "date_modified": "2018-09-13T16:42:37+00:00"
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: components["schemas"]["metafield_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combinations of the appʼs client ID, namespace, key, resource_type, and resource_id.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code. */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly getProductMetafield: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafield_id: components["parameters"]["MetafieldIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 4,
                     *         "key": "location_id",
                     *         "value": "Shelf 3, Bin 5",
                     *         "namespace": "App Namespace",
                     *         "permission_set": "app_only",
                     *         "resource_type": "product",
                     *         "resource_id": 137,
                     *         "description": "Where products are located",
                     *         "date_created": "2021-08-06T19:15:35+00:00",
                     *         "date_modified": "2021-08-06T19:15:35+00:00"
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: components["schemas"]["metafield_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly updateProductMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafield_id: components["parameters"]["MetafieldIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["metafield_Base"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 4,
                     *         "key": "location_id",
                     *         "value": "Shelf 3, Bin 5",
                     *         "namespace": "App Namespace",
                     *         "permission_set": "app_only",
                     *         "resource_type": "product",
                     *         "resource_id": 137,
                     *         "description": "Where products are located",
                     *         "date_created": "2021-08-06T19:15:35+00:00",
                     *         "date_modified": "2021-08-06T19:15:35+00:00"
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: components["schemas"]["metafield_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly deleteProductMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafield_id: components["parameters"]["MetafieldIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly getProductReviews: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Filter items by status. `1` for approved, `0` for pending. */
                readonly status?: 0 | 1;
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly ({
                            /** @description The title for the product review.
                             *     Required in /POST. */
                            readonly title: string;
                            /** @description The text for the product review.
                             *      */
                            readonly text?: string;
                            /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`.
                             *      */
                            readonly status?: string;
                            /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
                            readonly rating?: number;
                            /** @description The email of the reviewer. Must be a valid email, or an empty string. */
                            readonly email?: string;
                            /** @description The name of the reviewer. */
                            readonly name?: string;
                            /**
                             * Format: date-time
                             * @description Date the product was reviewed. Required in /POST.
                             *
                             */
                            readonly date_reviewed: string;
                        } & {
                            /** @description The unique numeric ID of the product review; increments sequentially.
                             *      */
                            readonly id?: number;
                            /**
                             * Format: date-time
                             * @description Date the product review was created.
                             *
                             */
                            readonly date_created?: string;
                            /**
                             * Format: date-time
                             * @description Date the product review was modified.
                             *
                             */
                            readonly date_modified?: string;
                        })[];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
            /** @description There are no reviews on this product.
             *      */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The product ID does not exist.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly createProductReview: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description The title for the product review.
                     *     Required in /POST.
                     * @example Great Product
                     */
                    readonly title: string;
                    /** @description The text for the product review.
                     *      */
                    readonly text?: string;
                    /**
                     * @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`.
                     *
                     * @example approved
                     */
                    readonly status?: string;
                    /**
                     * @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5.
                     * @example 5
                     */
                    readonly rating?: number;
                    /**
                     * @description The email of the reviewer. Must be a valid email, or an empty string.
                     * @example bob@email.com
                     */
                    readonly email?: string;
                    /**
                     * @description The name of the reviewer.
                     * @example Bob S.
                     */
                    readonly name?: string;
                    /**
                     * Format: date-time
                     * @description Date the product was reviewed. Required in /POST.
                     *
                     */
                    readonly date_reviewed: string;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "title": "irur",
                     *         "text": "anim aute",
                     *         "status": "Lorem ad sed voluptate",
                     *         "rating": 3,
                     *         "email": "esse Lorem laborum aute",
                     *         "name": "ut in ",
                     *         "date_reviewed": "2011-12-31T13:40:42.971Z",
                     *         "id": 82495037,
                     *         "product_id": 22609026,
                     *         "date_created": "1985-01-17T07:37:20.439Z",
                     *         "date_modified": "2004-09-28T14:38:21.973Z"
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        /**
                         * Product Review
                         * @description A product review model.
                         *
                         */
                        readonly data?: {
                            /** @description The title for the product review.
                             *     Required in /POST. */
                            readonly title: string;
                            /** @description The text for the product review.
                             *      */
                            readonly text?: string;
                            /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`.
                             *      */
                            readonly status?: string;
                            /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
                            readonly rating?: number;
                            /** @description The email of the reviewer. Must be a valid email, or an empty string. */
                            readonly email?: string;
                            /** @description The name of the reviewer. */
                            readonly name?: string;
                            /**
                             * Format: date-time
                             * @description Date the product was reviewed. Required in /POST.
                             *
                             */
                            readonly date_reviewed: string;
                        } & {
                            /** @description The unique numeric ID of the product review; increments sequentially.
                             *      */
                            readonly id?: number;
                            /**
                             * Format: date-time
                             * @description Date the product review was created.
                             *
                             */
                            readonly date_created?: string;
                            /**
                             * Format: date-time
                             * @description Date the product review was modified.
                             *
                             */
                            readonly date_modified?: string;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The product ID does not exist.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly getProductReview: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `review` that is being operated on.
                 *      */
                readonly review_id: components["parameters"]["ReviewIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "title": "irur",
                     *         "text": "anim aute",
                     *         "status": "Lorem ad sed voluptate",
                     *         "rating": 3,
                     *         "email": "esse Lorem laborum aute",
                     *         "name": "ut in ",
                     *         "date_reviewed": "2011-12-31T13:40:42.971Z",
                     *         "id": 82495037,
                     *         "product_id": 22609026,
                     *         "date_created": "1985-01-17T07:37:20.439Z",
                     *         "date_modified": "2004-09-28T14:38:21.973Z"
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        /**
                         * Product Review
                         * @description A product review model.
                         *
                         */
                        readonly data?: {
                            /** @description The title for the product review.
                             *     Required in /POST. */
                            readonly title: string;
                            /** @description The text for the product review.
                             *      */
                            readonly text?: string;
                            /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`.
                             *      */
                            readonly status?: string;
                            /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
                            readonly rating?: number;
                            /** @description The email of the reviewer. Must be a valid email, or an empty string. */
                            readonly email?: string;
                            /** @description The name of the reviewer. */
                            readonly name?: string;
                            /**
                             * Format: date-time
                             * @description Date the product was reviewed. Required in /POST.
                             *
                             */
                            readonly date_reviewed: string;
                        } & {
                            /** @description The unique numeric ID of the product review; increments sequentially.
                             *      */
                            readonly id?: number;
                            /**
                             * Format: date-time
                             * @description Date the product review was created.
                             *
                             */
                            readonly date_created?: string;
                            /**
                             * Format: date-time
                             * @description Date the product review was modified.
                             *
                             */
                            readonly date_modified?: string;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly updateProductReview: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `review` that is being operated on.
                 *      */
                readonly review_id: components["parameters"]["ReviewIdParam"];
            };
            readonly cookie?: never;
        };
        /** @description A BigCommerce `ProductReview` object.
         *      */
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description The title for the product review.
                     *     Required in /POST. */
                    readonly title: string;
                    /** @description The text for the product review.
                     *      */
                    readonly text?: string;
                    /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`.
                     *      */
                    readonly status?: string;
                    /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
                    readonly rating?: number;
                    /** @description The email of the reviewer. Must be a valid email, or an empty string. */
                    readonly email?: string;
                    /** @description The name of the reviewer. */
                    readonly name?: string;
                    /**
                     * Format: date-time
                     * @description Date the product was reviewed. Required in /POST.
                     *
                     */
                    readonly date_reviewed: string;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "title": "irur",
                     *         "text": "anim aute",
                     *         "status": "Lorem ad sed voluptate",
                     *         "rating": 3,
                     *         "email": "esse Lorem laborum aute",
                     *         "name": "ut in ",
                     *         "date_reviewed": "2011-12-31T13:40:42.971Z",
                     *         "id": 82495037,
                     *         "product_id": 22609026,
                     *         "date_created": "1985-01-17T07:37:20.439Z",
                     *         "date_modified": "2004-09-28T14:38:21.973Z"
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        /**
                         * Product Review
                         * @description A product review model.
                         *
                         */
                        readonly data?: {
                            /** @description The title for the product review.
                             *     Required in /POST. */
                            readonly title: string;
                            /** @description The text for the product review.
                             *      */
                            readonly text?: string;
                            /** @description The status of the product review. Must be one of `approved`, `disapproved` or `pending`.
                             *      */
                            readonly status?: string;
                            /** @description The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5. */
                            readonly rating?: number;
                            /** @description The email of the reviewer. Must be a valid email, or an empty string. */
                            readonly email?: string;
                            /** @description The name of the reviewer. */
                            readonly name?: string;
                            /**
                             * Format: date-time
                             * @description Date the product was reviewed. Required in /POST.
                             *
                             */
                            readonly date_reviewed: string;
                        } & {
                            /** @description The unique numeric ID of the product review; increments sequentially.
                             *      */
                            readonly id?: number;
                            /**
                             * Format: date-time
                             * @description Date the product review was created.
                             *
                             */
                            readonly date_created?: string;
                            /**
                             * Format: date-time
                             * @description Date the product review was modified.
                             *
                             */
                            readonly date_modified?: string;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly deleteProductReview: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `review` that is being operated on.
                 *      */
                readonly review_id: components["parameters"]["ReviewIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getProductsChannelAssignments: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Pass a comma-separated list to filter by one or more product IDs. */
                readonly "product_id:in"?: components["parameters"]["ProductIdInParam"];
                /** @description Pass a comma-separated list to filter by one or more channel IDs. */
                readonly "channel_id:in"?: components["parameters"]["ChannelIdInParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Collection of channel assignments. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ProductChannelAssignment"][];
                        readonly meta?: components["schemas"]["MetaPaginationObject"];
                    };
                };
            };
        };
    };
    readonly createProductsChannelAssignments: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ProductChannelAssignment"][];
            };
        };
        readonly responses: {
            /** @description Updated */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error response for batch PUT of Channel Assignments. Includes the errors for each reference id. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["beta5ErrorResponse"];
                };
            };
        };
    };
    readonly deleteProductsChannelAssignments: {
        readonly parameters: {
            readonly query?: {
                /** @description Pass a comma-separated list to filter by one or more product IDs. */
                readonly "product_id:in"?: components["parameters"]["ProductIdInParam"];
                /** @description Pass a comma-separated list to filter by one or more channel IDs. */
                readonly "channel_id:in"?: components["parameters"]["ChannelIdInParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Deleted */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description At least one filter must be provided in order to delete channel assignments */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["beta5ErrorResponse"];
                };
            };
        };
    };
    readonly getProductsCategoryAssignments: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Pass a comma-separated list to filter by one or more product IDs. */
                readonly "product_id:in"?: components["parameters"]["ProductIdInParam"];
                /** @description Pass a comma-separated list to filter by one or more category IDs. */
                readonly "category_id:in"?: components["parameters"]["CategoryIdInParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Collection of category assignments. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ProductCategoryAssignment"][];
                        readonly meta?: components["schemas"]["MetaPaginationObject"];
                    };
                };
            };
        };
    };
    readonly createProductsCategoryAssignments: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["ProductCategoryAssignment"][];
            };
        };
        readonly responses: {
            /** @description Updated */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error response for batch PUT of Category Assignments. Includes the errors for each reference id. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["beta5ErrorResponse"];
                };
            };
        };
    };
    readonly deleteProductsCategoryAssignments: {
        readonly parameters: {
            readonly query?: {
                /** @description Pass a comma-separated list to filter by one or more product IDs. */
                readonly "product_id:in"?: components["parameters"]["ProductIdInParam"];
                /** @description Pass a comma-separated list to filter by one or more category IDs. */
                readonly "category_id:in"?: components["parameters"]["CategoryIdInParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Deleted */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description At least one filter must be provided in order to delete category assignments */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["beta5ErrorResponse"];
                };
            };
        };
    };
    readonly getCatalogSummary: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /**
                         * Catalog Summary
                         * @description Catalog Summary object describes a lightweight summary of the catalog.
                         */
                        readonly data?: {
                            /**
                             * @description A count of all inventory items in the catalog.
                             *
                             * @example 2000
                             */
                            readonly inventory_count?: number;
                            /**
                             * Format: double
                             * @description Total value of storeʼs inventory.
                             *
                             * @example 267000
                             */
                            readonly inventory_value?: number;
                            /**
                             * @description ID of the category containing the most products.
                             *
                             * @example 23
                             */
                            readonly primary_category_id?: number;
                            /**
                             * @description Name of the category containing the most products.
                             *
                             * @example Shop All
                             */
                            readonly primary_category_name?: string;
                            /**
                             * @description Total number of variants
                             * @example 46
                             */
                            readonly variant_count?: number;
                            /**
                             * Format: double
                             * @description Highest priced variant
                             * @example 249
                             */
                            readonly highest_variant_price?: number;
                            /**
                             * Format: double
                             * @description Average price of all variants
                             * @example 83.07978261
                             */
                            readonly average_variant_price?: number;
                            /**
                             * @description Lowest priced variant in the store
                             * @example 7
                             */
                            readonly lowest_variant_price?: string;
                            /** @example 2018-08-15T00:00:00+00:00 */
                            readonly oldest_variant_date?: string;
                            /** @example 2018-08-16T00:00:00+00:00 */
                            readonly newest_variant_date?: string;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
        };
    };
    readonly getProductsMetafields: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Filter based on a metafieldʼs key. */
                readonly key?: components["parameters"]["MetafieldKeyParam"];
                /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
                readonly "key:in"?: components["parameters"]["MetafieldKeyInParam"];
                /** @description Filter based on a metafieldʼs namespaces. */
                readonly namespace?: components["parameters"]["MetafieldNamespaceParam"];
                /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter. */
                readonly "namespace:in"?: components["parameters"]["MetafieldNamespaceInParam"];
                /** @description Sort direction. Acceptable values are: `asc`, `desc`.
                 *      */
                readonly direction?: components["parameters"]["DirectionParam"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParamMetafields"];
                /** @description 'Query parameter that lets you filter by the minimum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
                 *      */
                readonly "date_modified:min"?: components["parameters"]["date_modified_min"];
                /** @description 'Query parameter that lets you filter by the maximum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
                 *      */
                readonly "date_modified:max"?: components["parameters"]["date_modified_max"];
                /** @description 'Query parameter that lets you filter by the minimum date created, ffor example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
                 *      */
                readonly "date_created:min"?: components["parameters"]["date_created_min"];
                /** @description 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
                 *      */
                readonly "date_created:max"?: components["parameters"]["date_created_max"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description List of `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse"];
                };
            };
        };
    };
    readonly updateProductsMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly (components["schemas"]["MetafieldBase_Put"] & {
                    /**
                     * @description The ID of metafield to update.
                     *
                     * @example 42
                     */
                    readonly id: number;
                })[];
            };
        };
        readonly responses: {
            /** @description List of updated `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Response object for metafields creation with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
                };
            };
        };
    };
    readonly createProductsMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly (components["schemas"]["MetafieldBase_Post"] & {
                    /**
                     * @description The ID for the product with which the metafield is associated.
                     *
                     * @example 42
                     */
                    readonly resource_id: number;
                })[];
            };
        };
        readonly responses: {
            /** @description List of created `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Response object for metafields creation with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
                };
            };
        };
    };
    readonly deleteProductsMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** @description List of metafield IDs. */
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly number[];
            };
        };
        readonly responses: {
            /** @description Response object for metafields deletion with success.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionDeleteResponseSuccess"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Response object for metafields deletion with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_DELETE"];
                };
            };
        };
    };
}
