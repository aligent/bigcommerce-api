/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/catalog/trees/categories": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Categories
         * @description Returns a list of categories.
         *
         *     To get a specific category in a tree, provide a category ID.
         */
        readonly get: operations["getAllCategories"];
        /**
         * Update Categories
         * @description Updates existing categories.
         *
         *     To update a specific category in a tree, provide a `category id`.
         */
        readonly put: operations["updateCategories"];
        /**
         * Create Categories
         * @description Creates new categories.
         *
         *     Limits:
         *     - 16,000 categories per store limit.
         *     - 1,000 categories per product limit.
         *     - 50 characters category name length.
         *     - 8 levels of child categories depth limit.
         *     - 65,535 characters category description length limit.
         *
         *     Creating a category requires:
         *      - `name`
         *      - `tree_id` or `parent_id`
         */
        readonly post: operations["createCategories"];
        /**
         * Delete categories
         * @description Deletes categories.
         *
         *     To delete a specific category in a tree, provide a category ID.
         */
        readonly delete: operations["deleteTreeCategories"];
    };
    readonly "/catalog/trees": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get all category trees
         * @description Returns a list of category trees.
         */
        readonly get: operations["getCategoryTrees"];
        /**
         * Upsert category trees
         * @description Upserts category trees.
         *
         *     This single endpoint updates and creates category trees. If a tree object contains an ID, it is processed as an update operation using that ID. If you do not provide an ID, a new tree is created. The category tree `name` field is required to create trees, but is not required on the update.
         *
         *     **Usage Notes**
         *     * Channel ID in the `channels` field is required to create a category tree. You can only assign a category tree to one channel.
         *     * The `channels` field must be absent when updating a category tree. This field is currently unsupported during a category tree update.
         *
         */
        readonly put: operations["upsertCategoryTrees"];
        /**
         * Delete category trees
         * @description Deletes category trees. A filter must be supplied with the endpoint.
         */
        readonly delete: operations["deleteCategoryTrees"];
    };
    readonly "/catalog/trees/{tree_id}/categories": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the category tree. */
                readonly tree_id: components["parameters"]["TreeIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a category tree
         * @description Returns a category tree.
         */
        readonly get: operations["getCategoryTree"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly metaEmpty_Full: {
            readonly [key: string]: unknown;
        };
        /**
         * DetailedErrors
         * @description Each key-value pair describes a failure or partial success case.
         */
        readonly DetailedErrors: {
            readonly [key: string]: unknown;
        };
        /** Get Categories */
        readonly GetCategories: {
            readonly name?: components["schemas"]["name"];
            readonly category_id?: components["schemas"]["category_id"];
            readonly category_uuid?: components["schemas"]["category_uuid"];
            readonly tree_id?: components["schemas"]["tree_id"];
            readonly parent_id?: components["schemas"]["parent_id"];
        } & components["schemas"]["CategoryBase"] & {
            readonly url?: components["schemas"]["url"];
        };
        /** Create Categories */
        readonly CreateCategories: readonly (({
            readonly name?: components["schemas"]["name"];
            readonly url?: components["schemas"]["url"];
            readonly parent_id?: components["schemas"]["parent_id"];
            readonly tree_id?: components["schemas"]["tree_id"];
        } & components["schemas"]["CategoryBase"] & unknown) | unknown)[];
        readonly UpdateCategories: readonly ({
            readonly category_id: components["schemas"]["category_id"];
            readonly name?: components["schemas"]["name"];
            readonly tree_id?: components["schemas"]["tree_id"];
            readonly parent_id?: components["schemas"]["parent_id"];
        } & components["schemas"]["CategoryBase"] & {
            readonly url?: components["schemas"]["url"];
        })[];
        /** Category */
        readonly CategoryBase: {
            /**
             * @description The product description, which can include HTML formatting.
             *
             * @example <p>We offer a wide variety of products perfect for relaxing</p>
             */
            readonly description?: string;
            /**
             * @description Number of views the category has on the storefront.
             *
             * @example 1050
             */
            readonly views?: number;
            /**
             * @description Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
             *
             * @example 3
             */
            readonly sort_order?: number;
            /**
             * @description Custom title for the category page. If not defined, the category name will be used as the meta title.
             *
             * @example Bath
             */
            readonly page_title?: string;
            /**
             * @description Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"].
             *
             * @example [
             *       "shower",
             *       "tub"
             *     ]
             */
            readonly meta_keywords?: readonly string[];
            /** @description Custom meta description for the category page. If not defined, the storeʼs default meta description will be used.
             *      */
            readonly meta_description?: string;
            /**
             * @description A valid layout file. (Please refer to [this article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/) on creating category files.) This field is writable only for stores with a Blueprint theme applied.
             *
             * @example category.html
             */
            readonly layout_file?: string;
            /**
             * @description Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. Must be either a full-qualified URL or an empty string.
             *
             * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
             */
            readonly image_url?: string;
            /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.
             *      */
            readonly is_visible?: boolean;
            /** @description A comma-separated list of keywords that can be used to locate the category when searching the store.
             *      */
            readonly search_keywords?: string;
            /**
             * @description Determines how the products are sorted on category page load.
             *
             * @enum {string}
             */
            readonly default_product_sort?: "use_store_settings" | "featured" | "newest" | "best_selling" | "alpha_asc" | "alpha_desc" | "avg_customer_review" | "price_asc" | "price_desc";
        };
        readonly CategoryList: {
            readonly data?: readonly components["schemas"]["GetCategories"][];
            readonly meta?: components["schemas"]["MetaPagination"];
        };
        readonly CategoryNodeTree: {
            readonly data?: readonly components["schemas"]["CategoryNode"][];
            readonly meta?: components["schemas"]["metaEmpty_Full"];
        };
        readonly CategoryTreeList: {
            readonly data?: readonly components["schemas"]["Tree"][];
            readonly meta?: components["schemas"]["MetaPaginationObject"];
        };
        readonly CategoryTree: {
            readonly data?: readonly components["schemas"]["Tree"][];
            readonly meta?: components["schemas"]["metaEmpty_Full"];
        };
        readonly MetaPagination: {
            readonly pagination?: {
                /** @example 246 */
                readonly total?: number;
                /** @example 5 */
                readonly count?: number;
                /** @example 5 */
                readonly per_page?: number;
                /** @example 1 */
                readonly current_page?: number;
                /** @example 50 */
                readonly total_pages?: number;
                readonly links?: {
                    /** @example ?limit=5&page=1 */
                    readonly previous?: string;
                    /** @example ?limit=5&page=2 */
                    readonly current?: string;
                    /** @example ?limit=5&page=3 */
                    readonly next?: string;
                };
            };
        };
        readonly ErrorRequest: {
            readonly errors?: readonly components["schemas"]["ErrorBasic"][];
        };
        readonly ErrorBasic: {
            /** @description The HTTP status code.
             *      */
            readonly status?: number;
            /** @description The error title describing the particular error.
             *      */
            readonly title?: string;
            readonly type?: string;
        };
        readonly ErrorAdditional: {
            readonly errors?: components["schemas"]["DetailedErrors"];
        };
        readonly MetaError: components["schemas"]["ErrorBasic"] & components["schemas"]["ErrorAdditional"];
        readonly MetaData: {
            readonly total?: number;
            readonly success?: number;
            readonly failed?: number;
        };
        readonly SuccessNoContentResponse: {
            readonly meta?: components["schemas"]["MetaData"];
        };
        readonly PartialSuccessNoContentResponse: {
            readonly errors?: components["schemas"]["MetaError"];
            readonly meta?: components["schemas"]["MetaData"];
        };
        readonly PartialSuccessResponse: {
            readonly data?: readonly components["schemas"]["GetCategories"][];
            readonly errors?: components["schemas"]["MetaError"];
            readonly meta?: components["schemas"]["MetaData"];
        };
        readonly SuccessResponse: {
            readonly data?: readonly components["schemas"]["GetCategories"][];
            readonly meta?: components["schemas"]["MetaData"];
        };
        readonly ErrorResponse: {
            readonly errors?: components["schemas"]["MetaError"];
            readonly meta?: components["schemas"]["MetaData"];
        };
        readonly Tree: {
            readonly id?: number;
            readonly name?: string;
            readonly channels?: readonly number[];
        };
        /** @example [
         *       {
         *         "id": 0,
         *         "name": "string",
         *         "channels": [
         *           0
         *         ]
         *       }
         *     ] */
        readonly CategoryTreeListRequest: readonly components["schemas"]["Tree"][];
        readonly CategoryNode: {
            readonly id?: number;
            readonly parent_id?: number;
            readonly depth?: number;
            readonly path?: readonly number[];
            readonly name?: string;
            readonly is_visible?: boolean;
            readonly children?: readonly components["schemas"]["CategoryNode"][];
            readonly url?: string;
        };
        readonly MetaPaginationObject: {
            readonly pagination?: {
                /** @example 246 */
                readonly total?: number;
                /** @example 5 */
                readonly count?: number;
                /** @example 5 */
                readonly per_page?: number;
                /** @example 1 */
                readonly current_page?: number;
                /** @example 50 */
                readonly total_pages?: number;
                readonly links?: {
                    /** @example ?limit=5&page=2 */
                    readonly next?: string;
                    /** @example ?limit=5&page=1 */
                    readonly current?: string;
                };
            };
        };
        readonly beta4DetailedErrors: {
            readonly [key: string]: unknown;
        };
        /** @description Error payload for the BigCommerce API.
         *      */
        readonly BaseError: {
            /** @description The HTTP status code.
             *      */
            readonly status?: number;
            /** @description The error title describing the particular error.
             *      */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
        };
        readonly beta4ErrorResponse: components["schemas"]["BaseError"] & {
            readonly errors?: components["schemas"]["beta4DetailedErrors"];
        };
        /**
         * URL
         * @description If not provided in POST request, the URL is autogenerated from the category name.
         *
         */
        readonly url: {
            /** @example /bath/ */
            readonly path?: string;
            /** @example false */
            readonly is_customized?: boolean;
        };
        /**
         * Category UUID
         * Format: uuid
         * @description An additional unique identifier for the category. Read-Only.
         * @example d1964756-5e1d-4c72-9fa0-e1a3f7be4a34
         */
        readonly category_uuid: string;
        /**
         * Category ID
         * @description Unique ID of the *Category*. Increments sequentially.
         * @example 36
         */
        readonly category_id: number;
        /**
         * Parent ID
         * @description The unique numeric ID of the category parent. To create a top-level category, specify the `tree_id`. Otherwise, you can specify the `parent_id`. Required in a POST if creating a child category.
         * @example 0
         */
        readonly parent_id: number;
        /**
         * Tree ID
         * @description The ID of the category tree. To create a top-level category, specify the `tree_id`. Otherwise, you can specify the `parent_id`.
         * @example 1
         */
        readonly tree_id: number;
        /**
         * Name
         * @description The name displayed for the category. Name is unique with respect to the categoryʼs siblings.
         *     Required in a POST.
         * @example Bath
         */
        readonly name: string;
        /** Not Found */
        readonly NotFoundError: {
            /** @description The HTTP status code. */
            readonly status: number;
            /** @description The error title describing the particular error. */
            readonly title: string;
            readonly type: string;
        };
        readonly GeneralError: {
            /** @description The HTTP status code. */
            readonly status: number;
            /** @description The error title describes the particular error. */
            readonly title: string;
            readonly type: string;
            /** @description The custom code of the error. */
            readonly code?: number;
        };
        readonly GeneralErrorWithErrors: {
            /** @description The HTTP status code. */
            readonly status: number;
            /** @description The error title describing the particular error. */
            readonly title: string;
            readonly type: string;
            /** Detailed Errors */
            readonly errors: {
                readonly [key: string]: unknown;
            };
        };
    };
    responses: {
        /** @description Unauthorized */
        readonly UnauthorizedError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "plain/text": string;
            };
        };
        /** @description Bad Request */
        readonly BadRequestError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "plain/text": string;
            };
        };
        readonly GeneralError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["GeneralError"];
            };
        };
        readonly GeneralErrorWithErrors: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly errors?: components["schemas"]["GeneralErrorWithErrors"];
                    readonly meta?: components["schemas"]["MetaData"];
                };
            };
        };
    };
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
        /** @description Specifies the page number in a limited (paginated) list of products.
         *      */
        readonly PageParam: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products.
         *      */
        readonly LimitParam: number;
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly IncludeFieldsParam: readonly string[];
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly ExcludeFieldsParam: readonly string[];
        /** @description Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
        readonly KeywordParam: string;
        /** @description Filter items based on whether the product is currently visible on the storefront. */
        readonly IsVisibleParam: boolean;
        /** @description Filter items by name.
         *      */
        readonly NameParam: string;
        /** @description Filter items by substring in the name property. `name:like=stick` returns both `Stickers` and `Lipstick colors`. */
        readonly NameLikeParam: string;
        /** @description Filter items by substring in the page title property. `page_title:like=oil` returns both `Soil and mulch` and `Oil pastels`. */
        readonly PageTitleLikeParam: string;
        /** @description Filter items by page_title.
         *      */
        readonly PageTitleParam: string;
        /** @description The ID of the category tree. */
        readonly TreeIdParam: number;
        /** @description Filter by supplying a comma-separated list of category tree IDs. */
        readonly IdInParam: readonly number[];
        /** @description Filter by supplying a comma-separated list of channel IDs. */
        readonly ChannelIdInParam: readonly number[];
        /** @description Filter using a comma-separated list of one or more category UUIDs. To use category IDs, use the `category_id:in` parameter. */
        readonly CategoryUuidInParam: readonly string[];
        /** @description Filter using a comma-separated list of one or more category IDs. To use category UUIDs, use the `category_uuid:in` parameter. */
        readonly CategoryIdInParam: readonly number[];
        /** @description Filter using a comma-separated list of one or more category tree IDs. */
        readonly TreeIdInParam: readonly number[];
        readonly ParentIdInParam: readonly number[];
        /** @description Filter using a comma-separated list to exclude one or more category UUIDs. To exclude using category IDs, use the `category_id:not_in` parameter. */
        readonly CategoryUuidNotInParam: readonly string[];
        /** @description Filter using a comma-separated list to exclude one or more category IDs. To exclude using category UUIDs, use the `category_uuid:not_in` parameter. */
        readonly CategoryIdNotInParam: readonly number[];
        /** @description Filter using a comma-separated list to exclude one or more category tree IDs. */
        readonly TreeIdNotInParam: readonly number[];
        readonly ParentIdNotInParam: readonly number[];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getAllCategories: {
        readonly parameters: {
            readonly query?: {
                /** @description Filter using a comma-separated list of one or more category UUIDs. To use category IDs, use the `category_id:in` parameter. */
                readonly "category_uuid:in"?: components["parameters"]["CategoryUuidInParam"];
                /** @description Filter using a comma-separated list to exclude one or more category UUIDs. To exclude using category IDs, use the `category_id:not_in` parameter. */
                readonly "category_uuid:not_in"?: components["parameters"]["CategoryUuidNotInParam"];
                /** @description Filter using a comma-separated list of one or more category IDs. To use category UUIDs, use the `category_uuid:in` parameter. */
                readonly "category_id:in"?: components["parameters"]["CategoryIdInParam"];
                /** @description Filter using a comma-separated list to exclude one or more category IDs. To exclude using category UUIDs, use the `category_uuid:not_in` parameter. */
                readonly "category_id:not_in"?: components["parameters"]["CategoryIdNotInParam"];
                /** @description Filter using a comma-separated list of one or more category tree IDs. */
                readonly "tree_id:in"?: components["parameters"]["TreeIdInParam"];
                /** @description Filter using a comma-separated list to exclude one or more category tree IDs. */
                readonly "tree_id:not_in"?: components["parameters"]["TreeIdNotInParam"];
                readonly "parent_id:in"?: components["parameters"]["ParentIdInParam"];
                readonly "parent_id:not_in"?: components["parameters"]["ParentIdNotInParam"];
                /** @description Filter items by page_title.
                 *      */
                readonly page_title?: components["parameters"]["PageTitleParam"];
                /** @description Filter items by substring in the page title property. `page_title:like=oil` returns both `Soil and mulch` and `Oil pastels`. */
                readonly "page_title:like"?: components["parameters"]["PageTitleLikeParam"];
                /** @description Filter items by name.
                 *      */
                readonly name?: components["parameters"]["NameParam"];
                /** @description Filter items by substring in the name property. `name:like=stick` returns both `Stickers` and `Lipstick colors`. */
                readonly "name:like"?: components["parameters"]["NameLikeParam"];
                /** @description Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
                readonly keyword?: components["parameters"]["KeywordParam"];
                /** @description Filter items based on whether the product is currently visible on the storefront. */
                readonly is_visible?: components["parameters"]["IsVisibleParam"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description List of categories. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["CategoryList"];
                };
            };
            readonly 400: components["responses"]["BadRequestError"];
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["GeneralError"];
            readonly 422: components["responses"]["GeneralErrorWithErrors"];
        };
    };
    readonly updateCategories: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["UpdateCategories"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["SuccessNoContentResponse"];
                };
            };
            /** @description Partial success */
            readonly 207: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["PartialSuccessNoContentResponse"];
                };
            };
            /** @description Bad request */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorRequest"];
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["GeneralError"];
            /** @description The Category was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readonly createCategories: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CreateCategories"];
            };
        };
        readonly responses: {
            /** @description Created */
            readonly 201: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["SuccessResponse"];
                };
            };
            /** @description Multi-Status */
            readonly 207: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["PartialSuccessResponse"];
                };
            };
            /** @description Bad Request */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorRequest"];
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["GeneralError"];
            /** @description The Category was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readonly deleteTreeCategories: {
        readonly parameters: {
            readonly query?: {
                /** @description Filter using a comma-separated list of one or more category UUIDs. To use category IDs, use the `category_id:in` parameter. */
                readonly "category_uuid:in"?: components["parameters"]["CategoryUuidInParam"];
                /** @description Filter using a comma-separated list of one or more category IDs. To use category UUIDs, use the `category_uuid:in` parameter. */
                readonly "category_id:in"?: components["parameters"]["CategoryIdInParam"];
                /** @description Filter using a comma-separated list of one or more category tree IDs. */
                readonly "tree_id:in"?: components["parameters"]["TreeIdInParam"];
                readonly "parent_id:in"?: components["parameters"]["ParentIdInParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Categories are deleted */
            readonly 202: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["SuccessNoContentResponse"];
                };
            };
            /** @description Bad request */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorRequest"];
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["GeneralError"];
            readonly 422: components["responses"]["GeneralErrorWithErrors"];
        };
    };
    readonly getCategoryTrees: {
        readonly parameters: {
            readonly query?: {
                /** @description Filter by supplying a comma-separated list of category tree IDs. */
                readonly "id:in"?: components["parameters"]["IdInParam"];
                /** @description Filter by supplying a comma-separated list of channel IDs. */
                readonly "channel_id:in"?: components["parameters"]["ChannelIdInParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description List of category trees. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["CategoryTreeList"];
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["GeneralError"];
            readonly 422: components["responses"]["GeneralErrorWithErrors"];
        };
    };
    readonly upsertCategoryTrees: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CategoryTreeListRequest"];
            };
        };
        readonly responses: {
            /** @description Created a category tree. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["CategoryTree"];
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["GeneralError"];
            /** @description The Channel was not valid. See the response for more details. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["beta4ErrorResponse"];
                };
            };
        };
    };
    readonly deleteCategoryTrees: {
        readonly parameters: {
            readonly query?: {
                /** @description Filter by supplying a comma-separated list of category tree IDs. */
                readonly "id:in"?: components["parameters"]["IdInParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Deleted */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["GeneralError"];
            readonly 422: components["responses"]["GeneralErrorWithErrors"];
        };
    };
    readonly getCategoryTree: {
        readonly parameters: {
            readonly query?: {
                /** @description Max depth for a tree of categories. */
                readonly depth?: number;
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the category tree. */
                readonly tree_id: components["parameters"]["TreeIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Categories tree */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["CategoryNodeTree"];
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["GeneralError"];
            /** @description The tree was not found. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["beta4ErrorResponse"];
                };
            };
        };
    };
}
