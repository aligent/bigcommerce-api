/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/catalog/categories": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Categories
         * @deprecated
         * @description When possible, use the [Catalog Trees - Get all categories](/docs/rest-catalog/category-trees/categories#get-all-categories) endpoint instead.
         *
         *     Returns a list of *Categories*. Optional filter parameters can be passed in.
         *
         *     **Note:**
         *     The default rate limit for this endpoint is 40 concurrent requests.
         */
        readonly get: operations["getCategories"];
        /**
         * Create a Category
         * @deprecated
         * @description When possible, use the [Category Trees - Create categories](/docs/rest-catalog/category-trees/categories#create-categories) endpoint instead.
         *
         *     Creates a *Category*.
         *
         *     Use this endpoint when an API only works with categories of a default BigCommerce storefront (`channel_id=1`).
         *
         *     Use the [Create categories](/docs/rest-catalog/category-trees/categories#create-categories) endpoint when an API works with categories across different category trees that belong to different storefront channels.
         *
         *     **Required Fields**:
         *     - `parent_id`:
         *     	- To create a child category, set the `parent_id` to the parent category.
         *     	- To create a top level category, set the `parent_id` to `0`.
         *     - `name`
         *
         *     **Read-Only Fields**:
         *     - `id`
         *
         *     **Limits**:
         *     - 16,000 categories per store limit.
         *     - 1,000 categories per product limit.
         *     - 50 characters category name length.
         *     - 8 levels of child categories depth limit.
         *     - 65,535 characters category description length limit.
         */
        readonly post: operations["createCategory"];
        /**
         * Delete Categories
         * @deprecated
         * @description When possible, use the [Category Trees - Delete categories](/docs/rest-catalog/category-trees/categories#delete-categories) endpoint instead.
         *
         *     Deletes *Category* objects. At least one filter parameter is required to perform the `DELETE` operation.
         *
         *     **Usage Notes**
         *
         *     - Sending a `DELETE`request without specifying a filter parameter will result in a `422` error.
         *     - Sending a `DELETE` request for a category that contains products will result in a `422` error. Move products to a new category by sending a `PUT` request to the `/catalog/products/{product_id}` endpoint before deleting a category.
         */
        readonly delete: operations["deleteCategories"];
    };
    readonly "/catalog/categories/{category_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Category
         * @deprecated
         * @description When possible, use the [Catalog Trees - Get all categories](/docs/rest-catalog/category-trees/categories#get-all-categories) endpoint instead. You can provide a category identifier using query parameters to retrieve a single category.
         *
         *     Returns a single *Category*. Optional parameters can be passed in.
         *
         *     **Note:**
         *     The default rate limit for this endpoint is 40 concurrent requests.
         */
        readonly get: operations["getCategory"];
        /**
         * Update a Category
         * @deprecated
         * @description When possible, use the [Catalog Trees - Update categories](/docs/rest-catalog/category-trees/categories#update-categories) endpoint instead.
         *
         *     Updates a *Category*.
         *
         *     **Required Fields**
         *     * none
         *
         *     **Read-Only Fields**
         *     - id
         *
         *     **Note:**
         *     The default rate limit for this endpoint is 40 concurrent requests.
         */
        readonly put: operations["updateCategory"];
        /**
         * Delete a Category
         * @deprecated
         * @description When possible, use the [Category Trees - Delete categories](/docs/rest-catalog/category-trees/categories#delete-categories) endpoint instead. You can provide a category identifier using query parameters to delete a single category.
         *
         *     Deletes a *Category*.
         *
         *     **Note:**
         *     The default rate limit for this endpoint is 40 concurrent requests.
         */
        readonly delete: operations["deleteCategory"];
    };
    readonly "/catalog/categories/{category_id}/metafields": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get Category Metafields
         * @description Returns a list of *Metafields* on a *Category*. Optional filter parameters can be passed in.
         */
        readonly get: operations["getCategoryMetafields"];
        /**
         * Create a Category Metafield
         * @description Creates a *Category Metafield*.
         *
         *     **Required Fields:**
         *     - permission_set
         *     - namespace
         *     - key
         *     - value
         *
         *     **Read-Only Fields**
         *     - id
         *
         *     **Note:** The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID. For more information, see [Platform Limits (Help Center)](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        readonly post: operations["createCategoryMetafield"];
    };
    readonly "/catalog/categories/{category_id}/metafields/{metafield_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafield_id: components["parameters"]["MetafieldIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Category Metafield
         * @description Returns a single *Category Metafield*. Optional parameters can be passed in.
         */
        readonly get: operations["getCategoryMetafield"];
        /**
         * Update a Category Metafield
         * @description Updates a *Category Metafield*.
         *
         *     **Required Fields**
         *     * none
         *
         *     **Read-Only Fields**
         *     * id
         *     * These fields can only be modified by the app (API credentials) that created the metafield:
         *     	* namespace
         *     	* key
         *     	* permission_set
         *
         *     **Usage Notes**
         *     * Attempting to modify `namespace`, `key`, and `permission_set` fields using a client ID different from the one used to create those metafields will result in a 403 error message.
         */
        readonly put: operations["updateCategoryMetafield"];
        /**
         * Delete a Category Metafield
         * @description Deletes a *Category Metafield*.
         */
        readonly delete: operations["deleteCategoryMetafield"];
    };
    readonly "/catalog/categories/{category_id}/image": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Create a Category Image
         * @description Create a *Category Image*.
         *
         *      **Required Fields**
         *     - image_file: Form posts are the only accepted upload option.
         *
         *     Only one image at a time can be created.
         *
         *     Supported file types are `JPEG/JPG`, `GIF`, `PNG` and `ICO`.
         *
         *     Limit image size to `8MB`.
         *     To update a *Category Image*, use the [Update categories](/docs/rest-catalog/category-trees/categories#update-categories) endpoint and an `image_url`.
         */
        readonly post: operations["createCategoryImage"];
        /**
         * Delete a Category Image
         * @description Deletes a *Category Image*.
         */
        readonly delete: operations["deleteCategoryImage"];
    };
    readonly "/catalog/categories/{category_id}/products/sort-order": {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of results.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
            };
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get Product Sort Order
         * @description Returns a list of products and their sort order for a specific category.
         *
         *     **Limits**
         *     * page=2&limit=250 will return page 2 of the results with 250 items per page.
         *
         *     **Usage Notes**
         *     * Data pairs are displayed in ascending order based on products' `sort_order` values.
         *     * `null` values are allowed for products without specified `sort_order` values.
         *     * Products with `sort_order` value of `null` will be displayed after products with valid numerical values.
         *     * The priorities for determining product sort order on a storefront are the following:
         *       - Priority 1: Manually specified sort order on Category Level (API).
         *       - Priority 2: Manually specified sort order on Product (Global) Level (UI/API).
         *       - Priority 3: Default sorting by Product ID (newly added products go first) (UI/API).
         */
        readonly get: operations["getCategorySortOrders"];
        /**
         * Update Product Sort Order
         * @description Updates sort order of products within a specific category.
         */
        readonly put: operations["updateCategorySortOrders"];
    };
    readonly "/catalog/categories/metafields": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Category Metafields
         * @description Get all category metafields.
         */
        readonly get: operations["getCategoriesMetafields"];
        /**
         * Update multiple Metafields
         * @description Create multiple metafields.
         */
        readonly put: operations["updateCategoriesMetafields"];
        /**
         * Create multiple Metafields
         * @description Create multiple metafields.
         */
        readonly post: operations["createCategoriesMetafields"];
        /**
         * Delete Multiple Metafields
         * @description Delete all category metafields.
         */
        readonly delete: operations["deleteCategoriesMetafields"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * category_Full
         * @description Common Category object properties.
         */
        readonly category_Full: {
            /** @description Unique ID of the *Category*. Increments sequentially.
             *     Read-Only. */
            readonly id?: number;
            /**
             * @description The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
             *     Required in a POST if creating a child category.
             * @example 2
             */
            readonly parent_id?: number;
            /**
             * @description The name displayed for the category. Name is unique with respect to the categoryʼs siblings.
             *     Required in a POST.
             * @example Bath
             */
            readonly name?: string;
            /**
             * @description The product description, which can include HTML formatting.
             *
             * @example <p>We offer a wide variety of products perfect for relaxing</p>
             */
            readonly description?: string;
            /**
             * @description Number of views the category has on the storefront.
             *
             * @example 1050
             */
            readonly views?: number;
            /**
             * @description Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
             *
             * @example 3
             */
            readonly sort_order?: number;
            /**
             * @description Custom title for the category page. If not defined, the category name will be used as the meta title.
             *
             * @example Bath
             */
            readonly page_title?: string;
            /** @description A comma-separated list of keywords that can be used to locate the category when searching the store.
             *      */
            readonly search_keywords?: string;
            /** @description Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"].
             *      */
            readonly meta_keywords?: readonly string[];
            /** @description Custom meta description for the category page. If not defined, the storeʼs default meta description will be used.
             *      */
            readonly meta_description?: string;
            /**
             * @description A valid layout file. Please refer to [the article on creating category files (Help Center)](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/). This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
             *
             * @example category.html
             */
            readonly layout_file?: string;
            /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.
             *      */
            readonly is_visible?: boolean;
            /**
             * @description Determines how the products are sorted on category page load.
             *
             * @enum {string}
             */
            readonly default_product_sort?: "use_store_settings" | "featured" | "newest" | "best_selling" | "alpha_asc" | "alpha_desc" | "avg_customer_review" | "price_asc" | "price_desc";
            /**
             * @description Image URL used for this category on the storefront. Images can be uploaded using form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. An image extension like .jpg or .png is required.
             *
             * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
             */
            readonly image_url?: string;
            readonly custom_url?: components["schemas"]["customUrl_Full"];
        };
        /**
         * metafield_Base
         * @description Metafield for products, categories, variants, and brands; the max number of metafields allowed on each is 50. For more information, see [Platform Limits (Help Center)](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
         */
        readonly metafield_Base: {
            /**
             * @description The name of the field, for example: `location_id`, `color`. Required for POST.
             *
             * @example Location
             */
            readonly key: string;
            /**
             * @description The value of the field, for example: `1`, `blue`. Required for POST.
             *
             * @example 4HG
             */
            readonly value: string;
            /**
             * @description Namespace for the metafield, for organizational purposes. This is set by the developer. Required for POST.
             *
             * @example Warehouse Locations
             */
            readonly namespace: string;
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *
             *     |Value|Description
             *     |-|-|
             *     |`app_only`|Private to the app that owns the field|
             *     |`read`|Visible to other API consumers|
             *     |`write`|Open for reading and writing by other API consumers|
             *     |`read_and_sf_access`|Visible to other API consumers, including on storefront|
             *     |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
             * @enum {string}
             */
            readonly permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Description for the metafields.
             *
             * @example Location in the warehouse
             */
            readonly description?: string;
        };
        /**
         * customUrl_Full
         * @description The custom URL for the product on the storefront.
         */
        readonly customUrl_Full: {
            /** @description Product URL on the storefront.
             *      */
            readonly url?: string;
            /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
             *      */
            readonly is_customized?: boolean;
        };
        /**
         * metaCollection_Full
         * @description Data about the response, including pagination and collection totals.
         */
        readonly metaCollection_Full: {
            readonly pagination?: components["schemas"]["pagination_Full"];
        };
        /**
         * pagination_Full
         * @description Data about the response, including pagination and collection totals.
         */
        readonly pagination_Full: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 36
             */
            readonly total?: number;
            /**
             * @description Total number of items in the collection response.
             *
             * @example 36
             */
            readonly count?: number;
            /**
             * @description The amount of items returned in the collection per page, controlled by the limit parameter.
             *
             * @example 50
             */
            readonly per_page?: number;
            /**
             * @description The page you are currently on within the collection.
             *
             * @example 1
             */
            readonly current_page?: number;
            /**
             * @description The total number of pages in the collection.
             *
             * @example 1
             */
            readonly total_pages?: number;
            /** @description Pagination links for the previous and next parts of the whole collection.
             *      */
            readonly links?: {
                /** @description Link to the previous page returned in the response.
                 *      */
                readonly previous?: string;
                /**
                 * @description Link to the current page returned in the response.
                 *
                 * @example ?page=1&limit=50
                 */
                readonly current?: string;
                /** @description Link to the next page returned in the response.
                 *      */
                readonly next?: string;
            };
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly metaEmpty_Full: {
            readonly [key: string]: unknown;
        };
        /**
         * error_Base
         * @description Error payload for the BigCommerce API.
         *
         */
        readonly error_Base: {
            /** @description The HTTP status code.
             *      */
            readonly status?: number;
            /** @description The error title describing the particular error.
             *      */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
        };
        /** metafield_Full */
        readonly metafield_Full: {
            /**
             * @description Unique ID of the *Metafield*. Read-Only.
             * @example 6
             */
            readonly id?: number;
        } & components["schemas"]["metafield_Base"] & {
            /**
             * @description The type of resource with which the metafield is associated.
             *
             * @example product
             * @enum {string}
             */
            readonly resource_type?: "category" | "brand" | "product" | "variant";
            /**
             * @description The ID of the resource with which the metafield is associated.
             *
             * @example 111
             */
            readonly resource_id?: number;
            /**
             * Format: date-time
             * @description Date and time of the metafieldʼs creation. Read-Only.
             *
             * @example 2018-05-07T20:14:17+00:00
             */
            readonly date_created?: string;
            /**
             * Format: date-time
             * @description Date and time when the metafield was last updated. Read-Only.
             *
             * @example 2018-05-07T20:14:17+00:00
             */
            readonly date_modified?: string;
        };
        /**
         * productSortOrder
         * @description The relative priority of the product among other products inside the category.
         */
        readonly productSortOrder: {
            /**
             * @description The ID of the associated product.
             * @example 99
             */
            readonly product_id: number;
            /** @example 4 */
            readonly sort_order: number;
        };
        /** Category */
        readonly Category: components["schemas"]["id"] & components["schemas"]["parent_id"] & components["schemas"]["name"] & components["schemas"]["description"] & components["schemas"]["views"] & components["schemas"]["sort_order"] & components["schemas"]["page_title"] & components["schemas"]["meta_keywords"] & components["schemas"]["meta_description"] & components["schemas"]["layout_file"] & components["schemas"]["image_url"] & components["schemas"]["is_visible"] & components["schemas"]["search_keywords"] & components["schemas"]["default_product_sort"] & {
            readonly custom_url?: components["schemas"]["Url"];
        };
        readonly Url: {
            readonly url?: string;
            readonly is_customized?: boolean;
        };
        /** default_product_sort */
        readonly default_product_sort: {
            /**
             * @description Determines how the products are sorted on category page load.
             *
             * @enum {string}
             */
            readonly default_product_sort?: "use_store_settings" | "featured" | "newest" | "best_selling" | "alpha_asc" | "alpha_desc" | "avg_customer_review" | "price_asc" | "price_desc";
        };
        /** name */
        readonly name: {
            /**
             * @description The name displayed for the category. Name is unique with respect to the categoryʼs siblings.
             *     Required in a POST.
             * @example Bath
             */
            readonly name?: string;
        };
        /** description */
        readonly description: {
            /**
             * @description The product description, which can include HTML formatting.
             *
             * @example <p>We offer a wide variety of products perfect for relaxing</p>
             */
            readonly description?: string;
        };
        /** views */
        readonly views: {
            /**
             * @description Number of views the category has on the storefront.
             *
             * @example 1050
             */
            readonly views?: number;
        };
        /** sort_order */
        readonly sort_order: {
            /**
             * @description Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
             *
             * @example 3
             */
            readonly sort_order?: number;
        };
        /** page_title */
        readonly page_title: {
            /**
             * @description Custom title for the category page. If not defined, the category name will be used as the meta title.
             *
             * @example Bath
             */
            readonly page_title?: string;
        };
        /** search_keywords */
        readonly search_keywords: {
            /** @description A comma-separated list of keywords that can be used to locate the category when searching the store.
             *      */
            readonly search_keywords?: string;
        };
        /** meta_keywords */
        readonly meta_keywords: {
            /** @description Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"].
             *      */
            readonly meta_keywords?: readonly string[];
        };
        /** layout_file */
        readonly layout_file: {
            /**
             * @description A valid layout file. Please refer to [the article on creating category files (Help Center)](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/). This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
             *
             * @example category.html
             */
            readonly layout_file?: string;
        };
        /** is_visible */
        readonly is_visible: {
            /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.
             *      */
            readonly is_visible?: boolean;
        };
        /** image_url */
        readonly image_url: {
            /**
             * @description Image URL used for this category on the storefront. Images can be uploaded using form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. An image extension like .jpg or .png is required.
             *
             * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
             */
            readonly image_url?: string;
        };
        /** meta_description */
        readonly meta_description: {
            /** @description Custom meta description for the category page. If not defined, the storeʼs default meta description will be used.
             *      */
            readonly meta_description?: string;
        };
        /** id */
        readonly id: {
            /** @description Unique ID of the *Category*. Increments sequentially.
             *     Read-Only. */
            readonly id?: number;
        };
        /** parent_id */
        readonly parent_id: {
            /**
             * @description The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
             *     Required in a POST if creating a child category.
             * @example 2
             */
            readonly parent_id?: number;
        };
        /** @description Common Metafield properties.
         *      */
        readonly Metafield: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace?: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key?: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value?: string;
            /**
             * @description Description for the metafields.
             *
             * @example order
             */
            readonly description?: string;
            /**
             * @description The type of resource with which the metafield is associated.
             *
             * @example cart
             * @enum {string}
             */
            readonly resource_type?: "brand" | "product" | "variant" | "category" | "cart" | "channel" | "location" | "order" | "customer";
            /**
             * @description The unique identifier for the resource with which the metafield is associated.
             *
             * @example 424242
             */
            readonly resource_id?: number;
            /** @description The unique identifier for the metafield. */
            readonly id?: number;
            /**
             * Format: date-time
             * @description Date and time of the metafieldʼs creation.
             * @example 2022-06-16T18:39:00+00:00
             */
            readonly date_created?: string;
            /**
             * Format: date-time
             * @description Date and time when the metafield was last updated.
             * @example 2022-06-16T18:39:00+00:00
             */
            readonly date_modified?: string;
            /**
             * @description Client ID for the metafieldʼs creator.
             * @example asdfasdfasdfasdfasdfasdfasdf
             */
            readonly owner_client_id?: string;
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponse: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            readonly meta?: components["schemas"]["CollectionMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponse_POST_PUT: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            /**
             * @description Empty for 200 responses.
             * @example []
             */
            readonly errors?: readonly unknown[];
            readonly meta?: components["schemas"]["CollectionMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponsePartialSuccess_POST_PUT: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            readonly errors?: readonly components["schemas"]["Error"][];
            readonly meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponsePartialSuccess_DELETE: {
            /** @example [
             *       123
             *     ] */
            readonly data?: readonly number[];
            readonly errors?: readonly components["schemas"]["Error"][];
            readonly meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionDeleteResponseSuccess: {
            /** @example [
             *       123,
             *       124,
             *       125
             *     ] */
            readonly data?: readonly number[];
            /**
             * @description Empty for 200 responses.
             * @example []
             */
            readonly errors?: readonly unknown[];
            readonly meta?: components["schemas"]["WriteCollectionSuccessMeta"];
        };
        /**
         * Collection Meta
         * @description Additional data about the response.
         */
        readonly WriteCollectionPartialSuccessMeta: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 3
             */
            readonly total?: number;
            /**
             * @description Total number of items that were successfully deleted.
             *
             * @example 1
             */
            readonly success?: number;
            /**
             * @description Total number of items that failed to be deleted.
             *
             * @example 2
             */
            readonly failed?: number;
        };
        /**
         * Collection Meta
         * @description Additional data about the response.
         */
        readonly WriteCollectionSuccessMeta: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 3
             */
            readonly total?: number;
            /**
             * @description Total number of items that were successfully deleted.
             *
             * @example 3
             */
            readonly success?: number;
            /**
             * @description Total number of items that failed to be deleted.
             *
             * @example 0
             */
            readonly failed?: number;
        };
        /** @description Error response payload for the BigCommerce API.
         *      */
        readonly Error: {
            /**
             * @description The HTTP status code for the error.
             *
             * @example 422
             */
            readonly status?: number;
            /**
             * @description The error title.
             *
             * @example Bulk operation has failed
             */
            readonly title?: string;
            /**
             * @description The error type.
             *
             * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
             */
            readonly type?: string;
            readonly errors?: components["schemas"]["ErrorDetail"];
        };
        /**
         * @description Error detail response payload for the BigCommerce API.
         *
         * @example {
         *       "1": "Unauthorized to delete",
         *       "2": "Metafield does not exist"
         *     }
         */
        readonly ErrorDetail: {
            readonly [key: string]: unknown;
        };
        /**
         * Collection Meta
         * @description Data about the response, including pagination and collection totals.
         */
        readonly CollectionMeta: {
            /**
             * Pagination
             * @description Data about the response, including pagination and collection totals.
             */
            readonly pagination?: {
                /**
                 * @description Total number of items in the result set.
                 *
                 * @example 36
                 */
                readonly total?: number;
                /**
                 * @description Total number of items in the collection response.
                 *
                 * @example 36
                 */
                readonly count?: number;
                /**
                 * @description The amount of items returned in the collection per page, controlled by the limit parameter.
                 *
                 * @example 50
                 */
                readonly per_page?: number;
                /**
                 * @description The page you are currently on within the collection.
                 *
                 * @example 1
                 */
                readonly current_page?: number;
                /**
                 * @description The total number of pages in the collection.
                 *
                 * @example 1
                 */
                readonly total_pages?: number;
                /** @description Pagination links for the previous and next parts of the whole collection.
                 *      */
                readonly links?: {
                    /** @description Link to the previous page returned in the response.
                     *      */
                    readonly previous?: string;
                    /**
                     * @description Link to the current page returned in the response.
                     *
                     * @example ?page=1&limit=50
                     */
                    readonly current?: string;
                    /** @description Link to the next page returned in the response.
                     *      */
                    readonly next?: string;
                };
            };
        } & {
            readonly [key: string]: unknown;
        };
        /** @description Common Metafield properties.
         *      */
        readonly MetafieldBase_Post: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value: string;
            /**
             * @description Description for the metafields.
             *
             * @example Name of Staff Member
             */
            readonly description?: string;
        };
        /** @description Common Metafield properties.
         *      */
        readonly MetafieldBase_Put: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *     | Value | Description |
             *     | :--- | :--- |
             *     | `app_only` | Private to the app that owns the field. |
             *     | `read` | Visible to other API consumers. |
             *     | `write` | Open for reading and writing by other API consumers. |
             *     | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
             *     | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
             *
             * @enum {string}
             */
            readonly permission_set?: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace?: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key?: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value?: string;
            /**
             * @description Description for the metafields.
             *
             * @example Name of Staff Member
             */
            readonly description?: string;
        };
    };
    responses: {
        /** @description Multi-status. Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occurred, such as when a `POST` or `PUT` request is successful, but saving the URL or inventory data has failed. */
        readonly General207Status: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Base"];
            };
        };
        /** @description Unauthorized */
        readonly UnauthorizedError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "plain/text": string;
            };
        };
        /** @description Forbidden */
        readonly Forbidden: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unsupported Media Type */
        readonly Unsupported: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "plain/text": string;
            };
        };
    };
    parameters: {
        /** @description The ID of the `Category` to which the resource belongs.
         *      */
        readonly CategoryIdParam: number;
        /** @description The ID of the `Metafield`.
         *      */
        readonly MetafieldIdParam: number;
        /** @description Filter items by metafield ID.
         *      */
        readonly IdMetafieldQueryParam: number;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
        /** @description Specifies the page number in a limited (paginated) list of results.
         *      */
        readonly PageParam: number;
        /** @description Controls the sort order of the response, for example, `sort=name`.
         *
         *     Allowed values:
         *     - `name`: sort categories in alphabetical order by category name.
         *     - `id`: sort in ascending order by category ID.
         *     - `parent_id`: sort in ascending order by the ID of the parent category.
         *     - `sort_order`: sort in ascending order by sort order value. */
        readonly SortParam: "name" | "id" | "parent_id" | "sort_order";
        /** @description Filter based on a metafieldʼs key. */
        readonly MetafieldKeyParam: string;
        /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
        readonly MetafieldKeyInParam: readonly string[];
        /** @description Filter based on a metafieldʼs namespaces. */
        readonly MetafieldNamespaceParam: string;
        /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter. */
        readonly MetafieldNamespaceInParam: readonly string[];
        /** @description Controls the number of items per page in a limited (paginated) list of results.
         *      */
        readonly LimitParam: number;
        /** @description Sort direction. Acceptable values are: `asc`, `desc`.
         *      */
        readonly DirectionParam: "asc" | "desc";
        /** @description 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
         *      */
        readonly date_created_min: string;
        /** @description 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
         *      */
        readonly date_created_max: string;
        /** @description 'Query parameter that lets you filter by the maximum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
         *      */
        readonly date_modified_max: string;
        /** @description 'Query parameter that lets you filter by the minimum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
         *      */
        readonly date_modified_min: string;
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly IncludeFieldsParam: readonly string[];
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly IncludeFieldsParamMetafields: readonly ("resource_id" | "key" | "value" | "namespace" | "permission_set" | "resource_type" | "description" | "owner_client_id" | "date_created" | "date_modified")[];
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly ExcludeFieldsParam: readonly string[];
        /** @description Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
        readonly KeywordParam: string;
        /** @description Filter items based on whether the product is currently visible on the storefront. */
        readonly IsVisibleParam: boolean;
        /** @description Filter items by name.
         *      */
        readonly NameParam: string;
        /** @description Filter items by substring in the name property. `name:like=stick` returns both `Stickers` and `Lipstick colors`. */
        readonly NameLikeParam: string;
        /** @description Filter items by substring in the page title property. `page_title:like=oil` returns both `Soil and mulch` and `Oil pastels`. */
        readonly PageTitleLikeParam: string;
        /** @description Filter items by page_title.
         *      */
        readonly PageTitleParam: string;
        readonly ParentIdInParam: readonly number[];
        /** @description Filter items by parent_id. If the category is a child or sub-category it can be filtered with the parent_id. */
        readonly ParentIdParam: number;
        readonly ParentIdMinParam: number;
        readonly ParentIdMaxParam: number;
        readonly ParentIdGreaterParam: number;
        readonly ParentIdLessParam: number;
        /** @description Filter items by category ID.
         *      */
        readonly IdCategoryQueryParam: number;
        /** @description Explicitly include objects by passing a comma-separated list of IDs. */
        readonly IdInParam: readonly number[];
        /** @description Exclude objects by passing a comma-separated list of IDs. */
        readonly IdNotInParam: readonly number[];
        readonly IdMinParam: number;
        readonly IdMaxParam: number;
        readonly IdGreaterParam: number;
        readonly IdLessParam: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getCategories: {
        readonly parameters: {
            readonly query?: {
                /** @description Filter items by category ID.
                 *      */
                readonly id?: components["parameters"]["IdCategoryQueryParam"];
                /** @description Explicitly include objects by passing a comma-separated list of IDs. */
                readonly "id:in"?: components["parameters"]["IdInParam"];
                /** @description Exclude objects by passing a comma-separated list of IDs. */
                readonly "id:not_in"?: components["parameters"]["IdNotInParam"];
                readonly "id:min"?: components["parameters"]["IdMinParam"];
                readonly "id:max"?: components["parameters"]["IdMaxParam"];
                readonly "id:greater"?: components["parameters"]["IdGreaterParam"];
                readonly "id:less"?: components["parameters"]["IdLessParam"];
                /** @description Filter items by name.
                 *      */
                readonly name?: components["parameters"]["NameParam"];
                /** @description Filter items by substring in the name property. `name:like=stick` returns both `Stickers` and `Lipstick colors`. */
                readonly "name:like"?: components["parameters"]["NameLikeParam"];
                /** @description Filter items by parent_id. If the category is a child or sub-category it can be filtered with the parent_id. */
                readonly parent_id?: components["parameters"]["ParentIdParam"];
                readonly "parent_id:in"?: components["parameters"]["ParentIdInParam"];
                readonly "parent_id:min"?: components["parameters"]["ParentIdMinParam"];
                readonly "parent_id:max"?: components["parameters"]["ParentIdMaxParam"];
                readonly "parent_id:greater"?: components["parameters"]["ParentIdGreaterParam"];
                readonly "parent_id:less"?: components["parameters"]["ParentIdLessParam"];
                /** @description Filter items by page_title.
                 *      */
                readonly page_title?: components["parameters"]["PageTitleParam"];
                /** @description Filter items by substring in the page title property. `page_title:like=oil` returns both `Soil and mulch` and `Oil pastels`. */
                readonly "page_title:like"?: components["parameters"]["PageTitleLikeParam"];
                /** @description Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
                readonly keyword?: components["parameters"]["KeywordParam"];
                /** @description Filter items based on whether the product is currently visible on the storefront. */
                readonly is_visible?: components["parameters"]["IsVisibleParam"];
                /** @description Controls the sort order of the response, for example, `sort=name`.
                 *
                 *     Allowed values:
                 *     - `name`: sort categories in alphabetical order by category name.
                 *     - `id`: sort in ascending order by category ID.
                 *     - `parent_id`: sort in ascending order by the ID of the parent category.
                 *     - `sort_order`: sort in ascending order by sort order value. */
                readonly sort?: components["parameters"]["SortParam"];
                /** @description Specifies the page number in a limited (paginated) list of results.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of results.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "id": 19,
                     *           "parent_id": 0,
                     *           "name": "Garden",
                     *           "description": "<p>This is the garden description</p>",
                     *           "views": 0,
                     *           "sort_order": 2,
                     *           "page_title": "page title",
                     *           "meta_keywords": [
                     *             "meta keyword"
                     *           ],
                     *           "meta_description": "meta description",
                     *           "layout_file": "category.html",
                     *           "image_url": "",
                     *           "is_visible": true,
                     *           "search_keywords": "search keywords",
                     *           "default_product_sort": "use_store_settings",
                     *           "custom_url": {
                     *             "url": "/garden/",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 20,
                     *           "parent_id": 0,
                     *           "name": "Publications",
                     *           "description": "",
                     *           "views": 0,
                     *           "sort_order": 4,
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "",
                     *           "layout_file": "category_with_facets.html",
                     *           "image_url": "",
                     *           "is_visible": true,
                     *           "search_keywords": "",
                     *           "default_product_sort": "use_store_settings",
                     *           "custom_url": {
                     *             "url": "/publications/",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 21,
                     *           "parent_id": 0,
                     *           "name": "Kitchen",
                     *           "description": "",
                     *           "views": 0,
                     *           "sort_order": 3,
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "",
                     *           "layout_file": "category_with_facets.html",
                     *           "image_url": "",
                     *           "is_visible": true,
                     *           "search_keywords": "",
                     *           "default_product_sort": "use_store_settings",
                     *           "custom_url": {
                     *             "url": "/kitchen/",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 22,
                     *           "parent_id": 0,
                     *           "name": "Utility",
                     *           "description": "",
                     *           "views": 0,
                     *           "sort_order": 5,
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "",
                     *           "layout_file": "category_with_facets.html",
                     *           "image_url": "",
                     *           "is_visible": true,
                     *           "search_keywords": "",
                     *           "default_product_sort": "use_store_settings",
                     *           "custom_url": {
                     *             "url": "/utility/",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 23,
                     *           "parent_id": 0,
                     *           "name": "Shop All",
                     *           "description": "",
                     *           "views": 0,
                     *           "sort_order": 0,
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "",
                     *           "layout_file": "category_with_facets.html",
                     *           "image_url": "",
                     *           "is_visible": true,
                     *           "search_keywords": "",
                     *           "default_product_sort": "use_store_settings",
                     *           "custom_url": {
                     *             "url": "/shop-all/",
                     *             "is_customized": false
                     *           }
                     *         },
                     *         {
                     *           "id": 39,
                     *           "parent_id": 19,
                     *           "name": "Bath",
                     *           "description": "",
                     *           "views": 0,
                     *           "sort_order": 0,
                     *           "page_title": "",
                     *           "meta_keywords": [
                     *             ""
                     *           ],
                     *           "meta_description": "",
                     *           "layout_file": "category.html",
                     *           "image_url": "",
                     *           "is_visible": true,
                     *           "search_keywords": "",
                     *           "default_product_sort": "use_store_settings",
                     *           "custom_url": {
                     *             "url": "/garden/bath/",
                     *             "is_customized": false
                     *           }
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "total": 6,
                     *           "count": 6,
                     *           "per_page": 50,
                     *           "current_page": 1,
                     *           "total_pages": 1,
                     *           "links": {
                     *             "current": "?page=1&limit=50"
                     *           }
                     *         }
                     *       }
                     *     } */
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["Category"][];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
        };
    };
    readonly createCategory: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
                     *     Required in a POST if creating a child category.
                     * @example 2
                     */
                    readonly parent_id: number;
                    /**
                     * @description The name displayed for the category. The name must be unique with respect to the category of siblings on the same level (you can duplicate the name for other siblings on another level). Required in a POST.
                     * @example Bath
                     */
                    readonly name: string;
                    /**
                     * @description The category description, which can include HTML formatting.
                     *
                     * @example <p>We offer a wide variety of products perfect for relaxing</p>
                     */
                    readonly description?: string;
                    /**
                     * @description Number of views the category has on the storefront.
                     *
                     * @example 1050
                     */
                    readonly views?: number;
                    /**
                     * @description Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
                     *
                     * @example 3
                     */
                    readonly sort_order?: number;
                    /**
                     * @description Custom title for the category page. If not defined, the category name will be used as the meta title.
                     *
                     * @example Bath
                     */
                    readonly page_title?: string;
                    /** @description A comma-separated list of keywords that can be used to locate the category when searching the store.
                     *      */
                    readonly search_keywords?: string;
                    /** @description Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"].
                     *      */
                    readonly meta_keywords?: readonly string[];
                    /** @description Custom meta description for the category page. If not defined, the storeʼs default meta description will be used.
                     *      */
                    readonly meta_description?: string;
                    /**
                     * @description A valid layout file. Please refer to [the article on creating category files (Help Center)](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/). This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
                     *
                     * @example category.html
                     */
                    readonly layout_file?: string;
                    /** @description Flag to determine whether the category should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.
                     *      */
                    readonly is_visible?: boolean;
                    /**
                     * @description Determines how the products are sorted on category page load.
                     *
                     * @enum {string}
                     */
                    readonly default_product_sort?: "use_store_settings" | "featured" | "newest" | "best_selling" | "alpha_asc" | "alpha_desc" | "avg_customer_review" | "price_asc" | "price_desc";
                    /**
                     * @description Image URL used for this category on the storefront. Images can be uploaded using form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. An image extension like .jpg or .png is required.
                     *
                     * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
                     */
                    readonly image_url?: string;
                    /**
                     * Custom Url Category
                     * @description The custom URL for the category on the storefront. If not provided, the URL will be autogenerated from the category name.
                     */
                    readonly custom_url?: {
                        /**
                         * @description Category URL on the storefront.
                         *
                         * @example /shoes
                         */
                        readonly url?: string;
                        /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
                         *      */
                        readonly is_customized?: boolean;
                    };
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["category_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description Multiple operations have taken place and the status for each operation can be viewed in the body of the response. Typically indicates that a partial failure has occurred, such as when a `POST` or `PUT` request is successful, but saving the URL has failed. */
            readonly 207: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["error_Base"];
                };
            };
            /** @description The `Category` was in conflict with another category. This is the result of duplicate unique values, such as `name` or `custom_url`.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description The `Category` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly deleteCategories: {
        readonly parameters: {
            readonly query?: {
                /** @description Filter items by category ID.
                 *      */
                readonly id?: components["parameters"]["IdCategoryQueryParam"];
                /** @description Explicitly include objects by passing a comma-separated list of IDs. */
                readonly "id:in"?: components["parameters"]["IdInParam"];
                /** @description Exclude objects by passing a comma-separated list of IDs. */
                readonly "id:not_in"?: components["parameters"]["IdNotInParam"];
                readonly "id:min"?: components["parameters"]["IdMinParam"];
                readonly "id:max"?: components["parameters"]["IdMaxParam"];
                readonly "id:greater"?: components["parameters"]["IdGreaterParam"];
                readonly "id:less"?: components["parameters"]["IdLessParam"];
                /** @description Filter items by name.
                 *      */
                readonly name?: components["parameters"]["NameParam"];
                /** @description Filter items by parent_id. If the category is a child or sub-category it can be filtered with the parent_id. */
                readonly parent_id?: components["parameters"]["ParentIdParam"];
                /** @description Filter items by page_title.
                 *      */
                readonly page_title?: components["parameters"]["PageTitleParam"];
                /** @description Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. */
                readonly keyword?: components["parameters"]["KeywordParam"];
                /** @description Filter items based on whether the product is currently visible on the storefront. */
                readonly is_visible?: components["parameters"]["IsVisibleParam"];
                /** @description Filter items by substring in the name property. `name:like=stick` returns both `Stickers` and `Lipstick colors`. */
                readonly "name:like"?: components["parameters"]["NameLikeParam"];
                readonly "parent_id:in"?: components["parameters"]["ParentIdInParam"];
                readonly "parent_id:min"?: components["parameters"]["ParentIdMinParam"];
                readonly "parent_id:max"?: components["parameters"]["ParentIdMaxParam"];
                readonly "parent_id:greater"?: components["parameters"]["ParentIdGreaterParam"];
                readonly "parent_id:less"?: components["parameters"]["ParentIdLessParam"];
                /** @description Filter items by substring in the page title property. `page_title:like=oil` returns both `Soil and mulch` and `Oil pastels`. */
                readonly "page_title:like"?: components["parameters"]["PageTitleLikeParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getCategory: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["category_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly updateCategory: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Unique ID of the *Category*. Increments sequentially.
                     *     Read-Only. */
                    readonly id?: number;
                    /**
                     * @description The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
                     *     Required in a POST if creating a child category.
                     * @example 2
                     */
                    readonly parent_id: number;
                    /**
                     * @description The name displayed for the category. The name must be unique with respect to the category of siblings on the same level (you can duplicate the name for other siblings on another level). Required in a POST.
                     * @example Bath
                     */
                    readonly name: string;
                    /**
                     * @description The product description, which can include HTML formatting.
                     *
                     * @example <p>We offer a wide variety of products perfect for relaxing</p>
                     */
                    readonly description?: string;
                    /**
                     * @description Number of views the category has on the storefront.
                     *
                     * @example 1050
                     */
                    readonly views?: number;
                    /**
                     * @description Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
                     *
                     * @example 3
                     */
                    readonly sort_order?: number;
                    /**
                     * @description Custom title for the category page. If not defined, the category name will be used as the meta title.
                     *
                     * @example Bath
                     */
                    readonly page_title?: string;
                    /** @description A comma-separated list of keywords that can be used to locate the category when searching the store.
                     *      */
                    readonly search_keywords?: string;
                    /** @description Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"].
                     *      */
                    readonly meta_keywords?: readonly string[];
                    /** @description Custom meta description for the category page. If not defined, the storeʼs default meta description will be used.
                     *      */
                    readonly meta_description?: string;
                    /**
                     * @description A valid layout file. Please refer to [the article on creating category files (Help Center)](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/). This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
                     *
                     * @example category.html
                     */
                    readonly layout_file?: string;
                    /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.
                     *      */
                    readonly is_visible?: boolean;
                    /**
                     * @description Determines how the products are sorted on category page load.
                     *
                     * @enum {string}
                     */
                    readonly default_product_sort?: "use_store_settings" | "featured" | "newest" | "best_selling" | "alpha_asc" | "alpha_desc" | "avg_customer_review" | "price_asc" | "price_desc";
                    /**
                     * @description Image URL used for this category on the storefront. Images can be uploaded using form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. An image extension like .jpg or .png is required.
                     *
                     * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
                     */
                    readonly image_url?: string;
                    /**
                     * Custom Url Category
                     * @description The custom URL for the category on the storefront.
                     */
                    readonly custom_url?: {
                        /**
                         * @description Category URL on the storefront.
                         *
                         * @example /shoes
                         */
                        readonly url?: string;
                        /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
                         *      */
                        readonly is_customized?: boolean;
                    };
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /**
                         * Category
                         * @description Common Category object properties.
                         */
                        readonly data?: {
                            /** @description Unique ID of the *Category*. Increments sequentially.
                             *     Read-Only. */
                            readonly id?: number;
                            /**
                             * @description The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
                             *     Required in a POST if creating a child category.
                             * @example 2
                             */
                            readonly parent_id?: number;
                            /**
                             * @description The name displayed for the category. Name is unique with respect to the categoryʼs siblings.
                             *     Required in a POST.
                             * @example Bath
                             */
                            readonly name?: string;
                            /**
                             * @description The product description, which can include HTML formatting.
                             *
                             * @example <p>We offer a wide variety of products perfect for relaxing</p>
                             */
                            readonly description?: string;
                            /**
                             * @description Number of views the category has on the storefront.
                             *
                             * @example 1050
                             */
                            readonly views?: number;
                            /**
                             * @description Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
                             *
                             * @example 3
                             */
                            readonly sort_order?: number;
                            /**
                             * @description Custom title for the category page. If not defined, the category name will be used as the meta title.
                             *
                             * @example Bath
                             */
                            readonly page_title?: string;
                            /** @description A comma-separated list of keywords that can be used to locate the category when searching the store.
                             *      */
                            readonly search_keywords?: string;
                            /** @description Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"].
                             *      */
                            readonly meta_keywords?: readonly string[];
                            /** @description Custom meta description for the category page. If not defined, the storeʼs default meta description will be used.
                             *      */
                            readonly meta_description?: string;
                            /**
                             * @description A valid layout file. Please refer to [the article on creating category files (Help Center)](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/). This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
                             *
                             * @example category.html
                             */
                            readonly layout_file?: string;
                            /** @description Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.
                             *      */
                            readonly is_visible?: boolean;
                            /**
                             * @description Determines how the products are sorted on category page load.
                             *
                             * @enum {string}
                             */
                            readonly default_product_sort?: "use_store_settings" | "featured" | "newest" | "best_selling" | "alpha_asc" | "alpha_desc" | "avg_customer_review" | "price_asc" | "price_desc";
                            /**
                             * @description Image URL used for this category on the storefront. Images can be uploaded using form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. An image extension like .jpg or .png is required.
                             *
                             * @example https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png
                             */
                            readonly image_url?: string;
                            /**
                             * Custom Url Category
                             * @description The custom URL for the category on the storefront.
                             */
                            readonly custom_url?: {
                                /**
                                 * @description Category URL on the storefront.
                                 *
                                 * @example /shoes
                                 */
                                readonly url?: string;
                                /** @description Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
                                 *      */
                                readonly is_customized?: boolean;
                            };
                        };
                        /**
                         * Meta
                         * @description Empty meta object; may be used later.
                         */
                        readonly meta?: Record<string, unknown>;
                    };
                };
            };
            readonly 207: components["responses"]["General207Status"];
            /** @description The resource was not found. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
            /** @description The `Category` was in conflict with another category. This is the result of duplicate unique values, such as `name` or `custom_url`. */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description The `Category` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly deleteCategory: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getCategoryMetafields: {
        readonly parameters: {
            readonly query?: {
                /** @description Filter items by metafield ID.
                 *      */
                readonly id?: components["parameters"]["IdMetafieldQueryParam"];
                /** @description Explicitly include objects by passing a comma-separated list of IDs. */
                readonly "id:in"?: components["parameters"]["IdInParam"];
                /** @description Exclude objects by passing a comma-separated list of IDs. */
                readonly "id:not_in"?: components["parameters"]["IdNotInParam"];
                readonly "id:min"?: components["parameters"]["IdMinParam"];
                readonly "id:max"?: components["parameters"]["IdMaxParam"];
                readonly "id:greater"?: components["parameters"]["IdGreaterParam"];
                readonly "id:less"?: components["parameters"]["IdLessParam"];
                /** @description Filter based on a metafieldʼs key. */
                readonly key?: components["parameters"]["MetafieldKeyParam"];
                /** @description Filter based on a metafieldʼs namespaces. */
                readonly namespace?: components["parameters"]["MetafieldNamespaceParam"];
                /** @description Specifies the page number in a limited (paginated) list of results.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of results.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "id": 6,
                     *           "key": "Location",
                     *           "value": "4HG",
                     *           "namespace": "Warehouse Locations",
                     *           "permission_set": "app_only",
                     *           "resource_type": "category",
                     *           "resource_id": 111,
                     *           "description": "Location in the warehouse",
                     *           "date_created": "1973-01-20T21:34:57.903Z",
                     *           "date_modified": "1990-12-30T00:29:23.515Z"
                     *         },
                     *         {
                     *           "id": 7,
                     *           "key": "Location",
                     *           "value": "4HG",
                     *           "namespace": "Warehouse Locations",
                     *           "permission_set": "read",
                     *           "resource_type": "category",
                     *           "resource_id": 111,
                     *           "description": "Location in the warehouse",
                     *           "date_created": "1973-01-20T21:34:57.903Z",
                     *           "date_modified": "1990-12-30T00:29:23.515Z"
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "total": 2,
                     *           "count": 2,
                     *           "per_page": 50,
                     *           "current_page": 1,
                     *           "total_pages": 1,
                     *           "links": {
                     *             "current": "?page=1&limit=50"
                     *           }
                     *         }
                     *       }
                     *     } */
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["metafield_Full"][];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
        };
    };
    readonly createCategoryMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["metafield_Base"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 4,
                     *         "key": "location_id",
                     *         "value": "Shelf 3, Bin 5",
                     *         "namespace": "App Namespace",
                     *         "permission_set": "app_only",
                     *         "resource_type": "category",
                     *         "resource_id": 137,
                     *         "description": "Where products are located",
                     *         "date_created": "2021-08-06T19:15:35+00:00",
                     *         "date_modified": "2021-08-06T19:15:35+00:00"
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: components["schemas"]["metafield_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate, unique key combinations of the appʼs client id, namespace, key, resource_type, and resource_id.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly getCategoryMetafield: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafield_id: components["parameters"]["MetafieldIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 4,
                     *         "key": "location_id",
                     *         "value": "Shelf 3, Bin 5",
                     *         "namespace": "App Namespace",
                     *         "permission_set": "app_only",
                     *         "resource_type": "category",
                     *         "resource_id": 137,
                     *         "description": "Where products are located",
                     *         "date_created": "2021-08-06T19:15:35+00:00",
                     *         "date_modified": "2021-08-06T19:15:35+00:00"
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: components["schemas"]["metafield_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource was not found. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly updateCategoryMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafield_id: components["parameters"]["MetafieldIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["metafield_Base"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 4,
                     *         "key": "location_id",
                     *         "value": "Shelf 3, Bin 5",
                     *         "namespace": "App Namespace",
                     *         "permission_set": "app_only",
                     *         "resource_type": "category",
                     *         "resource_id": 137,
                     *         "description": "Where products are located",
                     *         "date_created": "2021-08-06T19:15:35+00:00",
                     *         "date_modified": "2021-08-06T19:15:35+00:00"
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: components["schemas"]["metafield_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly deleteCategoryMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafield_id: components["parameters"]["MetafieldIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly createCategoryImage: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "multipart/form-data": {
                    /** Format: binary */
                    readonly image_file?: string;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "image_url": "https://cdn11.bigcommerce.com/s-{store_hash}/product_images/k/group_1545334669__76009.png"
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        readonly data?: {
                            readonly image_url?: string;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description Bad Request. The requested resource could not be downloaded and may be invalid. Possible reasons include malformed request syntax or the file host blocking requests. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": Record<string, unknown>;
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["Forbidden"];
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
            /** @description Image was not valid. This is the result of a missing `image_file` field or an incorrect file type. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly deleteCategoryImage: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["Forbidden"];
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly getCategorySortOrders: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of results.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["productSortOrder"][];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["Forbidden"];
            /** @description The requested category was not found. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["error_Base"];
                };
            };
        };
    };
    readonly updateCategorySortOrders: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of results.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Category` to which the resource belongs.
                 *      */
                readonly category_id: components["parameters"]["CategoryIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["productSortOrder"][];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": readonly components["schemas"]["productSortOrder"][];
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 403: components["responses"]["Forbidden"];
            /** @description The requested category was not found. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["error_Base"];
                };
            };
            readonly 415: components["responses"]["Unsupported"];
            /** @description Unprocessable entity.
             *
             *     Please verify if all requested products are assigned to the category.
             *
             *     Please verify if all required fields are present in the request body and are filled with values correctly. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["error_Base"];
                };
            };
        };
    };
    readonly getCategoriesMetafields: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of results.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of results.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Filter based on a metafieldʼs key. */
                readonly key?: components["parameters"]["MetafieldKeyParam"];
                /** @description Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter. */
                readonly "key:in"?: components["parameters"]["MetafieldKeyInParam"];
                /** @description Filter based on a metafieldʼs namespaces. */
                readonly namespace?: components["parameters"]["MetafieldNamespaceParam"];
                /** @description Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter. */
                readonly "namespace:in"?: components["parameters"]["MetafieldNamespaceInParam"];
                /** @description Sort direction. Acceptable values are: `asc`, `desc`.
                 *      */
                readonly direction?: components["parameters"]["DirectionParam"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParamMetafields"];
                /** @description 'Query parameter that lets you filter by the minimum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
                 *      */
                readonly "date_modified:min"?: components["parameters"]["date_modified_min"];
                /** @description 'Query parameter that lets you filter by the maximum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
                 *      */
                readonly "date_modified:max"?: components["parameters"]["date_modified_max"];
                /** @description 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
                 *      */
                readonly "date_created:min"?: components["parameters"]["date_created_min"];
                /** @description 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
                 *      */
                readonly "date_created:max"?: components["parameters"]["date_created_max"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description List of `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse"];
                };
            };
        };
    };
    readonly updateCategoriesMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly (components["schemas"]["MetafieldBase_Put"] & {
                    /**
                     * @description The ID of metafield to update.
                     *
                     * @example 42
                     */
                    readonly id: number;
                })[];
            };
        };
        readonly responses: {
            /** @description List of updated `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Response object for metafields creation with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
                };
            };
        };
    };
    readonly createCategoriesMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly (components["schemas"]["MetafieldBase_Post"] & {
                    /**
                     * @description The ID for the category with which the metafield is associated.
                     *
                     * @example 42
                     */
                    readonly resource_id: number;
                })[];
            };
        };
        readonly responses: {
            /** @description List of created `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Response object for metafields creation with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
                };
            };
        };
    };
    readonly deleteCategoriesMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /** @description List of metafield IDs. */
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly number[];
            };
        };
        readonly responses: {
            /** @description Response object for metafields deletion with success.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionDeleteResponseSuccess"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": 400,
                     *       "title": "Input is invalid",
                     *       "type": "https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes",
                     *       "detail": "Syntax error"
                     *     } */
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Response object for metafields deletion with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_DELETE"];
                };
            };
        };
    };
}
