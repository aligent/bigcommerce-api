/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/catalog/products/{product_id}/options": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get All Product Variant Options
         * @description Returns a list of product *Variant Options*. Optional parameters can be passed in.
         */
        readonly get: operations["getProductVariantOptions"];
        /**
         * Create a Product Variant Option
         * @description Creates a *Variant Option*.
         *
         *     **Required Fields**
         *     * display_name
         *     * type
         *     * option_values
         *
         *     **Read-Only Fields**
         *     * id
         *
         *     **Limits**
         *     * 255 characters option name length.
         *
         *     **Notes**
         *
         *     * Only one variant option at a time can be created; individual variant options will contain an array of multiple values.
         *     * There are several examples listed below that create options, but the SKUs are not updated and they are not a variant on the product. Variant SKUs must be created with a separate request.
         *     * Variant options will show on the storefront as an option that can be selected by the customer. A request like this could be used to add new choices to a variant that has already been created.
         *     * If more than one variant needs to be created, use the [Create a Product](/docs/rest-catalog/products#create-a-product) endpoint.
         */
        readonly post: operations["createProductVariantOption"];
    };
    readonly "/catalog/products/{product_id}/options/{option_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Option`.
                 *      */
                readonly option_id: components["parameters"]["OptionIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Product Variant Option
         * @description Returns a single *Variant Option*. Optional parameters can be passed in.
         */
        readonly get: operations["getProductVariantOption"];
        /**
         * Update a Product Variant Option
         * @description Updates a *Variant Option*.
         *
         *     **Read-Only Fields**
         *     * id
         */
        readonly put: operations["updateProductVariantOption"];
        /**
         * Delete a Product Variant Option
         * @description Deletes a *Variant Option*.
         */
        readonly delete: operations["deleteProductVariantOption"];
    };
    readonly "/catalog/products/{product_id}/options/{option_id}/values": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Option`.
                 *      */
                readonly option_id: components["parameters"]["OptionIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get All Product Variant Option Values
         * @description Returns a list of all *Variant Option Values*. Optional parameters can be passed in.
         */
        readonly get: operations["getProductVariantOptionValues"];
        /**
         * Create a Product Variant Option Value
         * @description Creates a *Variant Option Value*.
         *
         *     **Required Fields**
         *     * label
         *     * sort_order
         *
         *     **Read-Only Fields**
         *     * id
         *
         *     **Limits**
         *     * 250 option values per option limit.
         */
        readonly post: operations["createProductVariantOptionValue"];
    };
    readonly "/catalog/products/{product_id}/options/{option_id}/values/{value_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Option`.
                 *      */
                readonly option_id: components["parameters"]["OptionIdParam"];
                /** @description The ID of the `Modifier/Option Value`.
                 *      */
                readonly value_id: components["parameters"]["ValueIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Product Variant Option Value
         * @description Returns a single *Variant Option Value*. Optional parameters can be passed in.
         */
        readonly get: operations["getProductVariantOptionValue"];
        /**
         * Update a Product Variant Option Value
         * @description Updates a *Variant Option Value*.
         *
         *     **Read-Only Fields**
         *     * id
         */
        readonly put: operations["updateProductVariantOptionValue"];
        /**
         * Delete a Product Variant Option Value
         * @description Deletes a *Variant Option Value*.
         */
        readonly delete: operations["deleteProductVariantOptionValue"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * productOption_Base
         * @description Common Option properties.
         */
        readonly productOption_Base: {
            /**
             * @description The unique numerical ID of the option, increments sequentially.
             *
             * @example 55
             */
            readonly id?: number | null;
            /**
             * @description The unique numerical ID of the product to which the option belongs.
             *
             * @example 4
             */
            readonly product_id?: number;
            /**
             * @description The name of the option shown on the storefront.
             *
             * @example Add-a-$5-Donation1535042499-187
             */
            readonly display_name?: string;
            /**
             * @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
             *
             * @enum {string}
             */
            readonly type?: "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
            readonly config?: components["schemas"]["productOptionConfig_Full"];
            /**
             * @description Order in which the option is displayed on the storefront.
             * @example 1
             */
            readonly sort_order?: number;
            readonly option_values?: readonly components["schemas"]["productOptionOptionValue_Full"][];
        };
        /** productOption_Full */
        readonly productOption_Full: components["schemas"]["productOption_Base"] & {
            /**
             * @description The unique option name, auto-generated from the display name, a timestamp, and the product ID.
             *
             * @example Add-a-$5-Donation1535042499-187
             */
            readonly name?: string;
        };
        /**
         * productOptionOptionValue_Base
         * @description Common Product Option `option_value` properties.
         */
        readonly productOptionOptionValue_Base: {
            /**
             * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
             *
             * @example false
             */
            readonly is_default?: boolean;
            /**
             * @description The text display identifying the value on the storefront. Required in a /POST.
             *
             * @example Green
             */
            readonly label: string;
            /**
             * @description The order in which the value will be displayed on the product page. Required in a /POST.
             *
             * @example 0
             */
            readonly sort_order: number;
            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`.
             *      */
            readonly value_data?: Record<string, unknown> | null;
        };
        /**
         * productOptionOptionValue_Full
         * @description Product Option `option_value`.
         */
        readonly productOptionOptionValue_Full: components["schemas"]["productOptionOptionValue_Base"] & {
            /** @description The unique numeric ID of the value; increments sequentially.
             *      */
            readonly id?: number;
        };
        /**
         * productOptionConfig_Full
         * @description The values for option config can vary based on the Modifier created.
         */
        readonly productOptionConfig_Full: {
            /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.
             *      */
            readonly default_value?: string;
            /** @description (checkbox) Flag for setting the checkbox to be checked by default.
             *      */
            readonly checked_by_default?: boolean;
            /** @description (checkbox) Label displayed for the checkbox option.
             *      */
            readonly checkbox_label?: string;
            /** @description (date) Flag to limit the dates allowed to be entered on a date option.
             *      */
            readonly date_limited?: boolean;
            /**
             * @description (date) The type of limit that is allowed to be entered on a date option.
             *
             * @example range
             * @enum {string}
             */
            readonly date_limit_mode?: "earliest" | "range" | "latest";
            /**
             * Format: date
             * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             */
            readonly date_earliest_value?: string;
            /**
             * Format: date
             * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             */
            readonly date_latest_value?: string;
            /**
             * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
             *
             * @example specific
             * @enum {string}
             */
            readonly file_types_mode?: "specific" | "all";
            /** @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             *       `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             *       `other` - Allows file types defined in the `file_types_other` array.
             *      */
            readonly file_types_supported?: readonly string[];
            /** @description (file) A list of other file types allowed with the file upload option.
             *      */
            readonly file_types_other?: readonly string[];
            /**
             * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
             *
             * @example 5
             */
            readonly file_max_size?: number;
            /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
             *      */
            readonly text_characters_limited?: boolean;
            /**
             * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
             *
             * @example 1
             */
            readonly text_min_length?: number;
            /**
             * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
             *
             * @example 55
             */
            readonly text_max_length?: number;
            /**
             * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
             *
             * @example true
             */
            readonly text_lines_limited?: boolean;
            /**
             * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
             *
             * @example 4
             */
            readonly text_max_lines?: number;
            /**
             * @description (numbers_only_text) Flag to limit the value of a number option.
             *
             * @example true
             */
            readonly number_limited?: boolean;
            /**
             * @description (numbers_only_text) The type of limit on values entered for a number option.
             *
             * @example lowest
             * @enum {string}
             */
            readonly number_limit_mode?: "lowest" | "highest" | "range";
            /**
             * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
             *
             * @example 100
             */
            readonly number_lowest_value?: number;
            /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
             *      */
            readonly number_highest_value?: number;
            /**
             * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
             *
             * @example false
             */
            readonly number_integers_only?: boolean;
            /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
             *      */
            readonly product_list_adjusts_inventory?: boolean;
            /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
             *      */
            readonly product_list_adjusts_pricing?: boolean;
            /**
             * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
             *
             * @example weight
             * @enum {string}
             */
            readonly product_list_shipping_calc?: "none" | "weight" | "package";
        };
        /**
         * metaCollection_Full
         * @description Data about the response, including pagination and collection totals.
         */
        readonly metaCollection_Full: {
            readonly pagination?: components["schemas"]["pagination_Full"];
        };
        /**
         * pagination_Full
         * @description Data about the response, including pagination and collection totals.
         */
        readonly pagination_Full: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 36
             */
            readonly total?: number;
            /**
             * @description Total number of items in the collection response.
             *
             * @example 36
             */
            readonly count?: number;
            /**
             * @description The amount of items returned in the collection per page, controlled by the limit parameter.
             *
             * @example 50
             */
            readonly per_page?: number;
            /**
             * @description The page you are currently on within the collection.
             *
             * @example 1
             */
            readonly current_page?: number;
            /**
             * @description The total number of pages in the collection.
             *
             * @example 1
             */
            readonly total_pages?: number;
            /** @description Pagination links for the previous and next parts of the whole collection.
             *      */
            readonly links?: {
                /** @description Link to the previous page returned in the response.
                 *      */
                readonly previous?: string;
                /**
                 * @description Link to the current page returned in the response.
                 *
                 * @example ?page=1&limit=50
                 */
                readonly current?: string;
                /** @description Link to the next page returned in the response.
                 *      */
                readonly next?: string;
            };
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly metaEmpty_Full: {
            readonly [key: string]: unknown;
        };
    };
    responses: never;
    parameters: {
        /** @description The ID of the `Product` to which the resource belongs.
         *      */
        readonly ProductIdParam: number;
        /** @description The ID of the `Modifier/Option Value`.
         *      */
        readonly ValueIdParam: number;
        /** @description The ID of the `Option`.
         *      */
        readonly OptionIdParam: number;
        /** @description Specifies the page number in a limited (paginated) list of products.
         *      */
        readonly PageParam: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products.
         *      */
        readonly LimitParam: number;
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly IncludeFieldsParam: readonly string[];
        /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
        readonly ExcludeFieldsParam: readonly string[];
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getProductVariantOptions: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["productOption_Full"][];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly createProductVariantOption: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description The unique numerical ID of the product to which the option belongs.
                     *
                     * @example 4
                     */
                    readonly product_id?: number;
                    /**
                     * @description The name of the option shown on the storefront.
                     *
                     * @example Add-a-$5-Donation1535042499-187
                     */
                    readonly display_name?: string;
                    /**
                     * @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
                     *
                     * @enum {string}
                     */
                    readonly type?: "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
                    /**
                     * Option Config
                     * @description The values for option config can vary based on the Modifier created.
                     */
                    readonly config?: {
                        /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.
                         *      */
                        readonly default_value?: string;
                        /** @description (checkbox) Flag for setting the checkbox to be checked by default.
                         *      */
                        readonly checked_by_default?: boolean;
                        /** @description (checkbox) Label displayed for the checkbox option.
                         *      */
                        readonly checkbox_label?: string;
                        /** @description (date) Flag to limit the dates allowed to be entered on a date option.
                         *      */
                        readonly date_limited?: boolean;
                        /**
                         * @description (date) The type of limit that is allowed to be entered on a date option.
                         *
                         * @example range
                         * @enum {string}
                         */
                        readonly date_limit_mode?: "earliest" | "range" | "latest";
                        /**
                         * Format: date-time
                         * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                         *
                         * @example 2018-08-31T00:00:00+00:00
                         */
                        readonly date_earliest_value?: string;
                        /**
                         * Format: date-time
                         * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                         *
                         * @example 2019-01-01T00:00:00+00:00
                         */
                        readonly date_latest_value?: string;
                        /**
                         * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
                         *
                         * @example specific
                         * @enum {string}
                         */
                        readonly file_types_mode?: "specific" | "all";
                        /**
                         * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                         *       `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                         *       `other` - Allows file types defined in the `file_types_other` array.
                         *
                         * @example [
                         *       "images",
                         *       "documents",
                         *       "other"
                         *     ]
                         */
                        readonly file_types_supported?: readonly string[];
                        /**
                         * @description (file) A list of other file types allowed with the file upload option.
                         *
                         * @example [
                         *       "pdf",
                         *       "txt"
                         *     ]
                         */
                        readonly file_types_other?: readonly string[];
                        /**
                         * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
                         *
                         * @example 5
                         */
                        readonly file_max_size?: number;
                        /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
                         *      */
                        readonly text_characters_limited?: boolean;
                        /**
                         * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
                         *
                         * @example 1
                         */
                        readonly text_min_length?: number;
                        /**
                         * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
                         *
                         * @example 55
                         */
                        readonly text_max_length?: number;
                        /**
                         * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
                         *
                         * @example true
                         */
                        readonly text_lines_limited?: boolean;
                        /**
                         * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
                         *
                         * @example 4
                         */
                        readonly text_max_lines?: number;
                        /**
                         * @description (numbers_only_text) Flag to limit the value of a number option.
                         *
                         * @example true
                         */
                        readonly number_limited?: boolean;
                        /**
                         * @description (numbers_only_text) The type of limit on values entered for a number option.
                         *
                         * @example lowest
                         * @enum {string}
                         */
                        readonly number_limit_mode?: "lowest" | "highest" | "range";
                        /**
                         * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
                         *
                         * @example 100
                         */
                        readonly number_lowest_value?: number;
                        /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
                         *      */
                        readonly number_highest_value?: number;
                        /**
                         * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
                         *
                         * @example false
                         */
                        readonly number_integers_only?: boolean;
                        /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
                         *      */
                        readonly product_list_adjusts_inventory?: boolean;
                        /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
                         *      */
                        readonly product_list_adjusts_pricing?: boolean;
                        /**
                         * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
                         *
                         * @example weight
                         * @enum {string}
                         */
                        readonly product_list_shipping_calc?: "none" | "weight" | "package";
                    };
                    /**
                     * @description Order in which the option is displayed on the storefront.
                     * @example 1
                     */
                    readonly sort_order?: number;
                    readonly option_values?: readonly ({
                        /**
                         * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                         *
                         * @example false
                         */
                        readonly is_default?: boolean;
                        /**
                         * @description The text display identifying the value on the storefront. Required in a /POST.
                         *
                         * @example Green
                         */
                        readonly label: string;
                        /**
                         * @description The order in which the value will be displayed on the product page. Required in a /POST.
                         *
                         * @example 0
                         */
                        readonly sort_order: number;
                        /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
                         *      */
                        readonly value_data?: Record<string, unknown>;
                    } & {
                        /** @description The unique numeric ID of the value; increments sequentially.
                         *      */
                        readonly id?: number;
                    })[];
                    /** @description Publicly available image url */
                    readonly image_url?: string;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Option */
                        readonly data?: {
                            /**
                             * @description The unique numerical ID of the option, increments sequentially.
                             *
                             * @example 55
                             */
                            readonly id?: number;
                            /**
                             * @description The unique numerical ID of the product to which the option belongs.
                             *
                             * @example 4
                             */
                            readonly product_id?: number;
                            /**
                             * @description The name of the option shown on the storefront.
                             *
                             * @example Add-a-$5-Donation1535042499-187
                             */
                            readonly display_name?: string;
                            /**
                             * @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
                             *
                             * @enum {string}
                             */
                            readonly type?: "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
                            /**
                             * Option Config
                             * @description The values for option config can vary based on the Modifier created.
                             */
                            readonly config?: {
                                /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.
                                 *      */
                                readonly default_value?: string;
                                /** @description (checkbox) Flag for setting the checkbox to be checked by default.
                                 *      */
                                readonly checked_by_default?: boolean;
                                /** @description (checkbox) Label displayed for the checkbox option.
                                 *      */
                                readonly checkbox_label?: string;
                                /** @description (date) Flag to limit the dates allowed to be entered on a date option.
                                 *      */
                                readonly date_limited?: boolean;
                                /**
                                 * @description (date) The type of limit that is allowed to be entered on a date option.
                                 *
                                 * @example range
                                 * @enum {string}
                                 */
                                readonly date_limit_mode?: "earliest" | "range" | "latest";
                                /**
                                 * Format: date-time
                                 * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                                 *
                                 */
                                readonly date_earliest_value?: string;
                                /**
                                 * Format: date-time
                                 * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                                 *
                                 */
                                readonly date_latest_value?: string;
                                /**
                                 * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
                                 *
                                 * @example specific
                                 * @enum {string}
                                 */
                                readonly file_types_mode?: "specific" | "all";
                                /** @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                                 *       `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                                 *       `other` - Allows file types defined in the `file_types_other` array.
                                 *      */
                                readonly file_types_supported?: readonly string[];
                                /** @description (file) A list of other file types allowed with the file upload option.
                                 *      */
                                readonly file_types_other?: readonly string[];
                                /**
                                 * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
                                 *
                                 * @example 5
                                 */
                                readonly file_max_size?: number;
                                /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
                                 *      */
                                readonly text_characters_limited?: boolean;
                                /**
                                 * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
                                 *
                                 * @example 1
                                 */
                                readonly text_min_length?: number;
                                /**
                                 * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
                                 *
                                 * @example 55
                                 */
                                readonly text_max_length?: number;
                                /**
                                 * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
                                 *
                                 * @example true
                                 */
                                readonly text_lines_limited?: boolean;
                                /**
                                 * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
                                 *
                                 * @example 4
                                 */
                                readonly text_max_lines?: number;
                                /**
                                 * @description (numbers_only_text) Flag to limit the value of a number option.
                                 *
                                 * @example true
                                 */
                                readonly number_limited?: boolean;
                                /**
                                 * @description (numbers_only_text) The type of limit on values entered for a number option.
                                 *
                                 * @example lowest
                                 * @enum {string}
                                 */
                                readonly number_limit_mode?: "lowest" | "highest" | "range";
                                /**
                                 * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
                                 *
                                 * @example 100
                                 */
                                readonly number_lowest_value?: number;
                                /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
                                 *      */
                                readonly number_highest_value?: number;
                                /**
                                 * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
                                 *
                                 * @example false
                                 */
                                readonly number_integers_only?: boolean;
                                /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
                                 *      */
                                readonly product_list_adjusts_inventory?: boolean;
                                /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
                                 *      */
                                readonly product_list_adjusts_pricing?: boolean;
                                /**
                                 * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
                                 *
                                 * @example weight
                                 * @enum {string}
                                 */
                                readonly product_list_shipping_calc?: "none" | "weight" | "package";
                            };
                            /**
                             * @description Order in which the option is displayed on the storefront.
                             * @example 1
                             */
                            readonly sort_order?: number;
                            readonly option_values?: readonly ({
                                /**
                                 * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                                 *
                                 * @example false
                                 */
                                readonly is_default?: boolean;
                                /**
                                 * @description The text display identifying the value on the storefront. Required in a /POST.
                                 *
                                 * @example Green
                                 */
                                readonly label: string;
                                /**
                                 * @description The order in which the value will be displayed on the product page. Required in a /POST.
                                 *
                                 * @example 0
                                 */
                                readonly sort_order: number;
                                /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
                                 *      */
                                readonly value_data?: Record<string, unknown>;
                            } & {
                                /** @description The unique numeric ID of the value; increments sequentially.
                                 *      */
                                readonly id?: number;
                            })[];
                            /** @description Publicly available image url */
                            readonly image_url?: string;
                        } & {
                            /**
                             * @description The unique option name, auto-generated from the display name, a timestamp, and the product ID.
                             *
                             * @example Add-a-$5-Donation1535042499-187
                             */
                            readonly name?: string;
                        };
                        /**
                         * Meta
                         * @description Empty meta object; may be used later.
                         */
                        readonly meta?: Record<string, unknown>;
                    };
                };
            };
            /** @description Option was in conflict with another option. This is the result of duplicate unique fields, such as `name`.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description Option was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly getProductVariantOption: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Option`.
                 *      */
                readonly option_id: components["parameters"]["OptionIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["productOption_Full"];
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly updateProductVariantOption: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Option`.
                 *      */
                readonly option_id: components["parameters"]["OptionIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description The unique numerical ID of the option, increments sequentially.
                     *
                     * @example 55
                     */
                    readonly id?: number | null;
                    /**
                     * @description The unique numerical ID of the product to which the option belongs.
                     *
                     * @example 4
                     */
                    readonly product_id?: number;
                    /**
                     * @description The name of the option shown on the storefront.
                     *
                     * @example Add-a-$5-Donation1535042499-187
                     */
                    readonly display_name?: string;
                    /**
                     * @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
                     *
                     * @enum {string}
                     */
                    readonly type?: "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
                    /**
                     * Option Config
                     * @description The values for option config can vary based on the Modifier created.
                     */
                    readonly config?: {
                        /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.
                         *      */
                        readonly default_value?: string;
                        /** @description (checkbox) Flag for setting the checkbox to be checked by default.
                         *      */
                        readonly checked_by_default?: boolean;
                        /** @description (checkbox) Label displayed for the checkbox option.
                         *      */
                        readonly checkbox_label?: string;
                        /** @description (date) Flag to limit the dates allowed to be entered on a date option.
                         *      */
                        readonly date_limited?: boolean;
                        /**
                         * @description (date) The type of limit that is allowed to be entered on a date option.
                         *
                         * @example range
                         * @enum {string}
                         */
                        readonly date_limit_mode?: "earliest" | "range" | "latest";
                        /**
                         * Format: date-time
                         * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                         *
                         * @example 2018-08-31T00:00:00+00:00
                         */
                        readonly date_earliest_value?: string;
                        /**
                         * Format: date-time
                         * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                         *
                         * @example 2019-01-01T00:00:00+00:00
                         */
                        readonly date_latest_value?: string;
                        /**
                         * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
                         *
                         * @example specific
                         * @enum {string}
                         */
                        readonly file_types_mode?: "specific" | "all";
                        /**
                         * @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                         *       `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                         *       `other` - Allows file types defined in the `file_types_other` array.
                         *
                         * @example [
                         *       "images",
                         *       "documents",
                         *       "other"
                         *     ]
                         */
                        readonly file_types_supported?: readonly string[];
                        /**
                         * @description (file) A list of other file types allowed with the file upload option.
                         *
                         * @example [
                         *       "pdf",
                         *       "txt"
                         *     ]
                         */
                        readonly file_types_other?: readonly string[];
                        /**
                         * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
                         *
                         * @example 5
                         */
                        readonly file_max_size?: number;
                        /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
                         *      */
                        readonly text_characters_limited?: boolean;
                        /**
                         * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
                         *
                         * @example 1
                         */
                        readonly text_min_length?: number;
                        /**
                         * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
                         *
                         * @example 55
                         */
                        readonly text_max_length?: number;
                        /**
                         * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
                         *
                         * @example true
                         */
                        readonly text_lines_limited?: boolean;
                        /**
                         * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
                         *
                         * @example 4
                         */
                        readonly text_max_lines?: number;
                        /**
                         * @description (numbers_only_text) Flag to limit the value of a number option.
                         *
                         * @example true
                         */
                        readonly number_limited?: boolean;
                        /**
                         * @description (numbers_only_text) The type of limit on values entered for a number option.
                         *
                         * @example lowest
                         * @enum {string}
                         */
                        readonly number_limit_mode?: "lowest" | "highest" | "range";
                        /**
                         * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
                         *
                         * @example 100
                         */
                        readonly number_lowest_value?: number;
                        /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
                         *      */
                        readonly number_highest_value?: number;
                        /**
                         * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
                         *
                         * @example false
                         */
                        readonly number_integers_only?: boolean;
                        /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
                         *      */
                        readonly product_list_adjusts_inventory?: boolean;
                        /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
                         *      */
                        readonly product_list_adjusts_pricing?: boolean;
                        /**
                         * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
                         *
                         * @example weight
                         * @enum {string}
                         */
                        readonly product_list_shipping_calc?: "none" | "weight" | "package";
                    };
                    /**
                     * @description Order in which the option is displayed on the storefront.
                     * @example 1
                     */
                    readonly sort_order?: number;
                    readonly option_values?: readonly ({
                        /**
                         * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                         *
                         * @example false
                         */
                        readonly is_default?: boolean;
                        /**
                         * @description The text display identifying the value on the storefront. Required in a /POST.
                         *
                         * @example Green
                         */
                        readonly label: string;
                        /**
                         * @description The order in which the value will be displayed on the product page. Required in a /POST.
                         *
                         * @example 0
                         */
                        readonly sort_order: number;
                        /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
                         *      */
                        readonly value_data?: Record<string, unknown>;
                    } & {
                        /** @description The unique numeric ID of the value; increments sequentially.
                         *      */
                        readonly id?: number;
                    })[];
                    /** @description Publicly available image url */
                    readonly image_url?: string;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 220,
                     *         "product_id": 192,
                     *         "name": "Color (Colors only)",
                     *         "display_name": "Color",
                     *         "type": "swatch",
                     *         "sort_order": 0,
                     *         "option_values": [
                     *           {
                     *             "id": 174,
                     *             "label": "Beige",
                     *             "sort_order": 1,
                     *             "value_data": {
                     *               "colors": [
                     *                 "#FAFAEB"
                     *               ]
                     *             },
                     *             "is_default": false
                     *           },
                     *           {
                     *             "id": 175,
                     *             "label": "Grey",
                     *             "sort_order": 2,
                     *             "value_data": {
                     *               "colors": [
                     *                 "#BDBDBD"
                     *               ]
                     *             },
                     *             "is_default": false
                     *           },
                     *           {
                     *             "id": 176,
                     *             "label": "Black",
                     *             "sort_order": 3,
                     *             "value_data": {
                     *               "colors": [
                     *                 "#000000"
                     *               ]
                     *             },
                     *             "is_default": false
                     *           },
                     *           {
                     *             "id": 189,
                     *             "label": "Black-Walnut",
                     *             "sort_order": 4,
                     *             "value_data": {
                     *               "colors": [
                     *                 "#e80ee8"
                     *               ]
                     *             },
                     *             "is_default": false
                     *           }
                     *         ],
                     *         "config": {}
                     *       },
                     *       "meta": {}
                     *     } */
                    readonly "application/json": {
                        /** Option */
                        readonly data?: {
                            /**
                             * @description The unique numerical ID of the option, increments sequentially.
                             *
                             * @example 55
                             */
                            readonly id?: number;
                            /**
                             * @description The unique numerical ID of the product to which the option belongs.
                             *
                             * @example 4
                             */
                            readonly product_id?: number;
                            /**
                             * @description The name of the option shown on the storefront.
                             *
                             * @example Add-a-$5-Donation1535042499-187
                             */
                            readonly display_name?: string;
                            /**
                             * @description The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
                             *
                             * @enum {string}
                             */
                            readonly type?: "radio_buttons" | "rectangles" | "dropdown" | "product_list" | "product_list_with_images" | "swatch";
                            /**
                             * Option Config
                             * @description The values for option config can vary based on the Modifier created.
                             */
                            readonly config?: {
                                /** @description (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.
                                 *      */
                                readonly default_value?: string;
                                /** @description (checkbox) Flag for setting the checkbox to be checked by default.
                                 *      */
                                readonly checked_by_default?: boolean;
                                /** @description (checkbox) Label displayed for the checkbox option.
                                 *      */
                                readonly checkbox_label?: string;
                                /** @description (date) Flag to limit the dates allowed to be entered on a date option.
                                 *      */
                                readonly date_limited?: boolean;
                                /**
                                 * @description (date) The type of limit that is allowed to be entered on a date option.
                                 *
                                 * @example range
                                 * @enum {string}
                                 */
                                readonly date_limit_mode?: "earliest" | "range" | "latest";
                                /**
                                 * Format: date
                                 * @description (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                                 *
                                 */
                                readonly date_earliest_value?: string;
                                /**
                                 * Format: date
                                 * @description (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
                                 *
                                 */
                                readonly date_latest_value?: string;
                                /**
                                 * @description (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
                                 *
                                 * @example specific
                                 * @enum {string}
                                 */
                                readonly file_types_mode?: "specific" | "all";
                                /** @description (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
                                 *       `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
                                 *       `other` - Allows file types defined in the `file_types_other` array.
                                 *      */
                                readonly file_types_supported?: readonly string[];
                                /** @description (file) A list of other file types allowed with the file upload option.
                                 *      */
                                readonly file_types_other?: readonly string[];
                                /**
                                 * @description (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
                                 *
                                 * @example 5
                                 */
                                readonly file_max_size?: number;
                                /** @description (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
                                 *      */
                                readonly text_characters_limited?: boolean;
                                /**
                                 * @description (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
                                 *
                                 * @example 1
                                 */
                                readonly text_min_length?: number;
                                /**
                                 * @description (text, multi_line_text) The maximum length allowed for a text or multi line text option.
                                 *
                                 * @example 55
                                 */
                                readonly text_max_length?: number;
                                /**
                                 * @description (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
                                 *
                                 * @example true
                                 */
                                readonly text_lines_limited?: boolean;
                                /**
                                 * @description (multi_line_text) The maximum number of lines allowed on a multi-line text input.
                                 *
                                 * @example 4
                                 */
                                readonly text_max_lines?: number;
                                /**
                                 * @description (numbers_only_text) Flag to limit the value of a number option.
                                 *
                                 * @example true
                                 */
                                readonly number_limited?: boolean;
                                /**
                                 * @description (numbers_only_text) The type of limit on values entered for a number option.
                                 *
                                 * @example lowest
                                 * @enum {string}
                                 */
                                readonly number_limit_mode?: "lowest" | "highest" | "range";
                                /**
                                 * @description (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
                                 *
                                 * @example 100
                                 */
                                readonly number_lowest_value?: number;
                                /** @description (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
                                 *      */
                                readonly number_highest_value?: number;
                                /**
                                 * @description (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
                                 *
                                 * @example false
                                 */
                                readonly number_integers_only?: boolean;
                                /** @description (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
                                 *      */
                                readonly product_list_adjusts_inventory?: boolean;
                                /** @description (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
                                 *      */
                                readonly product_list_adjusts_pricing?: boolean;
                                /**
                                 * @description (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
                                 *
                                 * @example weight
                                 * @enum {string}
                                 */
                                readonly product_list_shipping_calc?: "none" | "weight" | "package";
                            };
                            /**
                             * @description Order in which the option is displayed on the storefront.
                             * @example 1
                             */
                            readonly sort_order?: number;
                            readonly option_values?: readonly ({
                                /**
                                 * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                                 *
                                 * @example false
                                 */
                                readonly is_default?: boolean;
                                /**
                                 * @description The text display identifying the value on the storefront. Required in a /POST.
                                 *
                                 * @example Green
                                 */
                                readonly label: string;
                                /**
                                 * @description The order in which the value will be displayed on the product page. Required in a /POST.
                                 *
                                 * @example 0
                                 */
                                readonly sort_order: number;
                                /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
                                 *      */
                                readonly value_data?: Record<string, unknown>;
                            } & {
                                /** @description The unique numeric ID of the value; increments sequentially.
                                 *      */
                                readonly id?: number;
                            })[];
                            /** @description Publicly available image url */
                            readonly image_url?: string;
                        } & {
                            /**
                             * @description The unique option name, auto-generated from the display name, a timestamp, and the product ID.
                             *
                             * @example Add-a-$5-Donation1535042499-187
                             */
                            readonly name?: string;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The `Option` was in conflict with another option. This is the result of duplicate unique fields, such as `name`.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
            /** @description The `Option` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly deleteProductVariantOption: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Option`.
                 *      */
                readonly option_id: components["parameters"]["OptionIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getProductVariantOptionValues: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Option`.
                 *      */
                readonly option_id: components["parameters"]["OptionIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": [
                     *         {
                     *           "id": 174,
                     *           "label": "Beige",
                     *           "sort_order": 1,
                     *           "value_data": {
                     *             "colors": [
                     *               "#FAFAEB"
                     *             ]
                     *           },
                     *           "is_default": false
                     *         },
                     *         {
                     *           "id": 175,
                     *           "label": "Grey",
                     *           "sort_order": 2,
                     *           "value_data": {
                     *             "colors": [
                     *               "#BDBDBD"
                     *             ]
                     *           },
                     *           "is_default": false
                     *         },
                     *         {
                     *           "id": 176,
                     *           "label": "Black",
                     *           "sort_order": 3,
                     *           "value_data": {
                     *             "colors": [
                     *               "#000000"
                     *             ]
                     *           },
                     *           "is_default": false
                     *         },
                     *         {
                     *           "id": 189,
                     *           "label": "Black-Walnut",
                     *           "sort_order": 4,
                     *           "value_data": {
                     *             "colors": [
                     *               "#e80ee8"
                     *             ]
                     *           },
                     *           "is_default": false
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "total": 4,
                     *           "count": 4,
                     *           "per_page": 50,
                     *           "current_page": 1,
                     *           "total_pages": 1,
                     *           "links": {
                     *             "current": "?page=1&limit=50"
                     *           }
                     *         }
                     *       }
                     *     } */
                    readonly "application/json": {
                        readonly data?: readonly ({
                            /**
                             * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                             *
                             * @example false
                             */
                            readonly is_default?: boolean;
                            /**
                             * @description The text display identifying the value on the storefront. Required in a /POST.
                             *
                             * @example Green
                             */
                            readonly label: string;
                            /**
                             * @description The order in which the value will be displayed on the product page. Required in a /POST.
                             *
                             * @example 0
                             */
                            readonly sort_order: number;
                            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
                             *      */
                            readonly value_data?: Record<string, unknown>;
                        } & {
                            /** @description The unique numeric ID of the value; increments sequentially.
                             *      */
                            readonly id?: number;
                        })[];
                        readonly meta?: components["schemas"]["metaCollection_Full"];
                    };
                };
            };
        };
    };
    readonly createProductVariantOptionValue: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Option`.
                 *      */
                readonly option_id: components["parameters"]["OptionIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                     *
                     * @example false
                     */
                    readonly is_default?: boolean;
                    /**
                     * @description The text display identifying the value on the storefront. Required in a /POST.
                     *
                     * @example Green
                     */
                    readonly label: string;
                    /**
                     * @description The order in which the value will be displayed on the product page. Required in a /POST.
                     *
                     * @example 0
                     */
                    readonly sort_order: number;
                    /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
                     *      */
                    readonly value_data?: Record<string, unknown>;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 44,
                     *         "label": "Pick a color",
                     *         "sort_order": 9,
                     *         "value_data": {
                     *           "colors": [
                     *             "#123c91, #FFFF00, #397a44"
                     *           ]
                     *         },
                     *         "is_default": false
                     *       }
                     *     } */
                    readonly "application/json": {
                        /** Option Value */
                        readonly data?: {
                            /**
                             * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                             *
                             * @example false
                             */
                            readonly is_default?: boolean;
                            /**
                             * @description The text display identifying the value on the storefront. Required in a /POST.
                             *
                             * @example Green
                             */
                            readonly label: string;
                            /**
                             * @description The order in which the value will be displayed on the product page. Required in a /POST.
                             *
                             * @example 0
                             */
                            readonly sort_order: number;
                            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
                             *      */
                            readonly value_data?: Record<string, unknown>;
                        } & {
                            /** @description The unique numeric ID of the value; increments sequentially.
                             *      */
                            readonly id?: number;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The `OptionValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly getProductVariantOptionValue: {
        readonly parameters: {
            readonly query?: {
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParam"];
                /** @description Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. */
                readonly exclude_fields?: components["parameters"]["ExcludeFieldsParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Option`.
                 *      */
                readonly option_id: components["parameters"]["OptionIdParam"];
                /** @description The ID of the `Modifier/Option Value`.
                 *      */
                readonly value_id: components["parameters"]["ValueIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 44,
                     *         "label": "Pick a color",
                     *         "sort_order": 9,
                     *         "value_data": {
                     *           "colors": [
                     *             "#123c91, #FFFF00, #397a44"
                     *           ]
                     *         },
                     *         "is_default": false
                     *       }
                     *     } */
                    readonly "application/json": {
                        /** Option Value */
                        readonly data?: {
                            /**
                             * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                             *
                             * @example false
                             */
                            readonly is_default?: boolean;
                            /**
                             * @description The text display identifying the value on the storefront. Required in a /POST.
                             *
                             * @example Green
                             */
                            readonly label: string;
                            /**
                             * @description The order in which the value will be displayed on the product page. Required in a /POST.
                             *
                             * @example 0
                             */
                            readonly sort_order: number;
                            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
                             *      */
                            readonly value_data?: Record<string, unknown>;
                        } & {
                            /** @description The unique numeric ID of the value; increments sequentially.
                             *      */
                            readonly id?: number;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
        };
    };
    readonly updateProductVariantOptionValue: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Option`.
                 *      */
                readonly option_id: components["parameters"]["OptionIdParam"];
                /** @description The ID of the `Modifier/Option Value`.
                 *      */
                readonly value_id: components["parameters"]["ValueIdParam"];
            };
            readonly cookie?: never;
        };
        /** @description A BigCommerce `OptionValue` object.
         *      */
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                     *
                     * @example false
                     */
                    readonly is_default?: boolean;
                    /**
                     * @description The text display identifying the value on the storefront. Required in a /POST.
                     *
                     * @example Green
                     */
                    readonly label: string;
                    /**
                     * @description The order in which the value will be displayed on the product page. Required in a /POST.
                     *
                     * @example 0
                     */
                    readonly sort_order: number;
                    /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
                     *      */
                    readonly value_data?: Record<string, unknown>;
                } & {
                    /** @description The unique numeric ID of the value; increments sequentially.
                     *      */
                    readonly id?: number;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "data": {
                     *         "id": 44,
                     *         "label": "Pick a color",
                     *         "sort_order": 9,
                     *         "value_data": {
                     *           "colors": [
                     *             "#123c91, #FFFF00, #397a44"
                     *           ]
                     *         },
                     *         "is_default": false
                     *       }
                     *     } */
                    readonly "application/json": {
                        /** Option Value */
                        readonly data?: {
                            /**
                             * @description The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
                             *
                             * @example false
                             */
                            readonly is_default?: boolean;
                            /**
                             * @description The text display identifying the value on the storefront. Required in a /POST.
                             *
                             * @example Green
                             */
                            readonly label: string;
                            /**
                             * @description The order in which the value will be displayed on the product page. Required in a /POST.
                             *
                             * @example 0
                             */
                            readonly sort_order: number;
                            /** @description Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
                             *      */
                            readonly value_data?: Record<string, unknown>;
                        } & {
                            /** @description The unique numeric ID of the value; increments sequentially.
                             *      */
                            readonly id?: number;
                        };
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description No option(s) were found with this query. */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The `OptionValue` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** Detailed Errors */
                        readonly errors?: {
                            readonly [key: string]: unknown;
                        };
                        readonly instance?: string;
                        /** @description The HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly deleteProductVariantOptionValue: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Product` to which the resource belongs.
                 *      */
                readonly product_id: components["parameters"]["ProductIdParam"];
                /** @description The ID of the `Option`.
                 *      */
                readonly option_id: components["parameters"]["OptionIdParam"];
                /** @description The ID of the `Modifier/Option Value`.
                 *      */
                readonly value_id: components["parameters"]["ValueIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
