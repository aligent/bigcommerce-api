/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/orders/{order_id}/payment_actions/capture": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Capture order payment
         * @description Capture the payment for an order. When there are no payment method validation issues, the capture process is successful, the `payment_status` updates to `capture pending`, and the payment request is scheduled. The payment request itself occurs asynchronously.
         *     Requires at least one of the following scopes:
         *     * `store_v2_orders`
         *     * `store_v2_transactions`
         */
        readonly post: operations["captureOrderPayment"];
    };
    readonly "/orders/{order_id}/payment_actions/void": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Void
         * @description Void the payment for an order. When there are no payment method validation issues, the void process is successful, the `payment_status` updates to `void pending`, and the void payment request is scheduled. The payment request itself occurs asynchronously.
         *
         *     Requires at least one of the following scopes:
         *     * `store_v2_orders`
         *     * `store_v2_transactions`
         */
        readonly post: operations["voidOrderPayment"];
    };
    readonly "/orders/{order_id}/transactions": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get Transactions
         * @description Returns an **order ºs** transactions.
         *
         *     **Usage Notes**
         *     * Depending on the payment method, different information will be available (not all payment gateways return full card or fraud detail).
         *
         *
         *     Requires at least one of the following scopes:
         *     * `store_v2_transactions_read_only`
         *     * `store_v2_transactions`
         */
        readonly get: operations["getOrderTransactions"];
    };
    readonly "/orders/{order_id}/payment_actions/refund_quotes": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Create a Refund Quote
         * @description Calculate the tax amount, total refund amount and get available payment options for an order refund by providing items and costs or quantities to refund.
         *
         *     Requires at least one of the following scopes:
         *     * `store_v2_orders`
         *     * `store_v2_transactions`
         *
         *     **Notes:**
         *     * Create a refund quote before performing a refund request to best avoid a `422` error. Check the refund quote's response body for the `refund_methods` array. The `amount` given in the array must match the `amount` used in the refund request body.
         *     * Order refunds should be processed sequentially. Processing multiple concurrent refunds on the same order is not yet supported.
         */
        readonly post: operations["createOrderRefundQuotes"];
    };
    readonly "/orders/{order_id}/payment_actions/refunds": {
        readonly parameters: {
            readonly query?: {
                /** @description Filters by refund payment using the BigCommerce `transaction_id`. */
                readonly transaction_id?: string;
            };
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get Refunds for Order
         * @description Returns a list of refunds ordered by refund ID in ascending order for the given order.
         *
         *     Requires at least one of the following scopes:
         *     * `store_v2_transactions_read_only`
         *     * `store_v2_transactions`
         *     * `store_v2_orders_read_only`
         *     * `store_v2_orders`
         */
        readonly get: operations["getOrderRefunds"];
        /**
         * Create a Refund
         * @description Creates a refund. When there are no payment method validation issues, the refund process is successful and the refund payment request is scheduled. The payment request itself occurs asynchronously.
         *
         *     Requires at least one of the following scopes:
         *     * `store_v2_orders`
         *     * `store_v2_transactions`
         *
         *     **Note:**
         *     Order refunds should be processed sequentially. Processing multiple concurrent refunds on the same order are not yet supported.
         */
        readonly post: operations["createOrderRefund"];
    };
    readonly "/orders/payment_actions/refunds/{refund_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description Refund ID. */
                readonly refund_id: number;
            };
            readonly cookie?: never;
        };
        /**
         * Get a Refund
         * @description Returns a refund by refund ID.
         */
        readonly get: operations["getOrderRefund"];
    };
    readonly "/orders/payment_actions/refunds": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Refunds
         * @description Returns a list of refunds ordered by refund ID in ascending order.
         *
         *     Requires at least one of the following scopes:
         *     * `store_v2_transactions_read_only`
         *     * `store_v2_transactions`
         *     * `store_v2_orders_read_only`
         *     * `store_v2_orders`
         */
        readonly get: operations["getOrdersRefunds"];
    };
    readonly "/orders/{order_id}/metafields": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
            };
            readonly cookie?: never;
        };
        /**
         * Get Order Metafields
         * @description Gets a `Metafield` object list, by `order_id`.
         *
         *     The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID.
         *
         */
        readonly get: operations["getOrderMetafields"];
        /**
         * Create Metafields
         * @description Creates an order `Metafield`.
         *
         *     The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID.
         */
        readonly post: operations["createOrderMetafield"];
    };
    readonly "/orders/{order_id}/metafields/{metafield_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafield_id: number;
            };
            readonly cookie?: never;
        };
        /**
         * Get a Metafield
         * @description Gets a `Metafield`, by `order_id`.
         *
         */
        readonly get: operations["getOrderMetafield"];
        /**
         * Update a Metafield
         * @description Updates a `Metafield` object.
         *
         *     The maximum number of metafields allowed on each order, product, category, variant, or brand is 250 per client ID.
         */
        readonly put: operations["updateOrderMetafield"];
        /**
         * Delete a Metafield
         * @description Deletes a `Metafield`.
         *
         */
        readonly delete: operations["deleteOrderMetafield"];
    };
    readonly "/orders/settings": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Global Order Settings
         * @description Returns global order settings.
         */
        readonly get: operations["getGlobalOrderSettings"];
        /**
         * Update Global Order Settings
         * @description Updates global order settings.
         */
        readonly put: operations["updateGlobalOrderSettings"];
    };
    readonly "/orders/settings/channels/{channel_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description Channel ID */
                readonly channel_id: string;
            };
            readonly cookie?: never;
        };
        /**
         * Get Channel Order Settings
         * @description Returns order settings for a specific channel.
         */
        readonly get: operations["getChannelOrderSettings"];
        /**
         * Update Channel Order Settings
         * @description Updates order settings for a specific channel.
         *
         *      **Note:** You must override both notifications `email_addresses` or neither, i.e. either both notification `email_addresses` are an array of valid email addresses, or both `email_addresses` must be null. You may not have one set to an array of addresses and the other set to `null`.
         */
        readonly put: operations["updateChannelOrderSettings"];
    };
    readonly "/orders/metafields": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Order Metafields
         * @description Get all order metafields.
         */
        readonly get: operations["getOrdersMetafields"];
        /**
         * Update multiple Metafields
         * @description Update multiple metafields.
         */
        readonly put: operations["updateOrdersMetafields"];
        /**
         * Create multiple Metafields
         * @description Create multiple metafields.
         */
        readonly post: operations["createOrdersMetafields"];
        /**
         * Delete Multiple Metafields
         * @description Delete all order metafields.
         */
        readonly delete: operations["deleteOrdersMetafields"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        readonly GetReturnsSettings: {
            readonly reasons?: readonly components["schemas"]["Reason"][];
            readonly preferred_outcomes?: readonly components["schemas"]["PreferredOutcome"][];
        };
        readonly Reason: {
            /** Format: int64 */
            readonly id?: number;
            /** @description A description of the reason. */
            readonly label?: string;
            /** @description Indicates whether or not the reason has been archived. */
            readonly is_archived?: boolean;
        };
        readonly PreferredOutcome: {
            /** Format: int64 */
            readonly id?: number;
            /** @description A description of the outcome. */
            readonly label?: string;
            /** @description Indicates whether or not the outcome has been archived. */
            readonly is_archived?: boolean;
        };
        /** CreateReturnRequest */
        readonly CreateReturnRequest: {
            /** @description A collection of items to be returned. */
            readonly items: readonly components["schemas"]["CreateReturnRequestItem"][];
            /** @description A comment provided to the merchant for review. */
            readonly comment?: string;
        };
        readonly CreateReturnRequestItem: {
            readonly reference_id: components["schemas"]["ItemReferenceId"];
            readonly quantity: number;
            /** Format: int64 */
            readonly preferred_outcome_id: number;
            /** Format: int64 */
            readonly reason_id: number;
        };
        readonly CreateReturn: components["schemas"]["Return_Full"];
        /** @description A view of a return. */
        readonly Return_Full: {
            readonly items?: readonly components["schemas"]["ReturnItem"][];
            /**
             * Format: decimal
             * @description The total price of the items being returned.
             */
            readonly total?: string;
            /**
             * Format: iso-4217
             * @description The transactional currency of the return and the associated order.
             */
            readonly currency?: string;
            readonly customer?: {
                /** Format: int64 */
                readonly id?: number;
                /** Format: email */
                readonly email?: string;
            };
            /** @description A comment provided to the merchant for review. */
            readonly comment?: string;
            readonly status?: components["schemas"]["Status_Full"];
            /** Format: date-time */
            readonly date_modified?: string;
        };
        /** @description A view of a returned item. */
        readonly ReturnItem: {
            /**
             * Format: int64
             * @description The unique identifier of this returned item.
             */
            readonly id?: number;
            readonly reference_id?: components["schemas"]["ItemReferenceId"];
            /** @description The quantity of items for which a return was requested. */
            readonly quantity?: number;
            /**
             * Format: decimal
             * @description The total price of the line item.
             */
            readonly total?: string;
            readonly preferred_outcome?: {
                /**
                 * Format: int64
                 * @description Unique identifier of the preferred outcome.
                 */
                readonly id?: number;
                /** @description A displayable label for the preferred outcome. */
                readonly label?: string;
            };
            readonly reason?: {
                /**
                 * Format: int64
                 * @description Unique identifier of the reason.
                 */
                readonly id?: number;
                /** @description A displayable label for the reason. */
                readonly label?: string;
            };
            readonly received_state?: {
                /** @description The quantity of items marked as received by the merchant. */
                readonly received_quantity?: number;
                /** @description The quantity of items pending receipt by the merchant. */
                readonly pending_quantity?: number;
            };
            readonly review_state?: {
                /** @description The quantity of items approved for return by the merchant. */
                readonly approved_quantity?: number;
                /** @description The quantity of items pending receipt by the merchant. */
                readonly pending_quantity?: number;
                /** @description The quantity of items rejected by the merchant. */
                readonly rejected_quantity?: number;
            };
        };
        /** StatusUpdate_Full */
        readonly StatusUpdate_Full: {
            /**
             * Format: int64
             * @description The ID of the return for which the status should be updated.
             */
            readonly return_id?: number;
            readonly new_status?: components["schemas"]["Status_Full"];
        };
        /**
         * Status_Full
         * @description The status of the return.
         * @enum {string}
         */
        readonly Status_Full: "CLOSED" | "OPEN" | "REMOVED";
        /** UpdateReturnStatusesRequest */
        readonly UpdateReturnStatusesRequest: readonly components["schemas"]["StatusUpdate_Full"][];
        readonly UpdateReturnStatuses: readonly {
            /**
             * Format: int64
             * @description The ID of the return for which the status was updated.
             */
            readonly id?: number;
            readonly status?: components["schemas"]["Status_Full"];
        }[];
        readonly Problem: {
            /** @description Status code of the problem. */
            readonly status?: number;
            /** @description A short description of the problem. */
            readonly title?: string;
            /**
             * Format: url
             * @description A resource describing the problem.
             */
            readonly type?: string;
        };
        readonly BatchOperationMeta: {
            /** @description The total number of operations in the batch. */
            readonly total?: number;
            /** @description The number of failed operations in the batch. */
            readonly success?: number;
            /** @description The number of failed operations in the batch. */
            readonly failed?: number;
        };
        /**
         * Pagination
         * @description Data about the response, including pagination and collection totals.
         */
        readonly Pagination: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 36
             */
            readonly total?: number;
            /**
             * @description Total number of items in the collection response.
             *
             * @example 36
             */
            readonly count?: number;
            /**
             * @description The amount of items returned in the collection per page, controlled by the limit parameter.
             *
             * @example 50
             */
            readonly per_page?: number;
            /**
             * @description The page you are currently on within the collection.
             *
             * @example 1
             */
            readonly current_page?: number;
            /**
             * @description The total number of pages in the collection.
             *
             * @example 1
             */
            readonly total_pages?: number;
            /** @description Pagination links for the previous and next parts of the whole collection.
             *      */
            readonly links?: {
                /** @description Link to the previous page returned in the response.
                 *      */
                readonly previous?: string;
                /**
                 * @description Link to the current page returned in the response.
                 *
                 * @example ?page=1&limit=50
                 */
                readonly current?: string;
                /** @description Link to the next page returned in the response.
                 *      */
                readonly next?: string;
            };
        };
        /** ReceivedItems_Put */
        readonly ReceivedItems_Put: readonly {
            /**
             * Format: int64
             * @description The item ID for updating the received state.
             */
            readonly item_id: number;
            /** @description The quantity of items to be marked as received. */
            readonly received_quantity: number;
            /** @description The quantity of items to be marked as pending. */
            readonly pending_quantity: number;
        }[];
        /** ReceivedItems_Base */
        readonly ReceivedItems_Base: readonly {
            /**
             * Format: int64
             * @description The ID of the item for which received item status was updated.
             */
            readonly item_id?: number;
            /**
             * Format: int64
             * @description The quantity of items marked as received.
             */
            readonly received_quantity?: number;
            /**
             * Format: int64
             * @description The quantity of items marked as pending.
             */
            readonly pending_quantity?: number;
        }[];
        /** ReviewedItems_Put */
        readonly ReviewedItems_Put: readonly {
            /**
             * Format: int64
             * @description The item ID for updating the reviewed state.
             */
            readonly item_id: number;
            /** @description The quantity of items to be marked as authorized. */
            readonly authorized_quantity: number;
            /** @description The quantity of items to be marked as rejected. */
            readonly rejected_quantity: number;
            /** @description The quantity of items to be marked as pending. */
            readonly pending_quantity: number;
        }[];
        /** ReviewedItems_Base */
        readonly ReviewedItems_Base: readonly {
            /**
             * Format: int64
             * @description The ID of the item for which reviewed status was updated.
             */
            readonly item_id?: number;
            /**
             * Format: int64
             * @description The quantity of items marked as authorized.
             */
            readonly authorized_quantity?: number;
            /**
             * Format: int64
             * @description The quantity of items marked as rejected.
             */
            readonly rejected_quantity?: number;
            /**
             * Format: int64
             * @description The quantity of items marked as pending.
             */
            readonly pending_quantity?: number;
        }[];
        readonly GetReturnableItems: readonly {
            readonly reference_id?: components["schemas"]["ItemReferenceId"];
            /** @description The name of the order product. */
            readonly name?: string;
            /** @description The maximum quantity of this item that can presently be requested for return. */
            readonly returnable_quantity?: number;
            /**
             * Format: decimal
             * @description The total price of this line item.
             */
            readonly total?: string;
            /** @description A collection of options configured for the order product. */
            readonly options?: readonly {
                /** @description A displayable name for the option. */
                readonly display_name?: string;
                /** @description A displayable value for the option. */
                readonly display_value?: string;
            }[];
        }[];
        readonly ItemReferenceId: {
            /**
             * @description The reference type.
             * @enum {string}
             */
            readonly type: "ORDER_PRODUCT";
            /** @description The value identifying the returned item. */
            readonly value: string;
        };
        /**
         * Collection Meta
         * @description Data about the response, including pagination and collection totals.
         */
        readonly CollectionMeta: {
            /**
             * Pagination
             * @description Data about the response, including pagination and collection totals.
             */
            readonly pagination?: {
                /**
                 * @description Total number of items in the result set.
                 *
                 * @example 36
                 */
                readonly total?: number;
                /**
                 * @description Total number of items in the collection response.
                 *
                 * @example 36
                 */
                readonly count?: number;
                /**
                 * @description The amount of items returned in the collection per page, controlled by the limit parameter.
                 *
                 * @example 50
                 */
                readonly per_page?: number;
                /**
                 * @description The page you are currently on within the collection.
                 *
                 * @example 1
                 */
                readonly current_page?: number;
                /**
                 * @description The total number of pages in the collection.
                 *
                 * @example 1
                 */
                readonly total_pages?: number;
                /** @description Pagination links for the previous and next parts of the whole collection.
                 *      */
                readonly links?: {
                    /** @description Link to the previous page returned in the response.
                     *      */
                    readonly previous?: string;
                    /**
                     * @description Link to the current page returned in the response.
                     *
                     * @example ?page=1&limit=50
                     */
                    readonly current?: string;
                    /** @description Link to the next page returned in the response.
                     *      */
                    readonly next?: string;
                };
            };
        };
        /** Meta */
        readonly Meta: {
            /**
             * Pagination
             * @description Data about the response, including pagination and collection totals.
             */
            readonly meta?: {
                /**
                 * @description Total number of items in the result set.
                 *
                 * @example 36
                 */
                readonly total?: number;
                /**
                 * @description Total number of items in the collection response.
                 *
                 * @example 36
                 */
                readonly count?: number;
                /**
                 * @description The amount of items returned in the collection per page, controlled by the limit parameter.
                 *
                 * @example 50
                 */
                readonly per_page?: number;
                /**
                 * @description The page you are currently on within the collection.
                 *
                 * @example 1
                 */
                readonly current_page?: number;
                /**
                 * @description The total number of pages in the collection.
                 *
                 * @example 1
                 */
                readonly total_pages?: number;
                /** @description Pagination links for the previous and next parts of the whole collection.
                 *      */
                readonly links?: {
                    /** @description Link to the previous page returned in the response.
                     *      */
                    readonly previous?: string;
                    /**
                     * @description Link to the current page returned in the response.
                     *
                     * @example ?page=1&limit=50
                     */
                    readonly current?: string;
                    /** @description Link to the next page returned in the response.
                     *      */
                    readonly next?: string;
                };
            };
        };
        /** ErrorResponse */
        readonly ErrorResponse: components["schemas"]["error_Base"] & {
            /** DetailedErrors */
            readonly errors?: {
                readonly [key: string]: unknown;
            };
        };
        /** DetailedErrors */
        readonly DetailedErrors: {
            readonly [key: string]: unknown;
        };
        /** Transaction_Post */
        readonly Transaction_Post: {
            /**
             * @description Store event that created the transaction.
             *
             * @enum {string}
             */
            readonly event: "purchase" | "authorization" | "capture" | "refund" | "void" | "pending" | "settled";
            /**
             * @description The payment method: `credit_card` - a credit card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site (e.g., PayPal); `offline` - payment method that takes place offline.
             *
             * @enum {string}
             */
            readonly method: "credit_card" | "electronic_wallet" | "gift_certificate" | "store_credit" | "apple_pay_card" | "apple_pay_token" | "bigpay_token" | "token" | "custom" | "offsite" | "offline" | "nonce";
            /**
             * Format: float
             * @description Amount of money in the transaction.
             *
             */
            readonly amount: number;
            /**
             * Format: ISO-4217
             * @description Currency used for the transaction.
             *
             */
            readonly currency: string;
            /**
             * @description The payment gateway, where applicable.
             *
             * @enum {string}
             */
            readonly gateway: "2checkout" | "adyen" | "amazon" | "authorizenet" | "bankdeposit" | "braintree" | "cheque" | "cod" | "custom" | "firstdatagge4" | "giftcertificate" | "hps" | "instore" | "klarna" | "migs" | "moneyorder" | "nmi" | "paypalexpress" | "paypalpaymentsprous" | "paypalpaymentsprouk" | "plugnpay" | "qbmsv2" | "securenet" | "square" | "storecredit" | "stripe" | "testgateway" | "usaepay";
            /** @description The transaction ID returned by the payment gateway for this transaction item.
             *      */
            readonly gateway_transaction_id?: string;
            /**
             * Format: date-time
             * @description The date/time of the transaction.
             *
             */
            readonly date_created?: string;
            /** @description True if the transaction performed was a test, or if the gateway is in test mode.
             *      */
            readonly test?: boolean;
            /**
             * @description Status of the transaction.
             *
             * @enum {string}
             */
            readonly status?: "ok" | "error";
            /** @description Result of gateway fraud review, if any. Default is `false`.
             *      */
            readonly fraud_review?: boolean;
            /** @description Identifier for an existing transaction upon which this transaction acts.
             *      */
            readonly reference_transaction_id?: number;
            readonly offline?: components["schemas"]["Offline"];
            readonly custom?: components["schemas"]["Custom"];
        };
        /**
         * Not Found
         * @description Error payload for the BigCommerce API.
         */
        readonly NotFound: {
            /** @description 404 HTTP status code.
             *      */
            readonly status?: number;
            /** @description The resource at that URL is not found. */
            readonly title?: string;
            readonly type?: string;
            /** @description Empty for 200 responses. */
            readonly errors?: readonly unknown[];
        };
        readonly Transaction: {
            /**
             * @description Store event that created the transaction.
             *
             * @enum {string}
             */
            readonly event: "purchase" | "authorization" | "capture" | "refund" | "void" | "pending" | "settled";
            /**
             * @description The payment method: `credit_card` - a credit card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site; `offline` - payment method that takes place offline.
             *
             * @enum {string}
             */
            readonly method: "credit_card" | "electronic_wallet" | "gift_certificate" | "store_credit" | "apple_pay_card" | "bigpay_token" | "apple_pay_token" | "token" | "custom" | "offsite" | "offline" | "nonce";
            /**
             * Format: float
             * @description Amount of money in the transaction.
             *
             */
            readonly amount: number;
            /**
             * Format: ISO-4217
             * @description Currency used for the transaction.
             *
             */
            readonly currency: string;
            /**
             * @description The payment gateway, where applicable.
             *
             * @enum {string}
             */
            readonly gateway: "2checkout" | "adyen" | "amazon" | "authorizenet" | "bankdeposit" | "braintree" | "cheque" | "cod" | "custom" | "firstdatagge4" | "giftcertificate" | "hps" | "instore" | "klarna" | "migs" | "moneyorder" | "nmi" | "paypalexpress" | "paypalpaymentsprous" | "paypalpaymentsprouk" | "plugnpay" | "qbmsv2" | "securenet" | "square" | "storecredit" | "stripe" | "testgateway" | "usaepay";
            /** @description The transaction ID returned by the payment gateway for this transaction item.
             *      */
            readonly gateway_transaction_id?: string;
            /** @description True if the transaction performed was a test, or if the gateway is in test mode.
             *      */
            readonly test?: boolean;
            /**
             * @description Status of the transaction.
             *
             * @enum {string}
             */
            readonly status?: "ok" | "error";
            /** @description Result of gateway fraud review, if any. Default is `false`.
             *      */
            readonly fraud_review?: boolean;
            /** @description Identifier for an existing transaction upon which this transaction acts.
             *      */
            readonly reference_transaction_id?: number;
            /**
             * Offline
             * @description Offline payment (e.g., check or purchase order).
             */
            readonly offline?: {
                /** @description Display name for the offline payment.
                 *      */
                readonly display_name?: string;
            } | null;
            /**
             * Custom
             * @description Custom payment from manual order.
             */
            readonly custom?: {
                /** @description Text entered for the payment method in the control panel.
                 *      */
                readonly payment_method?: string;
            } | null;
            /** @description The payment method ID used for this transaction.
             *      */
            readonly payment_method_id?: string;
        } & {
            /** @description Unique identifier for the transaction.
             *      */
            readonly id?: number;
            /** @description Identifier for the BigCommerce Order with which this transaction is associated.
             *      */
            readonly order_id?: string;
            /**
             * Format: date-time
             * @description The date/time of the transaction in ISO-8601 format.
             *
             */
            readonly date_created?: string;
            /** @description This field contains internal BigPay token for stored card that is then mapped to the actual third-party token. We currently do not offer a way to get third party tokens.These tokens are read-only and do not return any information about the payment. */
            readonly payment_instrument_token?: string | null;
            /**
             * AVS Results
             * @description Address Verification Service (AVS) result from the payment gateway.
             */
            readonly avs_result?: {
                /** @description AVS code. */
                readonly code?: string;
                /** @description AVS message. */
                readonly message?: string;
                /** @description AVS Code for street matching result. */
                readonly street_match?: string;
                /** @description AVS Code for postal matching result. */
                readonly postal_match?: string;
            };
            /**
             * CVV Result
             * @description Card Verification Value result from the payment gateway.
             */
            readonly cvv_result?: {
                /** @description CVV code. */
                readonly code?: string;
                /** @description CVV message. */
                readonly message?: string;
            };
            readonly credit_card?: components["schemas"]["CreditCard"];
            /**
             * Gift Certificate
             * @description A gift-certificate model.
             */
            readonly gift_certificate?: {
                /**
                 * @description The gift-certificate code.
                 *
                 * @example MB345
                 */
                readonly code?: string;
                /**
                 * Format: float
                 * @description The balance on a gift certificate when it was purchased.
                 *
                 * @example 100
                 */
                readonly original_balance?: number;
                /**
                 * Format: float
                 * @description The balance on a gift certificate at the time of this purchase.
                 *
                 * @example 100
                 */
                readonly starting_balance?: number;
                /**
                 * Format: float
                 * @description The remaining balance on a gift certificate.
                 *
                 * @example 35.42
                 */
                readonly remaining_balance?: number;
                /**
                 * @description The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired.
                 *
                 * @enum {string}
                 */
                readonly status?: "active" | "pending" | "disabled" | "expired";
            } | null;
            /** @description A store credit model.
             *      */
            readonly store_credit?: {
                /**
                 * Format: float
                 * @description Remaining balance of shopper ºs store credit.
                 *
                 * @example 35.42
                 */
                readonly remaining_balance?: number;
            } | null;
            /**
             * Custom Payment Provider Field
             * @description Fields for custom payment providers.
             */
            readonly custom_provider_field_result?: {
                /** @description The receipt number associated with the transaction.
                 *      */
                readonly receipt_number?: string | null;
                /** @description Authorization code for the transaction.
                 *      */
                readonly authorization_code?: string | null;
                /** @description The fraud response associated with the transaction.
                 *      */
                readonly fraud_response?: string | null;
                /**
                 * Format: float
                 * @description The amount received for the transaction, divided by 100 to convert to the correct currency format.
                 *
                 */
                readonly amount_received?: number | null;
            } | null;
        };
        /**
         * Credit Card
         * @description A credit card model.
         */
        readonly CreditCard: {
            /**
             * @description **Allowed values**: alelo, alia, american_express, cabal, carnet, dankort, diners_club, discover, elo, forbrugsforeningen, jcb, maestro, master, naranja, sodexo, unionpay, visa, vr
             * @enum {string}
             */
            readonly card_type?: "alelo" | "alia" | "american_express" | "cabal" | "carnet" | "dankort" | "diners_club" | "discover" | "elo" | "forbrugsforeningen" | "jcb" | "maestro" | "master" | "naranja" | "sodexo" | "unionpay" | "visa" | "vr";
            /** @description The IIN of a credit card number.
             *      */
            readonly card_iin?: string;
            /** @description The last 4 digits of a credit card number.
             *      */
            readonly card_last4?: string;
            /** @description The expiry month of a credit card.
             *      */
            readonly card_expiry_month?: number;
            /** @description The expiry year of a credit card.
             *      */
            readonly card_expiry_year?: number;
        };
        /** @description A store credit model.
         *      */
        readonly StoreCredit: {
            /**
             * Format: float
             * @description Remaining balance of shopper ºs store credit.
             *
             * @example 35.42
             */
            readonly remaining_balance?: number;
        };
        /**
         * Custom
         * @description Custom payment from manual order.
         */
        readonly Custom: {
            /** @description Text entered for the payment method in the control panel.
             *      */
            readonly payment_method?: string;
        };
        /**
         * Offline
         * @description Offline payment (e.g., check or purchase order).
         */
        readonly Offline: {
            /** @description Display name for the offline payment.
             *      */
            readonly display_name?: string;
        };
        /**
         * Gift Certificate
         * @description A gift-certificate model.
         */
        readonly GiftCertificate: {
            /**
             * @description The gift-certificate code.
             *
             * @example MB345
             */
            readonly code?: string;
            /**
             * Format: float
             * @description The balance on a gift certificate when it was purchased.
             *
             * @example 100
             */
            readonly original_balance?: number;
            /**
             * Format: float
             * @description The balance on a gift certificate at the time of this purchase.
             *
             * @example 100
             */
            readonly starting_balance?: number;
            /**
             * Format: float
             * @description The remaining balance on a gift certificate.
             *
             * @example 35.42
             */
            readonly remaining_balance?: number;
            /**
             * @description The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired.
             *
             * @enum {string}
             */
            readonly status?: "active" | "pending" | "disabled" | "expired";
        };
        /**
         * AVS Results
         * @description Address Verification Service (AVS) result from the payment gateway.
         */
        readonly AVSResult: {
            /** @description AVS code. */
            readonly code?: string;
            /** @description AVS message. */
            readonly message?: string;
            /** @description AVS Code for street matching result. */
            readonly street_match?: string;
            /** @description AVS Code for postal matching result. */
            readonly postal_match?: string;
        };
        /**
         * CVV Result
         * @description Card Verification Value result from the payment gateway.
         */
        readonly CVVResult: {
            /** @description CVV code. */
            readonly code?: string;
            /** @description CVV message. */
            readonly message?: string;
        };
        /**
         * No Content
         * @description No-content response for the BigCommerce API.
         */
        readonly NoContent: {
            /** @description 204 HTTP status code.
             *      */
            readonly status?: number;
            /** @description The error title describing the situation. */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly metaEmpty_Full: {
            readonly [key: string]: unknown;
        };
        /** pagination_Full */
        readonly pagination_Full: {
            /**
             * Format: int32
             * @description Total number of items in the result set.
             */
            readonly total?: number;
            /**
             * Format: int32
             * @description Total number of items in the collection response.
             */
            readonly count?: number;
            /**
             * Format: int32
             * @description The amount of items returned in the collection per page, controlled by the limit parameter.
             */
            readonly per_page?: number;
            /**
             * Format: int32
             * @description The page you are currently on within the collection.
             */
            readonly current_page?: number;
            /**
             * Format: int32
             * @description The total number of pages in the collection.
             */
            readonly total_pages?: number;
            readonly links?: components["schemas"]["links_Full"];
        };
        /** metaCollection_Full */
        readonly metaCollection_Full: {
            readonly pagination?: components["schemas"]["pagination_Full"];
        };
        /** links_Full */
        readonly links_Full: {
            /** @description Link to the previous page returned in the response.
             *      */
            readonly previous?: string;
            /**
             * @description Link to the current page returned in the response.
             *
             * @example ?page=1&limit=50
             */
            readonly current?: string;
            /** @description Link to the next page returned in the response.
             *      */
            readonly next?: string;
        };
        /**
         * error_Base
         * @description Error payload for the BigCommerce API.
         */
        readonly error_Base: {
            /** @description The HTTP status code.
             *      */
            readonly status?: number;
            /** @description The error title describing the particular error.
             *      */
            readonly title?: string;
            readonly type?: string;
        };
        /** errorDetailed_Full */
        readonly errorDetailed_Full: {
            /** DetailedErrors */
            readonly errors?: {
                readonly [key: string]: unknown;
            };
        };
        /**
         * Refund Quotes Request - BATCH
         * @description Request body for batch refund quotes.
         */
        readonly PostRefundQuotesRequest: readonly components["schemas"]["RefundQuote_Post"][];
        /**
         * RefundQuote_Post
         * @description Request body for refund quotes.
         */
        readonly RefundQuote_Post: components["schemas"]["RefundQuote_ItemsRefund"] | components["schemas"]["RefundQuote_TaxAdjustmentAmount"];
        /** RefundQuote_Full */
        readonly RefundQuote_Full: {
            /** @description ID of the order to be refunded. */
            readonly order_id?: number;
            readonly total_refund_amount?: components["schemas"]["Amount"];
            /** @example 1.95 */
            readonly total_refund_tax_amount?: number;
            /** @example 1.99 */
            readonly order_level_refund_amount?: number;
            /** @description Indicates rounding value to bring `refund_total` to an amount refundable with payment providers (in this case to 2 decimal places). */
            readonly rounding?: number;
            readonly adjustment?: components["schemas"]["AdjustmentAmount"];
            /** @description Indicate if `total_refund_amount` includes tax amount. */
            readonly tax_inclusive?: boolean;
            /** @description An array of available refund methods.
             *
             *     Note that `refund_methods` is an array of refund methods, with each refund method being an array of payment options.
             *
             *     For example, if the order was placed by a combination of store credit and bank deposit the refund methods would be:
             *
             *     ```json
             *     {
             *       "refund_methods": [
             *         [
             *           {
             *             "provider_id": "storecredit",
             *             "provider_description": "Store Credit",
             *             "amount": 119.35,
             *             "offline": false,
             *             "offline_provider": false,
             *             "offline_reason": ""
             *           }
             *         ],
             *         [
             *           {
             *             "provider_id": "custom",
             *             "provider_description": "Custom",
             *             "amount": 119.35,
             *             "offline": true,
             *             "offline_provider": true,
             *             "offline_reason": "This is an offline payment provider."
             *           }
             *         ],
             *         [
             *           {
             *             "provider_id": "bankdeposit",
             *             "provider_description": "Bank Deposit",
             *             "amount": 80.35,
             *             "offline": true,
             *             "offline_provider": true,
             *             "offline_reason": "This is an offline payment provider."
             *           },
             *           {
             *             "provider_id": "storecredit",
             *             "provider_description": "Store Credit",
             *             "amount": 39,
             *             "offline": false,
             *             "offline_provider": false,
             *             "offline_reason": ""
             *           }
             *         ]
             *       ]
             *     }
             *     ```
             *
             *     In this case there are three refund methods available to the merchant:
             *     1. Refund up to the entire order amount to store credit.
             *     2. Mark an amount up to the full order amount as refunded externally, through a provider or means not represented directly in BC ("custom").
             *     3. Refund the amount paid by store credit to store credit, and the amount paid by bank deposit with a manual refund, which will be recorded as being refunded against the bank deposit.
             *      */
            readonly refund_methods?: readonly components["schemas"]["RefundMethod"][];
        };
        /**
         * RefundRequest_Post
         * @description Request body for refund requests.
         */
        readonly RefundRequest_Post: components["schemas"]["RefundRequest_Post_Items"] | components["schemas"]["RefundRequest_Post_TaxAdjustmentAmount"];
        /** Items Refund */
        readonly RefundRequest_Post_Items: {
            readonly items: readonly components["schemas"]["ItemsRefund"][];
            readonly payments: readonly components["schemas"]["PaymentRequest"][];
            readonly merchant_calculated_override?: components["schemas"]["MerchantOverride"];
        };
        /** Tax Adjustment Refund */
        readonly RefundRequest_Post_TaxAdjustmentAmount: {
            readonly tax_adjustment_amount: components["schemas"]["TaxAdjustmentAmount"];
            readonly merchant_calculated_override?: components["schemas"]["MerchantOverride"];
        };
        readonly RefundID_Get: {
            readonly data?: {
                /** @description Refund ID for the returned refund.
                 *      */
                readonly id?: number;
                /** @description Order ID associated with the refund. */
                readonly order_id?: number;
                /** @description Reference to the user ID who created the refund. This is automatically populated by BigCommerce.
                 *      */
                readonly user_id?: number;
                /**
                 * Format: date-time
                 * @description Timestamp of when the refund was created.
                 *
                 */
                readonly created?: string;
                /** @description Reason for refund.
                 *      */
                readonly reason?: string;
                /**
                 * @description A non-negative 2 decimal place rounded value that represents the amount that can be refunded with the correct payment provider(s).
                 *
                 * @example 109.11
                 */
                readonly total_amount?: number;
                /** @description Total tax amount refunded back to the shopper. This can be a negative amount indicating we have collected tax by refunding less to the customer.
                 *      */
                readonly total_tax?: number;
                /** @description Whether refund amount and tax are provided explicitly by merchant override.
                 *      */
                readonly uses_merchant_override_values?: boolean;
                readonly payments?: readonly {
                    /** @description Reference to refund payment ID.
                     *      */
                    readonly id?: number;
                    /** @description Reference to payment provider.
                     *     example: storecredit
                     *      */
                    readonly provider_id?: string;
                    /**
                     * @description A non-negative two decimal place rounded value represents the amount that can be charged/refunded with payment providers.
                     *
                     * @example 109.11
                     */
                    readonly amount?: number;
                    /** @description Indicates whether the payment was offline.
                     *      */
                    readonly offline?: boolean;
                    /** @description Indicates if this payment has been declined by the payment provider.
                     *      */
                    readonly is_declined?: boolean;
                    /** @description Message indicates why the payment was declined.
                     *      */
                    readonly declined_message?: string;
                }[];
                /** @description Array of items refunded. In cases when `tax_refund_adjustment` was used to create the refund, this array will be empty. */
                readonly items?: readonly {
                    /**
                     * @description Type of item that was refunded.
                     *
                     * @enum {string}
                     */
                    readonly item_type?: "PRODUCT" | "GIFT_WRAPPING" | "SHIPPING" | "HANDLING" | "ORDER" | "FEE";
                    /** @description `order_product.id` corresponding to the item_types of PRODUCT, GIFT_WRAPPING. `order_address.id` corresponding to the item_types of SHIPPING, HANDLING. `order.id` corresponding to the item_type of ORDER, FEE.
                     *      */
                    readonly item_id?: number;
                    /** @description Quantity of item refunded. Note: this will only be populated for item_type PRODUCT.
                     *      */
                    readonly quantity?: number;
                    /**
                     * @description A non-negative two decimal place rounded value that represents the amount that can be refunded with the payment provider(s).
                     *
                     * @example 109.11
                     */
                    readonly requested_amount?: string | null;
                    /** @description Reason for refunding an item.
                     *      */
                    readonly reason?: string;
                }[];
            };
            readonly meta?: components["schemas"]["metaEmpty_Full"];
        };
        /**
         * Refunds Request - BATCH
         * @description Request body for batch refunds.
         */
        readonly PostRefundsRequest: readonly components["schemas"]["RefundRequest_Post"][];
        /**
         * FailedQuoteError
         * @description Failed quote response.
         */
        readonly FailedQuoteError: {
            readonly order_id?: number;
            /**
             * @description HTTP status code.
             * @example 422
             */
            readonly status?: number;
            /** @description Details why the request failed. */
            readonly error?: string;
        };
        /** ItemsRefund */
        readonly ItemsRefund: components["schemas"]["QuantityBoundItem"] | components["schemas"]["AmountBoundItem"] | components["schemas"]["TaxExemptItem"] | components["schemas"]["FeeItem"];
        /** Payment Request */
        readonly PaymentRequest: {
            /**
             * @description Reference to payment provider.
             * @example checkout_paypalexpress
             */
            readonly provider_id?: string;
            /**
             * @description Amount refunded with this provider.
             * @example 9.99
             */
            readonly amount?: number;
            /**
             * @description Whether the payment was marked as offline or performed through an online payment service.
             * @example true
             */
            readonly offline?: boolean;
        };
        /** Refund Method */
        readonly RefundMethod: readonly components["schemas"]["PaymentOption"][];
        /**
         * Quantity Bound Item
         * @description Quantity Bound Item
         *
         *     Type of refund item that capture refunding of items in the order that are of type quantity.
         *     * `PRODUCT`
         *     * `GIFT_WRAPPING`
         *
         */
        readonly QuantityBoundItem: {
            /**
             * @description Type of refund.
             * @example PRODUCT
             * @enum {string}
             */
            readonly item_type: "PRODUCT" | "GIFT_WRAPPING";
            /**
             * @description Order Product ID.
             * @example 1
             */
            readonly item_id: number;
            /** @description Array of product refund deductions */
            readonly adjustments?: readonly components["schemas"]["RefundItemAdjustment"][];
            /** @example 3 */
            readonly quantity: number;
            /**
             * @description Reason for refund.
             * @example Wrong size.
             */
            readonly reason?: string;
        };
        /**
         * Refund Item Adjustment
         * @description Use to reduce the amount refunded for an item.
         */
        readonly RefundItemAdjustment: {
            /**
             * Refund Item Adjustment Amount
             * Format: float
             * @description A negative 2 decimal place rounded value to deduct from the amount refunded.
             * @example -10.2
             */
            readonly amount?: number;
            /**
             * @description Description of reason for the adjustment.
             * @example Service fee
             */
            readonly description?: string;
        };
        /**
         * Fee
         * @description Use this field to refund a custom fee at the order level.
         */
        readonly FeeItem: {
            /**
             * @description The type of refund.
             * @example FEE
             * @enum {string}
             */
            readonly item_type?: "FEE";
            /**
             * @description Numeric ID of the fee in the order.
             * @example 1
             */
            readonly item_id?: number;
            readonly amount?: components["schemas"]["Amount"];
            /**
             * @description Reason for the refund.
             * @example Customer requested refund
             */
            readonly reason?: string;
        };
        /**
         * Tax Exempt (Order Level)
         * @description Use this to refund a custom value at the order level. When `item_type` is set to `ORDER`, tax is not re-calculated.
         */
        readonly TaxExemptItem: {
            /**
             * @description The type of refund. When `item_type` is set to `ORDER`, tax is not re-calculated.
             * @example ORDER
             * @enum {string}
             */
            readonly item_type?: "ORDER";
            /**
             * @description Numeric ID of the product in the order.
             * @example 1
             */
            readonly item_id?: number;
            readonly amount?: components["schemas"]["Amount"];
            /** @description Reason for the refund. */
            readonly reason?: string;
        };
        /**
         * Amount Bound Item
         * @description Amount Bound Item
         *
         *     Type of refund item that capture refunding of items in the order that are of type amount.
         *     * `ORDER`
         *     * `SHIPPING`
         *     * `HANDLING`
         *     * `TAX`
         *     * `FEE`
         */
        readonly AmountBoundItem: {
            /**
             * @description Type of refund.
             * @example SHIPPING
             * @enum {string}
             */
            readonly item_type: "ORDER" | "SHIPPING" | "HANDLING" | "TAX" | "FEE";
            /**
             * @description Order address ID.
             * @example 1
             */
            readonly item_id: number;
            readonly amount: components["schemas"]["Amount"];
            /**
             * @description Explanation of refund.
             * @example Customer requested refund
             */
            readonly reason?: string;
        };
        /**
         * Merchant Calculated Override
         * @description Merchant explicitly provided override based on their own calculation.
         *
         *     This override gives merchants the flexibility to
         *     - bypass any tax correction due to tax rate/providers changes between when a customer places an order and a merchant initiates a refund
         *     - use explicit values calculated by external systems (e.g., merchants' own Extended Producer Responsibility or Order Management System)
         *
         *     Note: when using the override, BC internal tax based refund calculation is skipped and therefore order/taxes records are not updated.
         */
        readonly MerchantOverride: {
            readonly total_amount: components["schemas"]["Amount"];
            /** @description Total tax amount refunded back to the shopper. Use 0 value if there is no tax liability change for the refund or tax does not need to be recorded on the refund and would be handled externally. */
            readonly total_tax: number;
        };
        /**
         * Tax Adjustment Amount
         * Format: float
         * @description Amount to be used when tax may have been overcharged for an order, such as when the value for a partial refund is overridden. This amount should be equal to the calculated overcharged value, or should be used with `merchant_calculated_override` to override the value. If not, this will result in a `422` error.
         * @example 1.99
         */
        readonly TaxAdjustmentAmount: number;
        /** Items Refund */
        readonly RefundQuote_ItemsRefund: {
            readonly items: readonly components["schemas"]["ItemsRefund"][];
            readonly merchant_calculated_override?: components["schemas"]["MerchantOverride"];
        };
        /** Tax Adjustment Refund */
        readonly RefundQuote_TaxAdjustmentAmount: {
            readonly tax_adjustment_amount: components["schemas"]["TaxAdjustmentAmount"];
            readonly merchant_calculated_override?: components["schemas"]["MerchantOverride"];
        };
        /** Refund */
        readonly Refund: {
            /** @description Refund resource ID. */
            readonly id?: number;
            /** @description Reference to order ID. */
            readonly order_id?: number;
            /** @description Reference to the user ºs ID who create this refund. This is automatically populated by BigCommerce. */
            readonly user_id?: number;
            /**
             * Format: date-time
             * @description Timestamp of when this refund was created.
             */
            readonly created?: string;
            /** @description Reason for refund. */
            readonly reason?: string;
            readonly total_amount?: components["schemas"]["Amount"];
            /** @description Total tax amount refunded back to the shopper. Note: `order_level_amount` does not affect tax liability. This can be a negative amount indicating we have collected tax by refunding less to the customer. */
            readonly total_tax?: number;
            /** @description Whether refund amount and tax are provided explicitly by merchant override. */
            readonly uses_merchant_override_values?: boolean;
            /** @description Array of items refunded. In cases when `tax_refund_adjustment` was used to create the refund, this array will be empty. */
            readonly items?: readonly components["schemas"]["RefundItem"][];
            /** @description An array of refund payments made to payment providers. */
            readonly payments?: readonly components["schemas"]["RefundPayment"][];
        };
        /** Refund Item */
        readonly RefundItem: {
            /**
             * @description Type of item that was refunded.
             * @enum {string}
             */
            readonly item_type?: "PRODUCT" | "GIFT_WRAPPING" | "SHIPPING" | "HANDLING" | "ORDER" | "FEE";
            /** @description order_product.id corresponding to the item_types of PRODUCT, GIFT_WRAPPING. order_address.id corresponding to the item_types of SHIPPING, HANDLING. order.id corresponding to the item_type of ORDER. */
            readonly item_id?: number;
            /** @description Reason for refunding an item. */
            readonly reason?: string;
            /** @description Quantity of item refunded. Note: this will only be populated for item_type PRODUCT */
            readonly quantity?: number;
            /** @description Adjustments to apply to the refunded amount for an item. Only supported for item_type PRODUCT */
            readonly adjustments?: readonly components["schemas"]["RefundItemAdjustment"][];
            readonly requested_amount?: components["schemas"]["Amount"];
        };
        /** Refund Payment */
        readonly RefundPayment: {
            /** @description Reference to refund payment ID. */
            readonly id?: number;
            /**
             * @description Reference to payment provider.
             * @example storecredit
             */
            readonly provider_id?: string;
            readonly amount?: components["schemas"]["Amount"];
            /** @description Indicate whether payment was offline. */
            readonly offline?: boolean;
            /** @description Indicate if this payment has been declined by payment provider. */
            readonly is_declined?: boolean;
            /** @description Message indicate why payment was declined. */
            readonly declined_message?: string;
            /**
             * @description The BigCommerce `transaction_id`.
             * @example 1234
             */
            readonly transaction_id?: string;
        };
        /**
         * Payment Option
         * @example {
         *       "provider_id": "checkout_paypalexpress",
         *       "provider_description": "Paypal Express",
         *       "amount": 9.99,
         *       "offline": true,
         *       "offline_provider": true,
         *       "offline_reason": "Multiple online refunds are not available."
         *     }
         */
        readonly PaymentOption: {
            /**
             * @description Name of the payment method.
             * @example checkout_paypalexpress
             */
            readonly provider_id?: string;
            /**
             * @description Description for payment provider.
             * @example Paypal Express
             */
            readonly provider_description?: string;
            /**
             * @description Amount to be refunded with this payment provider.
             * @example 9.99
             */
            readonly amount?: number;
            /**
             * @description Indicates the payment must be done offline due to constraints of the payment provider, such as partial refunds not being supported, or it being offline only such as cash on delivery of bank deposit.
             * @example true
             */
            readonly offline?: boolean;
            /**
             * @description Indicates if the payment provider is a strictly offline provider, such as cash on delivery or bank deposit.
             * @example true
             */
            readonly offline_provider?: boolean;
            /**
             * @description Reason the payment option is offline only, if applicable.
             * @example Multiple online refunds are not available
             */
            readonly offline_reason?: string;
        };
        /**
         * Amount
         * Format: float
         * @description A non-negative 2 decimal place rounded value that represents the amount that can be charged/refunded with payment providers. When creating refunds and refund quotes, this field becomes irrelevant when you select PRODUCT or GIFT_WRAPPING for `item_type`.
         * @example 1.99
         */
        readonly Amount: number;
        /**
         * Adjustment Amount
         * Format: float
         * @description A negative or positive 2 decimal place rounded value that represents the difference between the refund amount requested in the refund quote and the actual amount that is refundable on the order. This value is negative when the refund amount requested in the refund quote is more than the total refundable amount. This value is positive when the total refundable amount has increased, e.g. as a result of rounding.
         * @example -10.2
         */
        readonly AdjustmentAmount: number;
        /**
         * MetaRefund
         * @description Describes refund failures, success and totals.
         */
        readonly MetaRefund: {
            readonly failure?: number;
            readonly success?: number;
            readonly total?: number;
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponse: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            readonly meta?: components["schemas"]["CollectionMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponse_POST_PUT: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            /**
             * @description Empty for 200 responses.
             * @example []
             */
            readonly errors?: readonly unknown[];
            readonly meta?: components["schemas"]["BatchOperationMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetafieldResponse: {
            readonly data?: components["schemas"]["Metafield"];
            readonly meta?: components["schemas"]["metaEmpty_Full"];
        };
        /** @description Common Metafield properties.
         *      */
        readonly MetafieldBase: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *
             *     |Value|Description |
             *     |:-|:-|
             *     |`app_only`|Private to the app that owns the field|
             *     |`read`|Visible to other API consumers|
             *     |`write`|Open for reading and writing by other API consumers|
             *     |`read_and_sf_access`|Visible to other API consumers, including on storefront|
             *     |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
             *
             * @enum {string}
             */
            readonly permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace?: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key?: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value?: string;
            /**
             * @description Description for the metafields.
             *
             * @example order
             */
            readonly description?: string;
            /**
             * @description The type of resource with which the metafield is associated.
             *
             * @example order
             * @enum {string}
             */
            readonly resource_type?: "order" | "brand" | "product" | "variant" | "category";
            /**
             * @description The unique identifier for the resource with which the metafield is associated.
             *
             * @example 0
             */
            readonly resource_id?: number;
        };
        /** @description Common Metafield properties.
         *      */
        readonly MetafieldBase_Post: {
            /**
             * @description Determines the visibility and writeability of the field by other API consumers.
             *
             *     |Value|Description |
             *     |:-|:-|
             *     |`app_only`|Private to the app that owns the field|
             *     |`read`|Visible to other API consumers|
             *     |`write`|Open for reading and writing by other API consumers|
             *     |`read_and_sf_access`|Visible to other API consumers, including on storefront|
             *     |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
             *
             * @enum {string}
             */
            readonly permission_set: "app_only" | "read" | "write" | "read_and_sf_access" | "write_and_sf_access";
            /**
             * @description Namespace for the metafield, for organizational purposes.
             *
             * @example Sales Department
             */
            readonly namespace: string;
            /**
             * @description The name of the field, for example: `location_id`, `color`.
             *
             * @example Staff Name
             */
            readonly key: string;
            /**
             * @description The value of the field, for example: `1`, `blue`.
             *
             * @example Ronaldo
             */
            readonly value: string;
            /**
             * @description Description for the metafields.
             *
             * @example Name of Staff Member
             */
            readonly description?: string;
        };
        /** @description Allows app partners to write custom data to various resources in the API.
         *      */
        readonly Metafield: components["schemas"]["MetafieldBase"] & {
            /** @description The unique identifier for the metafields.
             *      */
            readonly id?: number;
            /**
             * Format: date-time
             * @description Date and time of the metafield ºs creation.
             *
             * @example 2022-06-16T18:39:00+00:00
             */
            readonly date_created?: string;
            /**
             * Format: date-time
             * @description Date and time when the metafield was last updated.
             *
             * @example 2022-06-16T18:39:00+00:00
             */
            readonly date_modified?: string;
            /**
             * @description Client ID for the metafield ºs creator.
             * @example asdfasdfasdfasdfasdfasdfasdf
             */
            readonly owner_client_id?: string;
        };
        /** @description The model for a PUT to update metafield.
         *      */
        readonly MetafieldPut: components["schemas"]["MetafieldBase_Post"];
        /**
         * GlobalOrderSettings
         * @example {
         *       "notifications": {
         *         "order_placed": {
         *           "email_addresses": [
         *             "admin@example.com",
         *             "another-email@example.com"
         *           ]
         *         },
         *         "forward_invoice": {
         *           "email_addresses": [
         *             "admin@example.com",
         *             "another-email@example.com"
         *           ]
         *         }
         *       }
         *     }
         */
        readonly GlobalOrderSettings: {
            /** @description Global notification settings. */
            readonly notifications?: {
                /** @description Global order notification settings. */
                readonly order_placed?: {
                    /** @description Email addresses order notifications will be sent to. Empty array disables order notifications. Not nullable. */
                    readonly email_addresses?: readonly string[];
                };
                /** @description Global order invoice forward settings. */
                readonly forward_invoice?: {
                    /** @description Email addresses order invoices will be forwarded to. Empty array disables forwarding order invoices. Not nullable. */
                    readonly email_addresses?: readonly string[];
                };
            };
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponsePartialSuccess_POST_PUT: {
            readonly data?: readonly components["schemas"]["Metafield"][];
            readonly errors?: readonly components["schemas"]["Error"][];
            readonly meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionResponsePartialSuccess_DELETE: {
            /** @example [
             *       123
             *     ] */
            readonly data?: readonly number[];
            readonly errors?: readonly components["schemas"]["Error"][];
            readonly meta?: components["schemas"]["WriteCollectionPartialSuccessMeta"];
        };
        /** @description Response payload for the BigCommerce API.
         *      */
        readonly MetaFieldCollectionDeleteResponseSuccess: {
            /** @example [
             *       123,
             *       124,
             *       125
             *     ] */
            readonly data?: readonly number[];
            /**
             * @description Empty for 200 responses.
             * @example []
             */
            readonly errors?: readonly unknown[];
            readonly meta?: components["schemas"]["WriteCollectionSuccessMeta"];
        };
        /**
         * Collection Meta
         * @description Additional data about the response.
         */
        readonly WriteCollectionPartialSuccessMeta: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 3
             */
            readonly total?: number;
            /**
             * @description Total number of items that were successfully deleted.
             *
             * @example 1
             */
            readonly success?: number;
            /**
             * @description Total number of items that failed to be deleted.
             *
             * @example 2
             */
            readonly failed?: number;
        };
        /**
         * Collection Meta
         * @description Additional data about the response.
         */
        readonly WriteCollectionSuccessMeta: {
            /**
             * @description Total number of items in the result set.
             *
             * @example 3
             */
            readonly total?: number;
            /**
             * @description Total number of items that were successfully deleted.
             *
             * @example 3
             */
            readonly success?: number;
            /**
             * @description Total number of items that failed to be deleted.
             *
             * @example 0
             */
            readonly failed?: number;
        };
        /**
         * @description Total number of items in the result set.
         *
         * @example 3
         */
        readonly Total: number;
        /**
         * @description Total number of items that were successfully deleted.
         *
         * @example 1
         */
        readonly Success: number;
        /**
         * @description Total number of items that failed to be deleted.
         *
         * @example 2
         */
        readonly Failed: number;
        /** @description Error response payload for the BigCommerce API.
         *      */
        readonly Error: {
            /**
             * @description The HTTP status code for the error.
             *
             * @example 422
             */
            readonly status?: number;
            /**
             * @description The error title.
             *
             * @example Bulk operation has failed
             */
            readonly title?: string;
            /**
             * @description The error type.
             *
             * @example https://developer.bigcommerce.com/api-docs/getting-started/api-status-codes
             */
            readonly type?: string;
            readonly errors?: components["schemas"]["ErrorDetail"];
        };
        /**
         * @description Error detail response payload for the BigCommerce API.
         *
         * @example {
         *       "1": "Unauthorized to delete",
         *       "2": "Metafield does not exist"
         *     }
         */
        readonly ErrorDetail: {
            readonly [key: string]: unknown;
        };
        /** @description The model for a POST to create metafield.
         *      */
        readonly MetafieldPost_Batch: components["schemas"]["MetafieldBase_Post"] & {
            /**
             * @description The ID for the resource with which the metafield is associated.
             *
             * @example 42
             */
            readonly resource_id: number;
        };
        /** @description The model for a PUT to create metafield.
         *      */
        readonly MetafieldPut_Batch: components["schemas"]["MetafieldBase_Post"] & {
            /**
             * @description The ID of metafield to update.
             *
             * @example 42
             */
            readonly id: number;
            /**
             * @description The ID for the resource with which the metafield is associated.
             *
             * @example 42
             */
            readonly resource_id?: number;
        };
        /** ChannelOrderSettings */
        readonly ChannelOrderSettings: {
            /** @description Channel notification settings. */
            readonly notifications?: {
                /** @description Channel order notification settings. */
                readonly order_placed?: {
                    /** @description Email addresses channel order notifications will be sent to. If null will fall back to global value. Empty array disables order notifications for channel. */
                    readonly email_addresses?: readonly string[] | null;
                };
                /** @description Channel order invoice forward settings. */
                readonly forward_invoice?: {
                    /** @description Email addresses channel order invoices will be forwarded to. If null will fall back to global value. Empty array disables forwarding order invoices for channel. */
                    readonly email_addresses?: readonly string[] | null;
                };
            };
        };
        readonly ErrorResponse400: {
            readonly schema?: components["schemas"]["betaErrorResponse"];
        };
        readonly ErrorResponse404: {
            readonly schema?: components["schemas"]["betaErrorResponse"];
        };
        readonly ErrorResponse422: {
            readonly schema?: components["schemas"]["betaErrorResponse"];
        };
        readonly betaErrorResponse: components["schemas"]["BaseError"] & {
            readonly errors?: {
                readonly [key: string]: unknown;
            };
        };
        /** @description Error payload for the BigCommerce API.
         *      */
        readonly BaseError: {
            /** @description The HTTP status code.
             *      */
            readonly status?: number;
            /** @description The error title describing the particular error.
             *      */
            readonly title?: string;
            readonly type?: string;
        };
    };
    responses: {
        readonly Return_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["Return_Full"];
                    readonly meta?: {
                        readonly pagination?: components["schemas"]["Pagination"];
                    };
                };
            };
        };
        readonly ReturnStatus_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["UpdateReturnStatuses"];
                    readonly errors?: readonly components["schemas"]["Problem"][];
                    readonly meta?: components["schemas"]["BatchOperationMeta"];
                };
            };
        };
        readonly OrderReturnableItems_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["GetReturnableItems"];
                };
            };
        };
        readonly CreateReturn_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["CreateReturn"];
                };
            };
        };
        readonly ReceivedItems_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["ReceivedItems_Base"];
                    readonly errors?: readonly components["schemas"]["Problem"][];
                    readonly meta?: components["schemas"]["BatchOperationMeta"];
                };
            };
        };
        readonly ReviewedItems_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["ReviewedItems_Base"];
                    readonly errors?: readonly components["schemas"]["Problem"][];
                    readonly meta?: components["schemas"]["BatchOperationMeta"];
                };
            };
        };
        readonly StoreReturnSettings_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["GetReturnsSettings"];
                };
            };
        };
        /** @description If something happens during the request that causes it to fail, a 502 response will be returned. A new request should be made; however, it could fail. */
        readonly "502_GatewayError": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Base"];
            };
        };
        /** @description If this occurs, you should retry the request. Typically retrying the request several times will result in a successful request; however, if you cannot successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down, and you will need to complete the request again when it is back up (in several hours, usually). */
        readonly "504_GatewayTimeout": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["errorDetailed_Full"];
            };
        };
        readonly "403_Unauthorized": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Base"];
            };
        };
        /** @description Malformed request syntax. Typically need to fix the JSON.
         *     Body to resend successfully. */
        readonly "400_BadRequest": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Base"];
            };
        };
        /** @description The resource was not found. */
        readonly "404_NotFound": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Base"];
            };
        };
        /** @description This occurs when missing or unacceptable data is passed for one or more fields. Please correct the values for the fields listed in the errors object. */
        readonly "422_UnprocessableEntity": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description If this occurs, you should retry the request. If you cannot successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down, and you will need to make the request again when it is back up (in several hours, usually). */
        readonly "503_ServiceUnavailable": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Base"];
            };
        };
        readonly paymentActionsCapture_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": Record<string, unknown>;
            };
        };
        readonly paymentActionsVoid_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": Record<string, unknown>;
            };
        };
        /** @description Request acknowledged. */
        readonly "201_Acknowledged": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": Record<string, unknown>;
            };
        };
        /** @description Resource Created. */
        readonly "201_Created": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly [key: string]: unknown;
                };
            };
        };
        readonly RefundCollection_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    /** @description Collection of Refunds */
                    readonly data?: readonly components["schemas"]["Refund"][];
                    readonly meta?: components["schemas"]["metaEmpty_Full"];
                };
            };
        };
        readonly refundsBATCH_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["Refund"][];
                    readonly errors?: readonly components["schemas"]["FailedQuoteError"][];
                    readonly meta?: components["schemas"]["MetaRefund"];
                };
            };
        };
        readonly RefundQuote_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["RefundQuote_Full"];
                    readonly meta?: components["schemas"]["metaEmpty_Full"];
                };
            };
        };
        readonly Refund_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["Refund"];
                    readonly meta?: components["schemas"]["metaEmpty_Full"];
                };
            };
        };
        /** @description Response payload for the BigCommerce Order Transactions API. */
        readonly TransactionCollection_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["Transaction"][];
                    readonly meta?: components["schemas"]["metaCollection_Full"];
                };
            };
        };
        /** @description Response payload for the BigCommerce Order Transactions API single transaction. */
        readonly Transaction_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["Transaction_Post"] & {
                        /** @description Unique identifier for the transaction.
                         *      */
                        readonly id?: number;
                        /** @description Identifier for the BigCommerce Order with which this transaction is associated. */
                        readonly order_id?: string;
                        /**
                         * Format: date-time
                         * @description The datetime of the transaction.
                         *
                         */
                        readonly date_created?: string;
                        /** @description This field contains internal BigPay token for stored card that is then mapped to the actual third-party token. We currently do not offer a way to get third party tokens.These tokens are read-only and do not return any information about the payment. */
                        readonly payment_instrument_token?: string;
                        readonly avs_result?: components["schemas"]["AVSResult"];
                        readonly cvv_result?: components["schemas"]["CVVResult"];
                        readonly credit_card?: components["schemas"]["CreditCard"];
                        readonly gift_certificate?: components["schemas"]["GiftCertificate"];
                        readonly store_credit?: components["schemas"]["StoreCredit"];
                    };
                    readonly meta?: components["schemas"]["metaEmpty_Full"];
                };
            };
        };
        readonly RefundQuotesBATCH_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["RefundQuote_Full"][];
                    readonly errors?: readonly components["schemas"]["FailedQuoteError"][];
                    readonly meta?: components["schemas"]["Meta"];
                };
            };
        };
        readonly RefundID_Response: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["RefundID_Get"];
            };
        };
    };
    parameters: {
        /** @description The ID of the `Order` to which the transactions belong.
         *      */
        readonly OrderIdParam: number;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
        /** @description Specifies the page number in a limited (paginated) list of products.
         *      */
        readonly PageParam: number;
        /** @description Filter items by minimum date created. For example, `date_created:min=2019-09-04T00:00:00` or `date_created:min=2019-09-04`. Returns metafields created after this date. */
        readonly date_created_min: string;
        /** @description Filter items by maximum date created. For example, `date_created:max=2019-09-04T00:00:00` or `date_created:max=2019-09-04`. Returns metafields created before this date. */
        readonly date_created_max: string;
        /** @description Filter items by date created. For example, `date_created=2019-09-04T00:00:00`. Returns metafields created on this date. */
        readonly date_created: string;
        /** @description Filter items by minimum date modified. For example, `date_modified:min=2019-09-04T00:00:00` or `date_modified:min=2019-09-04`. Returns metafields modified after this date. */
        readonly date_modified_min: string;
        /** @description Filter items by maximum date modified. For example, `date_modified:max=2019-09-04T00:00:00` or `date_modified:max=2019-09-04`. Returns metafields modified before this date. */
        readonly date_modified_max: string;
        /** @description Filter items by date modified. For example, `date_modified=2019-09-04T00:00:00`. Returns metafields modified on this date. */
        readonly date_modified: string;
        /** @description The ID of the `Metafield`.
         *      */
        readonly MetafieldIdParam: number;
        /** @description Filter based on a metafield ºs key.
         *      */
        readonly MetafieldKeyParam: string;
        /** @description Filter using a comma-separated list of metafield keys. Could be used with vanilla `key` query parameter. */
        readonly MetafieldKeyInParam: readonly string[];
        /** @description Filter based on a metafield ºs key.
         *      */
        readonly MetafieldNamespaceParam: string;
        /** @description Filter using a comma-separated list of metafield namespaces. Can be used with vanilla `namespace` query parameter. */
        readonly MetafieldNamespaceInParam: readonly string[];
        /** @description Controls the number of items per page in a limited (paginated) list of products.
         *      */
        readonly LimitParam: number;
        /** @description Sort direction. Acceptable values are: `asc`, `desc`.
         *      */
        readonly DirectionParam: "asc" | "desc";
        /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
        readonly IncludeFieldsParamMetafields: readonly ("resource_id" | "key" | "value" | "namespace" | "permission_set" | "resource_type" | "description" | "owner_client_id" | "date_created" | "date_modified")[];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly captureOrderPayment: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 201: components["responses"]["201_Created"];
            readonly 400: components["responses"]["400_BadRequest"];
            readonly 404: components["responses"]["404_NotFound"];
            readonly 422: components["responses"]["422_UnprocessableEntity"];
            readonly 502: components["responses"]["502_GatewayError"];
            readonly 503: components["responses"]["503_ServiceUnavailable"];
            readonly 504: components["responses"]["504_GatewayTimeout"];
        };
    };
    readonly voidOrderPayment: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 201: components["responses"]["201_Created"];
            readonly 400: components["responses"]["400_BadRequest"];
            readonly 404: components["responses"]["404_NotFound"];
            readonly 422: components["responses"]["422_UnprocessableEntity"];
            readonly 502: components["responses"]["502_GatewayError"];
            readonly 503: components["responses"]["503_ServiceUnavailable"];
            readonly 504: components["responses"]["504_GatewayTimeout"];
        };
    };
    readonly getOrderTransactions: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["TransactionCollection_Resp"];
            /** @description No content found to fulfill request.
             *      */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 204 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the situation. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 404 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                        readonly instance?: string;
                    };
                };
            };
            /** @description Service Unavailable.
             *      */
            readonly 503: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description 503 HTTP status code.
                         *      */
                        readonly status?: number;
                        /** @description The error title describing the particular error. */
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly createOrderRefundQuotes: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["RefundQuote_Post"];
                readonly "application/xml": components["schemas"]["RefundQuote_Post"];
                readonly "multipart/form-data": components["schemas"]["RefundQuote_Post"];
            };
        };
        readonly responses: {
            readonly 201: components["responses"]["RefundQuote_Resp"];
            readonly 422: components["responses"]["422_UnprocessableEntity"];
        };
    };
    readonly getOrderRefunds: {
        readonly parameters: {
            readonly query?: {
                /** @description Filters by refund payment using the BigCommerce `transaction_id`. */
                readonly transaction_id?: string;
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["RefundCollection_Resp"];
        };
    };
    readonly createOrderRefund: {
        readonly parameters: {
            readonly query?: {
                /** @description Filters by refund payment using the BigCommerce `transaction_id`. */
                readonly transaction_id?: string;
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["RefundRequest_Post"];
            };
        };
        readonly responses: {
            readonly 201: components["responses"]["Refund_Resp"];
            /** @description Unable to process a guest refund with store credit.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["ErrorResponse"][];
                    };
                };
            };
            /** @description Service Unavailable */
            readonly 503: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["FailedQuoteError"][];
                        readonly meta?: components["schemas"]["Meta"];
                    };
                };
            };
        };
    };
    readonly getOrderRefund: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description Refund ID. */
                readonly refund_id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["RefundID_Response"];
        };
    };
    readonly getOrdersRefunds: {
        readonly parameters: {
            readonly query?: {
                /** @description Pass a comma-separated list of order IDs to filter the included orders. Accepts multiple values. */
                readonly "order_id:in"?: readonly number[];
                /** @description Pass a comma-separated list of refund IDs to filter the included refunds. Accepts multiple values. */
                readonly "id:in"?: readonly number[];
                /** @description Filter results so they are later than or equal to provided date.
                 *
                 *
                 *     Must be in url-encoded RFC 3339 format.
                 *     e.g. `2020-01-15T01:02:34-01:00` is RFC 3339 format.
                 *     Url-encoded this will be `2020-01-15T01%3A02%3A34%2B01%3A00` */
                readonly "created:min"?: string;
                /** @description Filter results so they are earlier than or equal to provided date.
                 *
                 *     Must be in url-encoded RFC 3339 format.
                 *     e.g. `2020-01-15T01:02:34-01:00` is RFC 3339 format.
                 *     Url-encoded this will be `2020-01-15T01%3A02%3A34%2B01%3A00` */
                readonly "created:max"?: string;
                /** @description Filters by refund payment using the BigCommerce `transaction_id`. */
                readonly transaction_id?: string;
                /** @description Specifies the page number in a limited (paginated) list of items. */
                readonly page?: number;
                /** @description Controls the number of items per page in a limited (paginated) list of items. */
                readonly limit?: number;
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["RefundCollection_Resp"];
        };
    };
    readonly getOrderMetafields: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Filter based on a metafield ºs key.
                 *      */
                readonly key?: components["parameters"]["MetafieldKeyParam"];
                /** @description Filter based on a metafield ºs key.
                 *      */
                readonly namespace?: components["parameters"]["MetafieldNamespaceParam"];
                /** @description Sort direction. Acceptable values are: `asc`, `desc`.
                 *      */
                readonly direction?: components["parameters"]["DirectionParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description An array of metafields and metadata.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse"];
                };
            };
        };
    };
    readonly createOrderMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
            };
            readonly cookie?: never;
        };
        /** @description A `Metafield` object.
         *      */
        readonly requestBody: {
            readonly content: {
                /** @example {
                 *       "permission_set": "app_only",
                 *       "namespace": "Sales Department",
                 *       "key": "Staff Name",
                 *       "value": "Sam",
                 *       "description": "Name of staff member"
                 *     } */
                readonly "application/json": components["schemas"]["MetafieldBase_Post"];
            };
        };
        readonly responses: {
            /** @description A `Metafield` object.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetafieldResponse"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description The metafield conflicts with another metafield. This can result from duplicate unique key combinations of the app ºs client ID, namespace, key, resource type, and resource ID.
             *      */
            readonly 409: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description The `Metafield` is not valid. This is the result of missing required fields or of invalid data. See the response for more details.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readonly getOrderMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafield_id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description A `Metafield` object.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetafieldResponse"];
                };
            };
            /** @description A metafield was not found with this query.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    readonly updateOrderMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafield_id: number;
            };
            readonly cookie?: never;
        };
        /** @description A `Metafield` object.
         *      */
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["MetafieldPut"];
            };
        };
        readonly responses: {
            /** @description A metafield and metadata.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetafieldResponse"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description A metafield was not found with this query.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    readonly deleteOrderMetafield: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The ID of the `Order` to which the transactions belong.
                 *      */
                readonly order_id: components["parameters"]["OrderIdParam"];
                /** @description The ID of the `Metafield`.
                 *      */
                readonly metafield_id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description An empty response.
             *      */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The resource was not found.
             *      */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    readonly getGlobalOrderSettings: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["GlobalOrderSettings"] & {
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description Bad request. Authentication Required. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse400"];
                };
            };
        };
    };
    readonly updateGlobalOrderSettings: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["GlobalOrderSettings"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["GlobalOrderSettings"] & {
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description Bad request. Authentication Required. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse400"];
                };
            };
            /** @description Order settings data is not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse422"];
                };
            };
        };
    };
    readonly getChannelOrderSettings: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description Channel ID */
                readonly channel_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ChannelOrderSettings"] & {
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description Bad request. Authentication Required. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse400"];
                };
            };
        };
    };
    readonly updateChannelOrderSettings: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description Channel ID */
                readonly channel_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["ChannelOrderSettings"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ChannelOrderSettings"] & {
                        readonly meta?: components["schemas"]["metaEmpty_Full"];
                    };
                };
            };
            /** @description Bad request. Authentication Required. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse400"];
                };
            };
            /** @description Order settings data is not valid. This is the result of missing required fields, or of invalid data. See the response for more details. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ErrorResponse422"];
                };
            };
        };
    };
    readonly getOrdersMetafields: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description Filter based on a metafield ºs key.
                 *      */
                readonly key?: components["parameters"]["MetafieldKeyParam"];
                /** @description Filter using a comma-separated list of metafield keys. Could be used with vanilla `key` query parameter. */
                readonly "key:in"?: components["parameters"]["MetafieldKeyInParam"];
                /** @description Filter based on a metafield ºs key.
                 *      */
                readonly namespace?: components["parameters"]["MetafieldNamespaceParam"];
                /** @description Filter using a comma-separated list of metafield namespaces. Can be used with vanilla `namespace` query parameter. */
                readonly "namespace:in"?: components["parameters"]["MetafieldNamespaceInParam"];
                /** @description Sort direction. Acceptable values are: `asc`, `desc`.
                 *      */
                readonly direction?: components["parameters"]["DirectionParam"];
                /** @description Fields to include, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include_fields?: components["parameters"]["IncludeFieldsParamMetafields"];
                /** @description Filter items by date created. For example, `date_created=2019-09-04T00:00:00`. Returns metafields created on this date. */
                readonly date_created?: components["parameters"]["date_created"];
                /** @description Filter items by date modified. For example, `date_modified=2019-09-04T00:00:00`. Returns metafields modified on this date. */
                readonly date_modified?: components["parameters"]["date_modified"];
                /** @description Filter items by minimum date created. For example, `date_created:min=2019-09-04T00:00:00` or `date_created:min=2019-09-04`. Returns metafields created after this date. */
                readonly "date_created:min"?: components["parameters"]["date_created_min"];
                /** @description Filter items by maximum date created. For example, `date_created:max=2019-09-04T00:00:00` or `date_created:max=2019-09-04`. Returns metafields created before this date. */
                readonly "date_created:max"?: components["parameters"]["date_created_max"];
                /** @description Filter items by minimum date modified. For example, `date_modified:min=2019-09-04T00:00:00` or `date_modified:min=2019-09-04`. Returns metafields modified after this date. */
                readonly "date_modified:min"?: components["parameters"]["date_modified_min"];
                /** @description Filter items by maximum date modified. For example, `date_modified:max=2019-09-04T00:00:00` or `date_modified:max=2019-09-04`. Returns metafields modified before this date. */
                readonly "date_modified:max"?: components["parameters"]["date_modified_max"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description List of `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse"];
                };
            };
        };
    };
    readonly updateOrdersMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly (components["schemas"]["MetafieldBase_Post"] & {
                    /**
                     * @description The ID of metafield to update.
                     *
                     * @example 42
                     */
                    readonly id: number;
                })[];
            };
        };
        readonly responses: {
            /** @description List of updated `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Response object for metafields creation with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
                };
            };
        };
    };
    readonly createOrdersMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly (components["schemas"]["MetafieldBase_Post"] & {
                    /**
                     * @description The ID for the order with which the metafield is associated.
                     *
                     * @example 42
                     */
                    readonly resource_id: number;
                })[];
            };
        };
        readonly responses: {
            /** @description List of created `Metafield` objects.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponse_POST_PUT"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Response object for metafields creation with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_POST_PUT"];
                };
            };
        };
    };
    readonly deleteOrdersMetafields: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** @description List of metafield IDs. */
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly number[];
            };
        };
        readonly responses: {
            /** @description Response object for metafields deletion with success.
             *      */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionDeleteResponseSuccess"];
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description Response object for metafields deletion with partial success.
             *      */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["MetaFieldCollectionResponsePartialSuccess_DELETE"];
                };
            };
        };
    };
}
