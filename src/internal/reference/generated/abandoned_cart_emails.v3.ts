/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/marketing/abandoned-cart-emails": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get all abandoned cart email templates
         * @description An array of abandoned cart emails pertaining to a store.
         */
        readonly get: operations["getAbandonedCartEmailTemplates"];
        /**
         * Create abandoned cart email template
         * @description Create an Abandoned Cart Email template.
         */
        readonly post: operations["createAbandonedCartEmailTemplate"];
    };
    readonly "/marketing/abandoned-cart-emails/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the Abandoned Cart Email template. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        /**
         * Get an email template
         * @description Get a single Abandoned Cart Email template.
         */
        readonly get: operations["getAbandonedCartEmailTemplate"];
        /**
         * Update an email template
         * @description Update an email template.
         */
        readonly put: operations["updateAbandonedCartEmailTemplate"];
        /**
         * Delete email template
         * @description Delete Abandoned Cart Email template.
         */
        readonly delete: operations["deleteAbandonedCartEmailTemplate"];
    };
    readonly "/marketing/abandoned-cart-emails/default": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get default email template
         * @description Return default Abandoned Cart Email template.
         */
        readonly get: operations["getDefaultAbandonedCartEmailTemplate"];
    };
    readonly "/marketing/abandoned-cart-emails/settings": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get email template settings
         * @description Read Abandoned Cart Email Template settings.
         */
        readonly get: operations["getAbandonedCartEmailTemplateSettings"];
        /**
         * Update email template settings
         * @description Update Abandoned Cart Email template settings.
         */
        readonly put: operations["updateAbandonedCartEmailTemplateSettings"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** SaveError */
        readonly SaveError: {
            readonly status?: number;
            readonly title?: string;
            readonly type?: string;
            readonly errors?: readonly string[];
        };
        /** BaseError */
        readonly BaseError: {
            readonly status?: string;
            readonly type?: string;
        };
        /** AbandonedCartEmailModel */
        readonly AbandonedCartEmailModel: {
            readonly notify_at_minutes?: components["schemas"]["NotifyAtMinutes"];
            readonly coupon_code?: components["schemas"]["CouponCode"];
            readonly template?: components["schemas"]["Template"];
        };
        /** AbandonedCartSettings */
        readonly AbandonedCartSettings: {
            /** @description Boolean value that specifies the inheritance state. */
            readonly use_global: boolean;
        };
        readonly AbandondedCartEmailPayload: {
            readonly is_active?: boolean;
            readonly coupon_code?: components["schemas"]["CouponCode"];
            readonly notify_at_minutes?: components["schemas"]["NotifyAtMinutes"];
            readonly template?: components["schemas"]["Template"];
        };
        /** Template */
        readonly Template: {
            /** @example 'Complete your purchase at {{ store.name }}' */
            readonly subject: string;
            /** @example 'Complete your purchase <a href="{{ notification.checkout_link }}">{{notification.checkout.link}}' */
            readonly body: string;
            readonly translations: readonly components["schemas"]["TranslationDefinition"][];
        };
        /** TranslationDefinition */
        readonly TranslationDefinition: {
            /**
             * @description Locale code for this language, such as 'en', 'en-us', 'fr-ca'.
             * @example en
             */
            readonly locale: string;
            /** @description Language keys for the template. User-defined. Should match any language keys used in the template. */
            readonly keys: {
                readonly [key: string]: string;
            };
        };
        /**
         * NotifyAtMinutes
         * @description Describes when this email will be sent, in minutes. Only supports certain intervals described in the enum.
         * @example 60
         * @enum {integer}
         */
        readonly NotifyAtMinutes: 60 | 120 | 180 | 240 | 300 | 360 | 420 | 480 | 540 | 600 | 660 | 720 | 780 | 840 | 900 | 960 | 1020 | 1080 | 1140 | 1200 | 1260 | 1320 | 1380 | 1440 | 2880 | 4320 | 5760 | 7200 | 8640 | 10080 | 11520 | 12960 | 14400;
        /**
         * Coupon Code Field
         * @example FF11-22X4
         */
        readonly CouponCode: string;
        /** AbandondedCartEmail */
        readonly AbandondedCartEmail: {
            /** @example 1 */
            readonly id?: number;
            readonly notify_at_minutes?: components["schemas"]["NotifyAtMinutes"];
            readonly coupon_code?: components["schemas"]["CouponCode"];
            readonly template?: components["schemas"]["Template"];
            readonly is_active?: boolean;
            readonly sent_num?: number;
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly metaCollection_open: {
            readonly [key: string]: unknown;
        };
    };
    responses: never;
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
        /** @description Channel ID to use for channel-level data. */
        readonly ChannelIdOptional: number;
        /** @description Channel ID to use for channel-specific settings. */
        readonly ChannelIdRequired: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getAbandonedCartEmailTemplates: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-level data. */
                readonly channel_id?: components["parameters"]["ChannelIdOptional"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["AbandondedCartEmail"][];
                        readonly meta?: components["schemas"]["metaCollection_open"];
                    };
                };
            };
        };
    };
    readonly createAbandonedCartEmailTemplate: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-level data. */
                readonly channel_id?: components["parameters"]["ChannelIdOptional"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["AbandondedCartEmailPayload"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["AbandondedCartEmail"];
                        readonly meta?: components["schemas"]["metaCollection_open"];
                    };
                };
            };
            /** @description Unprocessable Entity */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["SaveError"];
                };
            };
        };
    };
    readonly getAbandonedCartEmailTemplate: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the Abandoned Cart Email template. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["AbandondedCartEmail"];
                        readonly meta?: components["schemas"]["metaCollection_open"];
                    };
                };
            };
        };
    };
    readonly updateAbandonedCartEmailTemplate: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description ID of the Abandoned Cart Email template. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["AbandondedCartEmailPayload"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["AbandondedCartEmail"];
                        readonly meta?: components["schemas"]["metaCollection_open"];
                    };
                };
            };
            /** @description Unprocessable Entity */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["SaveError"];
                };
            };
        };
    };
    readonly deleteAbandonedCartEmailTemplate: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description ID of the Abandoned Cart Email template. */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description No Content */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getDefaultAbandonedCartEmailTemplate: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly subject: string;
                        readonly body: string;
                        readonly translations: readonly {
                            readonly locale: string;
                            readonly keys: {
                                readonly hello_phrase?: string;
                            };
                        }[];
                    };
                };
            };
        };
    };
    readonly getAbandonedCartEmailTemplateSettings: {
        readonly parameters: {
            readonly query: {
                /** @description Channel ID to use for channel-specific settings. */
                readonly channel_id: components["parameters"]["ChannelIdRequired"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["AbandonedCartSettings"];
                };
            };
        };
    };
    readonly updateAbandonedCartEmailTemplateSettings: {
        readonly parameters: {
            readonly query?: {
                /** @description Channel ID to use for channel-level data. */
                readonly channel_id?: components["parameters"]["ChannelIdOptional"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["AbandonedCartSettings"];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["AbandonedCartSettings"];
                };
            };
        };
    };
}
