/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/shipping/products/customs-information": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Customs Information
         * @description Get customs information for products.
         *
         *     This list can be filtered to return customs information objects specific to a list of requested product_ids. This is achieved by appending the query string `?product_id:in=4,5,6` to the resource `/shipping/products/customs-information`.
         *
         *     ```http
         *     GET /shipping/products/customs-information?product_id:in=4,5,6
         *     ```
         */
        readonly get: operations["getCustomsInformation"];
        /**
         * Upsert Customs Information
         * @description Creates and updates product customs information.
         *
         *     This is a batch operation where the creation of multiple customs information objects can be done with one `PUT` request.
         *
         *     **Limits**
         *     * Limit of 50 customs information objects per `PUT` request.
         */
        readonly put: operations["updateCustomsInformation"];
        /**
         * Delete Customs Information
         * @description Deletes customs information objects for a product.
         *
         *     ## Example
         *
         *     This is a batch operation. The `product_id:in` query parameter is required.
         *
         *     ```http
         *     DELETE /shipping/products/customs-information?product_id:in=4,5,6
         *     ```
         */
        readonly delete: operations["deleteCustomsInformation"];
    };
    readonly "/shipping/settings": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Shipping Settings
         * @description Returns the global-level shipping settings.
         */
        readonly get: operations["getShippingSettings"];
        /**
         * Update Shipping Settings
         * @description Updates the global-level shipping settings.
         */
        readonly put: operations["updateShippingSettings"];
    };
    readonly "/shipping/settings/channels/{channel_id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description Channel ID */
                readonly channel_id: string;
            };
            readonly cookie?: never;
        };
        /**
         * Get Shipping Settings per Channel
         * @description Returns shipping settings for a specific channel.
         */
        readonly get: operations["getChannelShippingSettings"];
        /**
         * Update Shipping Settings per Channel
         * @description Updates shipping settings for a specific channel.
         */
        readonly put: operations["updateChannelShippingSettings"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * customsInformationRequest
         * @description Data about the customs information object.
         */
        readonly customsInformation_request: {
            /**
             * Format: int32
             * @description The product ID to which the customs information data applies.
             * @example 77
             */
            readonly product_id: number;
            /**
             * @description The country of manufacture, production, or growth represented in ISO 3166-1 alpha-2 format.
             * @example US
             */
            readonly country_of_origin: string;
            /**
             * @description Description that provides information for customs to identify and verify the shapes, physical characteristics, and packaging of each shipment.
             * @example Baseball caps
             */
            readonly commodity_description: string;
            /**
             * @description Flag to determine whether this product will be shipped internationally.
             * @example true
             * @enum {boolean}
             */
            readonly international_shipping: true | false;
            readonly hs_codes: components["schemas"]["harmonizedSystemCodes"];
        };
        readonly shippingSettings: {
            readonly checkout?: {
                /**
                 * @description The approach for displaying the list of countries at checkout.
                 * @example DISPLAY_ALL_COUNTRIES
                 * @enum {string}
                 */
                readonly country_list_strategy?: "DISPLAY_ALL_COUNTRIES" | "DISPLAY_ONLY_SHIPPABLE_COUNTRIES";
                /**
                 * @description Message shown to the shopper during checkout when their order does not meet the merchant's shipping criteria.
                 * @example Unfortunately, one or more items in your cart can't be shipped to your location. Please choose a different delivery address.
                 */
                readonly out_of_delivery_zone_message?: string;
            };
        };
        readonly channelShippingSettings: {
            readonly checkout?: {
                /**
                 * @description Message shown to the shopper during checkout when their order does not meet the merchant's shipping criteria.
                 * @example Unfortunately, one or more items in your cart can't be shipped to your location. Please choose a different delivery address.
                 */
                readonly out_of_delivery_zone_message?: string;
            };
        };
        /**
         * customsInformation
         * @description Data about the customs information object.
         */
        readonly customsInformation: {
            /**
             * Format: int32
             * @description The ID of the product which the customs information data will apply to.
             * @example 77
             */
            readonly product_id?: number;
            /**
             * @description The country of manufacture, production, or growth represented in ISO 3166-1 alpha-2 format.
             * @example US
             */
            readonly country_of_origin?: string;
            /**
             * @description Description that provides information for customs to identify and verify shapes physical characteristics and packaging of each shipment.
             * @example Baseball caps
             */
            readonly commodity_description?: string;
            /**
             * @description Flag to determine whether this product will be shipped internationally.
             * @example true
             * @enum {boolean}
             */
            readonly international_shipping?: true | false;
            readonly hs_codes?: components["schemas"]["harmonizedSystemCodes"];
            /**
             * Format: date-time
             * @description Date and time when the customs information was created.
             * @example 2022-09-21T14:15:00+00:00
             */
            readonly created_at?: string;
            /**
             * Format: date-time
             * @description Date and time when the customs information was last updated.
             * @example 2022-09-21T14:15:00+00:00
             */
            readonly updated_at?: string;
        };
        /**
         * harmonizedSystemCodes
         * @description Key-value pairs that are commonly used in the following form:
         *
         *     `countryISO2: '/^[0-9A-Za-z]{6,14}$/'`
         *
         *     This key-value pair represents a country and the associated `hs_code` that applies to that country.
         *
         *     You can also use the `ALL` key in place of an ISO2 key to specify that the `hs_code` applies to all countries. The `ALL` key can be combined with other countries in the `hs_code` object.
         * @example {
         *       "ALL": "501000",
         *       "CA": "508313",
         *       "US": "641000",
         *       "AU": "817355"
         *     }
         */
        readonly harmonizedSystemCodes: {
            readonly [key: string]: unknown;
        };
        /**
         * metaCollection
         * @description Meta data relating to pagination.
         */
        readonly metaCollection: {
            readonly pagination?: {
                /**
                 * @description Total number of items returned.
                 * @example 3
                 */
                readonly total?: number;
                /**
                 * @description Number of items returned on per page.
                 * @example 1
                 */
                readonly count?: number;
                /**
                 * @description Number of items to be displayed per page.
                 * @example 1
                 */
                readonly per_page?: number;
                /**
                 * @description Current page number.
                 * @example 2
                 */
                readonly current_page?: number;
                /**
                 * @description Total number of pages.
                 * @example 3
                 */
                readonly total_page?: number;
                readonly links?: {
                    /**
                     * @description Query string appended to the resource to return to the previous page.
                     * @example ?limit=1&page=1
                     */
                    readonly previous?: string;
                    /**
                     * @description Query string appended to the resource to proceed to the next page.
                     * @example ?limit=1&page=3
                     */
                    readonly next?: string;
                    /**
                     * @description Query string appended to the resource to show the current page.
                     * @example ?limit=1&page=2
                     */
                    readonly current?: string;
                };
            };
        };
        /** Error */
        readonly error_Full: {
            readonly [key: string]: unknown;
        };
    };
    responses: {
        /** @description If something happens during the request that causes it to fail, a 502 response will be returned. A new request should be made; however, it could fail. */
        readonly "502_GatewayError": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description If this occurs, you should retry the request. Typically retrying the request several times will result in a successful request; however, if you are unable to successfully make a request, please check the [BigCommerce system status](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up. */
        readonly "504_GatewayTimeout": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description Returned when permissions do not allow the operation. */
        readonly "403_Unauthorized": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description Invalid syntax, required data missing, `content-type` header missing; Double-check request body for syntax errors and missing data; check `content-type` header. */
        readonly "400_BadRequest": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description If the requested account resource is not found for the franchise, return a 404 Not Found. */
        readonly "404_NotFound": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description This error occurs when missing or unacceptable data is passed for one or more fields. Please correct the values for the fields listed in the errors object. */
        readonly "422_UnprocessableEntity": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description If this occurs, you should retry the request. If you are unable to successfully make a request, please check the [BigCommerce system status](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up.
         *
         *     Occurs when the store is down for maintenance, is being upgraded to a new version, or is suspended for administrative or billing reasons. */
        readonly "503_ServiceUnavailable": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description API credentials are missing or invalid; Double-check the `access_token` and `client_id`. */
        readonly "401_Unauthorized": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description Request headers specify an unsupported `content-type` (or header is missing). Double-check `content-type` request header. */
        readonly "415_Unsupported": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description When an OAuth client exceeds the [rate limit](/docs/start/best-practices#api-rate-limits) for API requests to a store. */
        readonly "429_Too_Many_Requests": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description The resource was found, but doesnʼt support the request method. Issued when either a specific method isnʼt yet implemented on a resource, or the resource doesnʼt support the method at all. For example, a PUT request to `/orders` is invalid, but a PUT request to `/orders/{order_id}` is valid. */
        readonly "405_Method_Not_Allowed": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
        /** @description Expensive API calls or an internal server error in BigCommerce; re-attempt the request three to five times, with increasing delays of at least a minute between attempts. */
        readonly "500_Internal_Server_Error": {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Full"];
            };
        };
    };
    parameters: {
        /** @description Permanent ID of the BigCommerce store. */
        readonly store_hash: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getCustomsInformation: {
        readonly parameters: {
            readonly query?: {
                /** @description A comma-separated list of product IDs. For more information, see [Filtering](/docs/start/about/common-query-params). */
                readonly "product_id:in"?: readonly number[];
                readonly page?: number;
                readonly limit?: number;
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["customsInformation"][];
                        readonly meta?: components["schemas"]["metaCollection"];
                    };
                };
            };
        };
    };
    readonly updateCustomsInformation: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["customsInformation_request"][];
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["customsInformation"][];
                    };
                };
            };
        };
    };
    readonly deleteCustomsInformation: {
        readonly parameters: {
            readonly query: {
                readonly "product_id:in": readonly number[];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description No Content */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getShippingSettings: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["shippingSettings"];
                        readonly meta?: Record<string, unknown>;
                    };
                };
            };
        };
    };
    readonly updateShippingSettings: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["shippingSettings"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["shippingSettings"];
                        readonly meta?: Record<string, unknown>;
                    };
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description The request body does not meet the specification. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
    readonly getChannelShippingSettings: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description Channel ID */
                readonly channel_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["channelShippingSettings"];
                        readonly meta?: Record<string, unknown>;
                    };
                };
            };
        };
    };
    readonly updateChannelShippingSettings: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description Channel ID */
                readonly channel_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": components["schemas"]["channelShippingSettings"];
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: components["schemas"]["channelShippingSettings"];
                        readonly meta?: Record<string, unknown>;
                    };
                };
            };
            /** @description Bad Request. Input is invalid. */
            readonly 400: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                        readonly detail?: string;
                    };
                };
            };
            /** @description The request body does not meet the specification. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly status?: number;
                        readonly title?: string;
                        readonly type?: string;
                    };
                };
            };
        };
    };
}
