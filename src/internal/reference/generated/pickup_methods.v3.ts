/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/pickup/methods": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Pickup Methods
         * @description Retrieves a list of pickup methods.
         *
         *     ## Examples
         *
         *     You can filter this list to return pickup method objects specific to a list of requested pickup method IDs. This is achieved by appending the query string `?id:in=1,3,5` to the resource `/pickup/methods`.
         *
         *     ```http
         *     GET /pickup/methods?id:in=1,3,5
         *     ```
         */
        readonly get: operations["get-pickup-methods"];
        /**
         * Update Pickup Methods
         * @description Update existing pickup methods.
         *
         *     This batch operation can update 10 pickup method objects in one request.
         *
         *     Only the `id` property of the pickup method object is required as part of the request. Pickup method properties that are not provided will maintain their existing values.
         *
         *     ## Limits
         *     * Limit of updating 10 pickup method objects per `PUT` request.
         */
        readonly put: operations["put-pickup-methods"];
        /**
         * Create Pickup Methods
         * @description Creates one or many pickup methods.
         *
         *     This is a batch operation that can create up to 100 pickup methods objects in one request.
         *
         *     ## Limits
         *     * Limit of creating 100 pickup method objects per `POST` request.
         */
        readonly post: operations["post-pickup-methods"];
        /**
         * Delete Pickup Methods
         * @description Delete existing pickup methods.
         */
        readonly delete: operations["delete-pickup-methods"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        readonly BasePickupMethod: {
            /**
             * @description The ID of the location.
             * @example 2
             */
            readonly location_id?: number;
            /**
             * @description Title of the pickup method.
             * @example Office Pickup!
             */
            readonly display_name?: string;
            /**
             * @description Instructions for picking up items.
             * @example Bring your ID!
             */
            readonly collection_instructions?: string;
            /**
             * @description The description of collection time.
             * @example Collect during our opening hours of 0900 - 1700
             */
            readonly collection_time_description?: string;
            /**
             * @deprecated
             * @example 2
             */
            readonly location_identity?: number;
        };
        readonly PickupMethodResponse: {
            /**
             * @description The ID of the pickup method.
             * @example 1
             */
            readonly id?: number;
        } & components["schemas"]["BasePickupMethod"] & {
            /**
             * Format: date-time
             * @description Filter pickup methods by time created.
             *
             *     Time is presented in ISO-8601 format.
             * @example 2023-06-06T00:00:20Z
             */
            readonly date_created?: string;
            /**
             * Format: date-time
             * @description Filter pickup methods by time modified.
             *
             *     Time is presented in ISO-8601 format.
             * @example 2023-06-08T00:00:20Z
             */
            readonly date_modified?: string;
        };
        readonly MetaCollection: {
            readonly pagination?: {
                /**
                 * @description Total number of items in the result set.
                 * @example 123
                 */
                readonly total?: number;
                /**
                 * @description The total number of items in the collection on the current page.
                 * @example 100
                 */
                readonly count?: number;
                /**
                 * @description The amount of items returned in the collection per page, controlled by the limit parameter.
                 * @example 100
                 */
                readonly per_page?: number;
                /**
                 * @description The page you are currently on within the collection.
                 * @example 1
                 */
                readonly current_page?: number;
                /**
                 * @description The total number of pages in the collection.
                 * @example 2
                 */
                readonly total_pages?: number;
                /** @description Pagination links for the previous and next parts of the whole collection. */
                readonly links?: {
                    /** @description A link to the previous page is returned in the response. */
                    readonly previous?: string;
                    /** @description A link to the current page is returned in the response. */
                    readonly current?: string;
                    /** @description A link to the next page is returned in the response. */
                    readonly next?: string;
                };
            };
        };
    };
    responses: never;
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly "get-pickup-methods": {
        readonly parameters: {
            readonly query?: {
                /** @description Comma separated list of pickup method IDs. */
                readonly "id:in"?: number;
                /** @description Maximum number of results per page. */
                readonly limit?: number;
                /** @description The number of the page to be fetched. */
                readonly page?: number;
                /**
                 * @description Filter pickup methods by the date created. Return methods created on the provided date.
                 *
                 *     For example, `date_created=2023-09-07T06:23:13Z`.
                 * @example 2023-09-07T06:23:13Z
                 */
                readonly date_created?: string;
                /**
                 * @description Filter pickup methods by minimum date created. Return methods created after the provided date.
                 *
                 *     For example, `date_created:min=2023-09-07T06:23:13Z`.
                 * @example 2023-09-07T06:23:13Z
                 */
                readonly "date_created:min"?: string;
                /**
                 * @description Filter pickup methods by maximum date created. Return methods created before the provided date.
                 *
                 *     For example, `date_created:max=2023-09-07T06:23:13Z`.
                 * @example 2023-09-07T06:23:13Z
                 */
                readonly "date_created:max"?: string;
                /**
                 * @description Filter pickup methods by date modified. Return methods modified on the provided date.
                 *
                 *     For example, `date_modified=2023-09-07T06:23:13Z`.
                 * @example 2023-09-07T06:23:13Z
                 */
                readonly date_modified?: string;
                /**
                 * @description Filter pickup methods by minimum date modified. Return methods modified after the provided date.
                 *
                 *     For example, `date_modified:min=2023-09-07T06:23:13Z`.
                 * @example 2023-09-07T06:23:13Z
                 */
                readonly "date_modified:min"?: string;
                /**
                 * @description Filter pickup methods by maximum date modified. Return methods modified before the provided date.
                 *
                 *     For example, `date_modified:max=2023-09-07T06:23:13Z`.
                 * @example 2023-09-07T06:23:13Z
                 */
                readonly "date_modified:max"?: string;
                /** @description Sort pickup methods by date_modified:* or name:* ; for example, `sort=name:asc`.
                 *
                 *     - `date_modified:asc` - sort by date modified in ascending order
                 *     - `date_modified:desc` - sort by date modified in descending order
                 *     - `name:asc` - sort by name in ascending order
                 *     - `name:desc` - sort by name in descending order */
                readonly sort?: "date_modified:asc" | "date_modified:desc" | "name:asc" | "name:desc";
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description The request has been processed and a list of pickup methods has been returned successfully. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["PickupMethodResponse"][];
                        readonly meta?: components["schemas"]["MetaCollection"];
                    };
                };
            };
        };
    };
    readonly "put-pickup-methods": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly ({
                    /**
                     * @description The ID of the pickup method.
                     * @example 1
                     */
                    readonly id?: number;
                } & components["schemas"]["BasePickupMethod"])[];
            };
        };
        readonly responses: {
            /** @description The request has been successfully processed. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["PickupMethodResponse"][];
                        readonly meta?: {
                            readonly [key: string]: unknown;
                        };
                    };
                };
            };
        };
    };
    readonly "post-pickup-methods": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": readonly components["schemas"]["BasePickupMethod"][];
            };
        };
        readonly responses: {
            /** @description The request has been successfully processed. */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data?: readonly components["schemas"]["PickupMethodResponse"][];
                        readonly meta?: {
                            readonly [key: string]: unknown;
                        };
                    };
                };
            };
        };
    };
    readonly "delete-pickup-methods": {
        readonly parameters: {
            readonly query: {
                /** @description Comma separated list of pickup method IDs. */
                readonly "id:in": number;
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description No Content */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
