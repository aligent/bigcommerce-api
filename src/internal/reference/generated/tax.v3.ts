/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/tax/providers/{provider_id}/connection": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The Tax Provider始s `provider_id` provided by BigCommerce after the provider [shares their provider details](/docs/integrations/tax#sharing-provider-details-with-bigcommerce). */
                readonly provider_id: string;
            };
            readonly cookie?: never;
        };
        /**
         * Get Connection Status
         * @description Retrieve the connection status of the specified tax provider in the context of a store.
         *
         *     > #### Note
         *     > * Requires **read** permissions on the **Information and Settings** scope.
         *
         */
        readonly get: operations["getTaxProviderConnection"];
        /**
         * Update a Connection
         * @description Set authentication information associated with a merchant's account on the tax provider's infrastructure:
         *     - [HTTP Basic Authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication) (developer.mozilla.org) credentials
         *     - (optional) Tax provider profile used in customized endpoint urls for tax provider calls. This is only available for tax providers that support this feature.
         *
         *     The configured `username`, `password`, and `profile` (if available) are used to authenticate each API request to the Tax Provider from the associated store.
         *     The tax provider's `profile` will be included in the URL for [Tax Provider API](/docs/rest-contracts/tax) endpoints.
         *
         *     > #### Note
         *     > * This operation will be logged in [Store Logs](https://support.bigcommerce.com/s/article/Using-Store-Logs) under **Staff Actions**.
         *     > * Requires **write** permissions on the **Information and Settings** [scope](/docs/start/authentication/api-accounts#oauth-scopes).
         */
        readonly put: operations["updateTaxProviderConnection"];
        /**
         * Delete a Connection
         * @description Remove any previously set basic connection credentials for the specified provider. If the specified provider is the active tax provider on the store, the store's active tax provider will be reset to BigCommerce Manual Tax. It is suggested to call this endpoint during a single-click app [uninstall callback](/docs/integrations/apps/guide/callbacks#uninstall-callback).
         *
         *     > #### Note
         *     > * This operation will be logged in [Store Logs](https://support.bigcommerce.com/s/article/Using-Store-Logs) under **Staff Actions**.
         *     > * Requires **write** permissions on the **Information and Settings** [scope](/docs/start/authentication/api-accounts#oauth-scopes).
         *
         */
        readonly delete: operations["deleteTaxProviderConnection"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Connection Status */
        readonly "response-connection": {
            readonly data?: {
                /** @description Identifies a unique account on the external tax provider infrastructure. May be used to reconcile the two platforms. */
                readonly username?: string;
                /** @description Describes whether the stored credentials are considered complete and configured, ready to be used for Tax Provider API requests.
                 *
                 *     Merchants may enable any **configured** tax provider for storefront tax quotation. */
                readonly configured?: boolean;
                /** @description The countries and subdivisions in which this tax provider connection is active. */
                readonly target?: {
                    /**
                     * @description The list of country codes where the tax provider connection is active. ISO 3166-1 alpha-2.
                     * @example [
                     *       "AU",
                     *       "US"
                     *     ]
                     */
                    readonly country_codes?: readonly string[];
                    /**
                     * @description The list of subdivision codes where the tax provider connection is active. ISO 3166-2.
                     * @example [
                     *       "AU-NSW",
                     *       "US-OH"
                     *     ]
                     */
                    readonly subdivision_codes?: readonly string[];
                };
            };
        };
    };
    responses: never;
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
        /** @description Unique key that identifies the Tax Provider on the BigCommerce platform. */
        readonly provider_id: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getTaxProviderConnection: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The Tax Provider始s `provider_id` provided by BigCommerce after the provider [shares their provider details](/docs/integrations/tax#sharing-provider-details-with-bigcommerce). */
                readonly provider_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["response-connection"];
                };
            };
            /** @description Provider does not exist */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly updateTaxProviderConnection: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The Tax Provider始s `provider_id` provided by BigCommerce after the provider [shares their provider details](/docs/integrations/tax#sharing-provider-details-with-bigcommerce). */
                readonly provider_id: string;
            };
            readonly cookie?: never;
        };
        /** @description Basic authentication information, associated with a merchant account on the third-party tax provider始s infrastructure. */
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    /**
                     * @description Public identifying information representing a unique account on the tax provider's infrastructure. Should not contain any personal identifying information (e.g. a personal email address).
                     * @example MyTaxProviderAccount
                     */
                    readonly username?: string;
                    /** @example h6eSgKLN72q7jYTW */
                    readonly password?: string;
                    /**
                     * @description Optional field that allows merchants to customize Tax Provider API endpoint URLs. Only available for supporting providers.
                     * @example your_app_name
                     */
                    readonly profile?: string;
                };
            };
        };
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["response-connection"];
                };
            };
            /** @description Provider does not exist */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity, will include a specific error message referencing the issue. */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly deleteTaxProviderConnection: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The Tax Provider始s `provider_id` provided by BigCommerce after the provider [shares their provider details](/docs/integrations/tax#sharing-provider-details-with-bigcommerce). */
                readonly provider_id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description OK */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["response-connection"];
                };
            };
            /** @description Provider or provider connection does not exist */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
