/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/orders/{orderId}": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Order
         * @description Returns *Order* data. This will return order data immediately after an order is placed on the storefront.
         *
         *     > #### Note
         *     > * Substitute your storefront domain for `yourstore.example.com`.
         *     > * The Send a Test Request feature is not currently supported for this endpoint.
         */
        readonly get: operations["getOrder"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Data
         * @description Response data container for Order endpoints (`POST /order` and `POST /order/{orderId}`).
         */
        readonly Data: {
            readonly order?: components["schemas"]["Order"];
        };
        /** Order */
        readonly Order: {
            /** Format: double */
            readonly orderId?: number;
            /**
             * Format: uuid
             * @description The ID of cart that was converted to order.
             */
            readonly cartId?: string;
            readonly currency?: components["schemas"]["Currency"];
            /** @description Whether this item is taxable. */
            readonly isTaxIncluded?: boolean;
            /**
             * Format: double
             * @description Cost of cartʼs contents before applying discounts.
             */
            readonly baseAmount?: number;
            /**
             * Format: float
             * @description Discounted amount.
             */
            readonly discountAmount?: number;
            /** @description Gift wrapping for all items, including or excluding tax. */
            readonly giftWrappingCostTotal?: number;
            /**
             * Format: double
             * @description Sum of line-items amounts, minus cart-level discounts and coupons. This amount includes taxes where applicable.
             */
            readonly orderAmount?: number;
            /**
             * Format: double
             * @description Order amount represented in integer. Eg. 1234 for $12.34
             */
            readonly orderAmountAsInteger?: number;
            /** @description Array of `AppliedCoupon` objects applied to this cart. */
            readonly coupons?: readonly components["schemas"]["AppliedCoupon"][];
            /** @description Array of `LineItem` objects. */
            readonly lineItems?: readonly components["schemas"]["OrderLineItem"][];
            readonly customerId?: string;
            readonly billingAddress?: components["schemas"]["AddressProperties"];
            readonly status?: components["schemas"]["Status"];
            /** @description Specifies whether this order has at least one digital item. */
            readonly hasDigitalItems?: boolean;
            /** @description Specifies whether this order is fully paid, so that digital items can be downloaded. */
            readonly isDownloadable?: boolean;
            /** @description Specifies whether this order is complete and ready to be taken to the order confirmation page. */
            readonly isComplete?: boolean;
            /** @description Shopperʼs provided message for the order. */
            readonly customerMessage?: string;
            readonly shippingCostTotal?: number;
            readonly shippingCostBeforeDiscount?: number;
            readonly handlingCostTotal?: number;
            readonly customerCanBeCreated?: boolean;
            readonly taxes?: readonly {
                readonly name?: string;
                readonly amount?: number;
            }[];
            readonly taxTotal?: number;
            /** @description ID of the channel which the order belongs to. */
            readonly channelId?: number;
            readonly consignments?: components["schemas"]["Consignments"];
        };
        /**
         * Currency
         * @description This will always be the same between cart and checkout.
         */
        readonly Currency: {
            /** @description The currency name. */
            readonly name?: string;
            /** @description ISO-4217 currency code. (See: https://www.iso.org/iso-4217-currency-codes.html.) */
            readonly code?: string;
            /** @description The currency symbol. */
            readonly symbol?: string;
            /**
             * Format: double
             * @description Number of decimal places for the currency. For example, USD currency has two decimal places.
             */
            readonly decimalPlaces?: number;
        };
        /** Applied Coupon */
        readonly AppliedCoupon: {
            /** @description The coupon ID. */
            readonly id?: string;
            /** @description the coupon code */
            readonly code: string;
            /** @description The coupon title based on different types provided in control panel section. */
            readonly displayName?: string;
            /** @description Key name to identify the type of coupon. */
            readonly couponType?: string;
            /**
             * Format: double
             * @description The discounted amount applied within a given context.
             */
            readonly discountedAmount?: number;
        };
        /** Applied Discount */
        readonly AppliedDiscount: {
            /**
             * @description Property key is discount ID; property value is discount amount.
             * @example 8.28
             */
            readonly coupon?: number;
        };
        /** Order Line Item */
        readonly OrderLineItem: {
            /** @description Array of `ItemPhysical` objects. */
            readonly physicalItems: readonly components["schemas"]["ItemPhysical"][];
            /** @description Array of `ItemDigital` objects. */
            readonly digitalItems: readonly components["schemas"]["OrderItemDigital"][];
            /** @description Array of `ItemGiftCertificate` objects. */
            readonly giftCertificate: readonly components["schemas"]["OrderItemGiftCertificate"][];
        };
        /** Item Physical */
        readonly ItemPhysical: {
            /** @description The line-item ID. */
            readonly id?: string;
            /** @description Bundled items will have their parentʼs item ID. */
            readonly parentId?: string;
            /**
             * Format: double
             * @description ID of the variant.
             */
            readonly variantId?: number;
            /**
             * Format: double
             * @description ID of the product.
             */
            readonly productId?: number;
            /** @description SKU of the variant. */
            readonly sku?: string;
            /** @description The itemʼs product name. */
            readonly name?: string;
            /** @description The product URL. */
            readonly url?: string;
            /**
             * Format: double
             * @description Quantity of this item.
             */
            readonly quantity: number;
            /** @description The product's brand. */
            readonly brand?: string;
            /** @description Whether the item is taxable. */
            readonly isTaxable?: boolean;
            /** @description A publicly-accessible URL for an image of this item. */
            readonly imageUrl?: string;
            /** @description List of discounts applied to this item. If no discount applied, empty array is returned. If discount has been applied, discount object returned. */
            readonly discounts?: Record<string, unknown>;
            /**
             * Format: double
             * @description The total value of all discounts applied to this item (excluding coupon).
             */
            readonly discountAmount?: number;
            /**
             * Format: double
             * @description The total value of all coupons applied to this item.
             */
            readonly couponAmount?: number;
            /**
             * Format: double
             * @description The net item price before discounts and coupons. BigCommerce derives an item's list price from the product default price or, if applicable, the sale price configured in the admin panel.
             */
            readonly listPrice?: number;
            /**
             * Format: double
             * @description The itemʼs price after all discounts are applied. (The final price before tax calculation.)
             */
            readonly salePrice?: number;
            /**
             * Format: double
             * @description The itemʼs list price multiplied by the quantity.
             */
            readonly extendedListPrice?: number;
            /**
             * Format: double
             * @description The itemʼs sale price multiplied by the quantity.
             */
            readonly extendedSalePrice?: number;
            /** @description the product type - physical or digital. */
            readonly type?: string;
            /** @description Whether this item has been added automatically by a promotion. */
            readonly addedByPromotion?: boolean;
            /** @description Whether this item requires shipping to a physical address. */
            readonly isShippingRequired?: boolean;
            readonly giftWrapping?: components["schemas"]["GiftWrapping"];
            /** @description Categories the item belongs to. */
            readonly categories?: readonly Record<string, unknown>[];
        };
        /** Gift Wrapping */
        readonly GiftWrapping: {
            readonly name?: string;
            readonly message?: string;
            /** Format: double */
            readonly amount?: number;
        };
        /** Order Item Digital */
        readonly OrderItemDigital: {
            /** @description The line-item ID. */
            readonly id?: string;
            /** @description Bundled items will have their parentʼs item ID. */
            readonly parentId?: string;
            /**
             * Format: double
             * @description ID of the variant.
             */
            readonly variantId?: number;
            /**
             * Format: double
             * @description ID of the product.
             */
            readonly productId?: number;
            /** @description SKU of the variant. */
            readonly sku?: string;
            /** @description The itemʼs product name. */
            readonly name?: string;
            /** @description The product URL. */
            readonly url?: string;
            /**
             * Format: double
             * @description Quantity of this item.
             */
            readonly quantity: number;
            /** @description The item's brand. */
            readonly brand?: string;
            /** @description Whether the item is taxable. */
            readonly isTaxable?: boolean;
            /** @description A publicly-accessible URL for an image of this item. */
            readonly imageUrl?: string;
            /** @description A list of discounts applied to this item, as an array of AppliedDiscount objects. */
            readonly discounts?: readonly components["schemas"]["AppliedDiscount"][];
            /**
             * Format: double
             * @description The total value of all discounts applied to this item (excluding coupon).
             */
            readonly discountAmount?: number;
            /**
             * Format: double
             * @description The total value of all coupons applied to this item.
             */
            readonly couponAmount?: number;
            /**
             * Format: double
             * @description The net item price before discounts and coupons. BigCommerce derives an item's list price from the product default price or, if applicable, the sale price configured in the admin panel.
             */
            readonly listPrice?: number;
            /**
             * Format: double
             * @description The itemʼs price after all discounts are applied. (The final price before tax calculation.)
             */
            readonly salePrice?: number;
            /**
             * Format: double
             * @description The itemʼs list price multiplied by the quantity.
             */
            readonly extendedListPrice?: number;
            /**
             * Format: double
             * @description The itemʼs sale price multiplied by the quantity.
             */
            readonly extendedSalePrice?: number;
            /** @description the product type - physical or digital */
            readonly type?: string;
            /** @description URLs to download all product files. */
            readonly downloadFileUrls?: readonly string[];
            /** @description The URL for the combined downloads page. */
            readonly downloadPageUrl?: string;
            /** @description Specifies the combined download size in human-readable style; for example, `30MB`. */
            readonly downloadSize?: string;
            /** @description Categories the item belongs to. */
            readonly categories?: readonly Record<string, unknown>[];
        };
        /** Order Item Gift Certificate */
        readonly OrderItemGiftCertificate: {
            /** @description The itemʼs product name. */
            readonly name?: string;
            /**
             * Format: double
             * @description Quantity of this item.
             */
            readonly quantity?: number;
            /** @description Whether the item is taxable. */
            readonly isTaxable?: boolean;
            /**
             * Format: double
             * @description Price of the item
             */
            readonly amount?: number;
            /** @description Explicitly specifying the gift certificate type */
            readonly type?: string;
        };
        /** Address Response */
        readonly AddressResponse: components["schemas"]["AddressProperties"] & {
            readonly id?: string;
        };
        /** Address Properties */
        readonly AddressProperties: {
            readonly firstName?: string;
            readonly lastName?: string;
            readonly email?: string;
            readonly company?: string;
            readonly address1?: string;
            readonly address2?: string;
            readonly city?: string;
            /** @description Represents state or province. */
            readonly stateOrProvince?: string;
            readonly stateOrProvinceCode?: string;
            readonly country?: string;
            /** @description ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). */
            readonly countryCode: string;
            readonly postalCode?: string;
            readonly phone?: string;
            readonly customFields?: readonly components["schemas"]["CustomField"][];
        };
        /** Custom Field */
        readonly CustomField: {
            readonly fieldId?: string;
            /** @description This can also be an array for fields that need to support list of values; for example, a set of checkboxes. */
            readonly fieldValue?: string;
        };
        /**
         * Status
         * @description Order status.
         * @example INCOMPLETE
         * @enum {string}
         */
        readonly Status: "INCOMPLETE" | "PENDING" | "SHIPPED" | "PARTIALLY_SHIPPED" | "REFUNDED" | "CANCELLED" | "DECLINED" | "AWAITING_PAYMENT" | "AWAITING_PICKUP" | "AWAITING_SHIPMENT" | "COMPLETED" | "AWAITING_FULFILLMENT" | "MANUAL_VERIFICATION_REQUIRED" | "DISPUTED" | "PARTIALLY_REFUNDED";
        /** Base Item */
        readonly BaseItem: {
            /** @description The line-item ID. */
            readonly id?: string;
            /** @description Bundled items will have their parentʼs item ID. */
            readonly parentId?: string;
            /**
             * Format: double
             * @description ID of the variant.
             */
            readonly variantId?: number;
            /**
             * Format: double
             * @description ID of the product.
             */
            readonly productId?: number;
            /** @description SKU of the variant. */
            readonly sku?: string;
            /** @description The itemʼs product name. */
            readonly name?: string;
            /** @description The product URL. */
            readonly url?: string;
            /**
             * Format: double
             * @description Quantity of this item.
             */
            readonly quantity: number;
            /** @description Whether the item is taxable. */
            readonly isTaxable?: boolean;
            /** @description A publicly-accessible URL for an image of this item. */
            readonly imageUrl?: string;
            /** @description A list of discounts applied to this item, as an array of AppliedDiscount objects. */
            readonly discounts?: readonly components["schemas"]["AppliedDiscount"][];
            /**
             * Format: double
             * @description The total value of all discounts applied to this item (excluding coupon).
             */
            readonly discountAmount?: number;
            /**
             * Format: double
             * @description The total value of all coupons applied to this item.
             */
            readonly couponAmount?: number;
            /**
             * Format: double
             * @description The net item price before discounts and coupons. BigCommerce derives an item's list price from the product default price or, if applicable, the sale price configured in the admin panel.
             */
            readonly listPrice?: number;
            /**
             * Format: double
             * @description The itemʼs price after all discounts are applied. (The final price before tax calculation.)
             */
            readonly salePrice?: number;
            /**
             * Format: double
             * @description The itemʼs list price multiplied by the quantity.
             */
            readonly extendedListPrice?: number;
            /**
             * Format: double
             * @description The itemʼs sale price multiplied by the quantity.
             */
            readonly extendedSalePrice?: number;
            /** @description the product type - physical or digital */
            readonly type?: string;
        };
        readonly order_Nate: {
            readonly orderId?: number;
            readonly cartId?: string;
            readonly currency?: {
                readonly name?: string;
                readonly code?: string;
                readonly symbol?: string;
                readonly decimalPlaces?: number;
            };
            readonly isTaxIncluded?: boolean;
            readonly baseAmount?: number;
            readonly discountAmount?: number;
            readonly orderAmount?: number;
            readonly orderAmountAsInteger?: number;
            readonly shippingCostTotal?: number;
            readonly shippingCostBeforeDiscount?: number;
            readonly handlingCostTotal?: number;
            readonly coupons?: readonly Record<string, unknown>[];
            readonly lineItems?: {
                readonly physicalItems?: readonly {
                    readonly id?: number;
                    readonly productId?: number;
                    readonly name?: string;
                    readonly sku?: string;
                    readonly quantity?: number;
                    readonly isTaxable?: boolean;
                    readonly imageUrl?: string;
                    readonly discounts?: readonly Record<string, unknown>[];
                    readonly discountAmount?: number;
                    /** @description The product's brand. */
                    readonly brand?: string;
                    readonly listPrice?: number;
                    readonly salePrice?: number;
                    readonly extendedListPrice?: number;
                    readonly extendedSalePrice?: number;
                    readonly extendedComparisonPrice?: number;
                    readonly categories?: readonly Record<string, unknown>[];
                    readonly type?: string;
                    readonly variantId?: number;
                }[];
                readonly digitalItems?: readonly Record<string, unknown>[];
                readonly giftCertificates?: readonly Record<string, unknown>[];
            };
            readonly customerId?: number;
            readonly billingAddress?: {
                readonly firstName?: string;
                readonly lastName?: string;
                readonly email?: string;
                readonly company?: string;
                readonly address1?: string;
                readonly address2?: string;
                readonly city?: string;
                readonly stateOrProvince?: string;
                readonly stateOrProvinceCode?: string;
                readonly country?: string;
                readonly countryCode?: string;
                readonly postalCode?: string;
                readonly phone?: string;
                readonly customFields?: readonly Record<string, unknown>[];
            };
            readonly status?: string;
            readonly customerCanBeCreated?: boolean;
            readonly hasDigitalItems?: boolean;
            readonly isDownloadable?: boolean;
            readonly isComplete?: boolean;
            readonly customerMessage?: string;
            readonly taxes?: readonly {
                readonly name?: string;
                readonly amount?: number;
            }[];
            readonly taxTotal?: number;
        };
        /**
         * Consignments
         * @description All the consignments of the order.
         */
        readonly Consignments: {
            /** @description List of shipping consignments */
            readonly shipping?: readonly components["schemas"]["ShippingConsignment"][];
        };
        /**
         * ShippingConsignment
         * @description Shipping consignment
         */
        readonly ShippingConsignment: {
            readonly lineItems?: readonly components["schemas"]["ConsignmentLineItem"][];
            /** @example 1 */
            readonly shippingAddressId?: number;
            /** @example first1 */
            readonly firstName?: string;
            /** @example last1 */
            readonly lastName?: string;
            /** @example company1 */
            readonly company?: string;
            /** @example 2802 Skyway Cir */
            readonly address1?: string;
            /** @example Balcony */
            readonly address2?: string;
            /** @example Austin */
            readonly city?: string;
            /** @example Texas */
            readonly stateOrProvince?: string;
            /** @example 78704 */
            readonly postalCode?: string;
            /** @example United States */
            readonly country?: string;
            /** @example US */
            readonly countryCode?: string;
            /** @example first1@bigcommerce.com */
            readonly email?: string;
            /** @example 0410123452 */
            readonly phone?: string;
            /** @example 1 */
            readonly itemsTotal?: number;
            /** @example 0 */
            readonly itemsShipped?: number;
            /** @example Flat Rate */
            readonly shippingMethod?: string;
            /** @example 15.5 */
            readonly baseCost?: number;
            /** @example 15.5 */
            readonly costExTax?: number;
            /** @example 16.7 */
            readonly costIncTax?: number;
            /** @example 1.2 */
            readonly costTax?: number;
            /** @example 2 */
            readonly costTaxClassId?: number;
            /** @example 0 */
            readonly baseHandlingCost?: number;
            /** @example 0 */
            readonly handlingCostExTax?: number;
            /** @example 0 */
            readonly handlingCostIncTax?: number;
            /** @example 0 */
            readonly handlingCostTax?: number;
            /** @example 2 */
            readonly handlingCostTaxClassId?: number;
            /** @example 1 */
            readonly shippingZoneId?: number;
            /** @example United States */
            readonly shippingZoneName?: string;
            readonly customFields?: readonly components["schemas"]["ConsignmentFormField"][];
        };
        /** ConsignmentLineItem */
        readonly ConsignmentLineItem: {
            /** @example 4 */
            readonly id?: number;
        };
        /** ConsignmentFormField */
        readonly ConsignmentFormField: {
            /** @example special note */
            readonly name?: string;
            /** @example super rare */
            readonly value?: string | null;
        };
        /**
         * PickupConsignment
         * @description Pickup consignment
         */
        readonly PickupConsignment: {
            /** @example 3 */
            readonly id?: number;
            readonly lineItems?: readonly components["schemas"]["ConsignmentLineItem"][];
            /** @example 10 */
            readonly pickupMethodId?: number;
            /** @example Pickup Method 10: Pickup at Location 1 */
            readonly pickupMethodDisplayName?: string;
            /** @example Pickup Method 10 Collection Instructions */
            readonly collectionInstructions?: string;
            /** @example Pickup Method 10 Collection Time Description */
            readonly collectionTimeDescription?: string;
            readonly location?: components["schemas"]["PickupConsignmentLocation"];
        };
        /** PickupConsignmentLocation */
        readonly PickupConsignmentLocation: {
            /** @example 1 */
            readonly id?: number;
            /** @example Location 1 */
            readonly name?: string;
            /** @example 2802 Skyway Cir */
            readonly address1?: string;
            readonly address2?: string;
            /** @example Austin */
            readonly city?: string;
            /** @example Texas */
            readonly stateOrProvince?: string;
            /** @example 78704 */
            readonly postalCode?: string;
            /** @example United States */
            readonly country?: string;
            /** @example US */
            readonly countryCode?: string;
            /** @example loc1@bigcommerce.com */
            readonly email?: string;
            /** @example 0410123452 */
            readonly phone?: string;
        };
    };
    responses: {
        readonly order_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["Order"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getOrder: {
        readonly parameters: {
            readonly query?: {
                /** @description Sub-resources to include in an Order, in a comma-separated list. The ID and the specified fields will be returned. */
                readonly include?: readonly ("lineItems" | "billingAddress" | "coupons" | "currency" | "taxes" | "payments" | "consignments")[];
            };
            readonly header?: never;
            readonly path: {
                /** @description ID of an Order. */
                readonly orderId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
}
