/**
 * This file was auto-generated by openapi-typescript and ts-morph.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/content/widget-templates": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Widget Templates
         * @description Returns a list of **Widget Templates**.
         */
        readonly get: operations["getWidgetTemplates"];
        /**
         * Create a Widget Template
         * @description Creates a **Widget Template**.
         *
         *     ***Note:*** *There is a limit of 1000 custom widget templates per store.*
         *
         *     **Required Fields**
         *     * name
         *     * template
         */
        readonly post: operations["createWidgetTemplate"];
    };
    readonly "/content/widget-templates/{uuid}/preview": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Render a Widget Template
         * @description Render a widget template and return the widget html.
         */
        readonly post: operations["previewWidget"];
    };
    readonly "/content/widget-templates/{uuid}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The identifier for a specific template. */
                readonly uuid: components["parameters"]["TemplateUUID"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Widget Template
         * @description Returns a single **Widget Template**.
         */
        readonly get: operations["getWidgetTemplate"];
        /**
         * Update a Widget Template
         * @description Updates a **Widget Template**.
         */
        readonly put: operations["updateWidgetTemplate"];
        /**
         * Delete A Widget Template
         * @description Deletes a **Widget Template**.
         */
        readonly delete: operations["deleteWidgetTemplate"];
    };
    readonly "/content/widgets": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Widgets
         * @description Returns a list of **Widgets**. Optional parameters can be passed in.
         */
        readonly get: operations["getWidgets"];
        /**
         * Create a Widget
         * @description Creates a **Widget**.
         *
         *     **Note:** There is a limit of 100,000 widgets per store and 150 widgets per page. For more information, see [Store Limits](https://support.bigcommerce.com/s/article/Platform-Limits#storelimits).
         */
        readonly post: operations["createWidget"];
    };
    readonly "/content/widgets/{uuid}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The identifier for a specific widget. */
                readonly uuid: components["parameters"]["WidgetUUID"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Widget
         * @description Returns a single **Widget**.
         */
        readonly get: operations["getWidget"];
        /**
         * Update a Widget
         * @description Updates a **Widget**.
         */
        readonly put: operations["updateWidget"];
        /**
         * Delete a Widget
         * @description Deletes a **Widget**.
         */
        readonly delete: operations["deleteWidget"];
    };
    readonly "/content/placements": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get All Placements
         * @description Returns a list of **Placements**.
         */
        readonly get: operations["getPlacements"];
        /**
         * Create a Placement
         * @description Creates a **Placement**.
         *
         *     **Template Files**
         *
         *     To view the list of values accepted by the `template_file` property, including **custom** templates, see [Placements](/docs/storefront/widgets#placements).
         */
        readonly post: operations["createPlacement"];
    };
    readonly "/content/placements/{uuid}": {
        readonly parameters: {
            readonly query?: never;
            readonly header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The identifier for a specific placement. */
                readonly uuid: components["parameters"]["PlacementUUID"];
            };
            readonly cookie?: never;
        };
        /**
         * Get a Placement
         * @description Returns a single **Placement**.
         */
        readonly get: operations["getPlacement"];
        /**
         * Update a Placement
         * @description Updates a **Placement**.
         */
        readonly put: operations["updatePlacement"];
        /**
         * Delete a Placement
         * @description Deletes a **Placement**.
         */
        readonly delete: operations["deletePlacement"];
    };
    readonly "/content/regions": {
        readonly parameters: {
            readonly query?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get Theme Regions
         * @description Returns a list of unique **Theme Regions** in a file.
         */
        readonly get: operations["getContentRegions"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        readonly WidgetTemplatePreview: {
            /**
             * Format: json
             * @description The JSON data that populates the template.
             */
            readonly widget_configuration?: {
                readonly [key: string]: unknown;
            };
        };
        readonly WidgetTemplatePreviewResponse: {
            readonly data?: {
                /**
                 * Format: html
                 * @description The HTML render of the widget template.
                 */
                readonly html?: string;
            };
        };
        /** widgetTemplate_Put */
        readonly widgetTemplate_Put: components["schemas"]["widgetTemplate_Base"] & {
            /** @description Can be added to create a new widget template version instead of updating the current one. */
            readonly create_new_version?: boolean;
            /** @description The id of the channel on which to place this template. */
            readonly channel_id?: number;
        };
        /** widgetTemplate_Post */
        readonly widgetTemplate_Post: {
            /** @description User-friendly name. */
            readonly name: string;
            readonly schema?: components["schemas"]["widgetSchema"];
            /**
             * Format: html
             * @description Handlebars HTML content. Also has access to Stencil Paper helpers.
             */
            readonly template: string;
            /** @description The GraphQL Storefront API query that provides widget data. */
            readonly storefront_api_query?: string;
            /** @description The id of the channel on which to create this template. Defaults to the first channel created on the store. */
            readonly channel_id?: number;
        };
        /** widgetTemplate_Full */
        readonly widgetTemplate_Full: components["schemas"]["widgetTemplate_Base"] & {
            /**
             * Format: uuid
             * @description The primary identifier.
             */
            readonly uuid?: string;
            /** @description The kind of widget template. */
            readonly kind?: string;
            /**
             * Format: date-time
             * @description The date on which this object was initially created.
             */
            readonly date_created?: string;
            /**
             * Format: date-time
             * @description The date on which this object was last updated.
             */
            readonly date_modified?: string;
            /** @description The identifier to the current version of this widget template. */
            readonly current_version_uuid?: string;
            /**
             * @description A read-only value. Do not attempt to set or modify this value in a POST or PUT operation.
             * @default default
             */
            readonly icon_name: string;
        };
        /** widget_Full */
        readonly widget_Full: components["schemas"]["widget_Base"] & {
            /**
             * Format: uuid
             * @description The primary identifier.
             */
            readonly uuid?: string;
            readonly widget_template?: components["schemas"]["widgetTemplate_Full"];
            /**
             * Format: date-time
             * @description The date on which this object was initially created.
             */
            readonly date_created?: string;
            /**
             * Format: date-time
             * @description The date on which this object was last updated.
             */
            readonly date_modified?: string;
            /** @description The identifier of the widget template version associated with this widget. */
            readonly version_uuid?: string;
            /** @description The ID of the channel on which this widget exists. */
            readonly channel_id?: number;
        };
        /** widget_Post */
        readonly widget_Post: {
            /** @description User friendly name. */
            readonly name: string;
            /** @description The user-friendly description. */
            readonly description?: string;
            /**
             * Format: json
             * @description The JSON data that populates the template.
             */
            readonly widget_configuration?: {
                readonly [key: string]: unknown;
            };
            /** @description The widget template UUID. */
            readonly widget_template_uuid: string;
            /** @description The ID of the channel on which to create this widget. Defaults to the first channel created on the store. */
            readonly channel_id?: number;
        };
        /** widget_Put */
        readonly widget_Put: components["schemas"]["widget_Base"] & {
            /** @description The widget template UUID. */
            readonly widget_template_uuid?: string;
            readonly channel_id?: number;
            /** @description Upgrade the Widget to latest version of the WidgetTemplate. */
            readonly upgrade?: boolean;
        };
        /** placement_Post */
        readonly placement_Post: {
            /** @description A widget identifier. */
            readonly widget_uuid: string;
            /** @description The template file that you would like to target. */
            readonly template_file: string;
            /**
             * @description The id of the channel on which to create this placement. Defaults to the first channel created on the store.
             * @example 1
             */
            readonly channel_id?: number;
        } & components["schemas"]["placement_Base"];
        /** placement_Put */
        readonly placement_Put: {
            /** @description The template file that you would like to target. */
            readonly template_file?: string;
            /** @description A widget identifier. */
            readonly widget_uuid?: string;
            /** @description The ID of the channel on which this placement exists. */
            readonly channel_id?: number;
        } & components["schemas"]["placement_Base"];
        /** placement_Full */
        readonly placement_Full: {
            /**
             * Format: uuid
             * @description The primary identifier.
             */
            readonly uuid?: string;
            /** @description The template file that you would like to target. */
            readonly template_file?: string;
            /**
             * Format: date-time
             * @description The date on which this object was initially created.
             */
            readonly date_created?: string;
            /**
             * Format: date-time
             * @description The date on which this object was last updated.
             */
            readonly date_modified?: string;
            /** @description The ID of the channel on which this placement exists. */
            readonly channel_id?: number;
        } & components["schemas"]["placement_Base"] & {
            readonly widget?: components["schemas"]["widget_Full"];
        };
        /**
         * metaCollection
         * @description Data about the response, including pagination and collection totals.
         */
        readonly metaCollection: {
            readonly pagination?: components["schemas"]["pagination"];
        };
        /**
         * pagination
         * @description Data about the response, including pagination and collection totals.
         *
         */
        readonly pagination: {
            /** @description Total number of items in the result set.
             *      */
            readonly total?: number;
            /** @description Total number of items in the collection response.
             *      */
            readonly count?: number;
            /** @description The amount of items returned in the collection per page, controlled by the limit parameter.
             *      */
            readonly per_page?: number;
            /** @description The page you are currently on within the collection.
             *      */
            readonly current_page?: number;
            /** @description The total number of pages in the collection.
             *      */
            readonly total_pages?: number;
            /** @description Pagination links for the previous and next parts of the whole collection.
             *      */
            readonly links?: {
                /** @description Link to the previous page returned in the response.
                 *      */
                readonly previous?: string;
                /** @description Link to the current page returned in the response.
                 *      */
                readonly current?: string;
                /** @description Link to the next page returned in the response.
                 *      */
                readonly next?: string;
            };
        };
        readonly ErrorResponse: components["schemas"]["BaseError"] & {
            readonly errors?: components["schemas"]["DetailedErrors"];
        };
        /**
         * error_Base
         * @description Error payload for the BigCommerce API.
         */
        readonly error_Base: {
            /** @description The HTTP status code. */
            readonly status?: number;
            /** @description The error title describing the particular error. */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
            readonly errors?: Record<string, unknown>;
        };
        /** @description Error payload for the BigCommerce API.
         *      */
        readonly BaseError: {
            /** @description The HTTP status code.
             *      */
            readonly status?: number;
            /** @description The error title describing the particular error.
             *      */
            readonly title?: string;
            readonly type?: string;
            readonly instance?: string;
        };
        /** Detailed Errors */
        readonly DetailedErrors: {
            readonly [key: string]: unknown;
        };
        /** themeRegion */
        readonly themeRegion: {
            /** @description The region name. */
            readonly name?: string;
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        readonly Meta: {
            readonly [key: string]: unknown;
        };
        /** placement_Base */
        readonly placement_Base: {
            /** @description The identifier of a page you would like to target. For product pages, choose product ID. For category pages, choose category ID. Home page does not support `entity_id`. */
            readonly entity_id?: string;
            /** @description The sort order to control the position of a content widget in a region. */
            readonly sort_order?: number;
            /** @description The name of the region in which to insert content widgets. */
            readonly region?: string;
            /**
             * @description Sets the placement as either inactive or active.
             * @default inactive
             * @enum {string}
             */
            readonly status: "inactive" | "active";
        };
        /** widgetTemplate_Base */
        readonly widgetTemplate_Base: {
            /** @description The user-friendly name. */
            readonly name?: string;
            readonly schema?: components["schemas"]["widgetSchema"];
            /**
             * Format: html
             * @description The widget template HTML. Supports Handlebars and Paper helpers.
             */
            readonly template?: string;
            /** @description The GraphQL Storefront API query that provides widget data. */
            readonly storefront_api_query?: string;
        };
        /** widget_Base */
        readonly widget_Base: {
            /** @description The user-friendly name. */
            readonly name?: string;
            /** @description The user-friendly description. */
            readonly description?: string;
            /**
             * Format: json
             * @description The JSON data that populates the template.
             */
            readonly widget_configuration?: {
                readonly [key: string]: unknown;
            };
        };
        readonly "new-model": readonly {
            readonly type?: string;
            readonly label?: string;
            readonly id?: string;
            readonly default?: number;
            readonly typeMeta?: string;
            readonly conditional?: components["schemas"]["widgetSchemaConditional"];
        }[];
        /**
         * widgetSchemaTab
         * @description **Tab.** Use the **tab** settings type to create settings visible in Page Builder.
         */
        readonly widgetSchemaTab: {
            /**
             * @description The type of setting component to display.
             * @enum {string}
             */
            readonly type?: "tab";
            /**
             * @description The user-friendly message to inform the user how this setting will be used.
             * @example Content
             */
            readonly label?: string;
            /** @description Groups of related settings. */
            readonly sections?: readonly {
                /**
                 * @description The user-friendly message to inform the user how this setting will be used.
                 * @example Product
                 */
                readonly label?: string;
                /** @description For examples of schema settings, see [Widget UI Input Types](/docs/storefront/widgets/input-reference/settings). */
                readonly settings?: readonly {
                    /**
                     * @description The type of setting component to display. You can view the list of elements below to discover which are available to use.
                     *
                     *     For examples of each type of setting, see [Page Builder > Schema Settings](/docs/storefront/widgets/input-reference/settings#alignment) in Theme Docs.
                     * @enum {string}
                     */
                    readonly type?: "alignment" | "boolean" | "boxModel" | "code" | "color" | "imageManager" | "input" | "number" | "productId" | "productImage" | "range" | "regexInput" | "select" | "text" | "toggle";
                    /** @description The user friendly message to inform the user how this setting will be used. */
                    readonly label?: string;
                    /** @description The variable name where the setting value will be available in the widget template. */
                    readonly id?: string;
                    /** @description The default value to use when rendering the widget for the first time. Make sure to set sensible defaults to make your widget easier to use. */
                    readonly default?: string;
                    /** @description Additional information needed based on the selected setting type. */
                    readonly typeMeta?: {
                        readonly selectOptions?: readonly {
                            /** @example Image */
                            readonly label?: string;
                            /** @example image */
                            readonly value?: string;
                        }[];
                    };
                    /**
                     * widgetSchemaConditional
                     * @description An optional property that can be added to each setting to control whether it should be displayed to the user while editing in Page Builder. This does not clear the value in the setting, just controls the display of the setting.
                     */
                    readonly conditional?: {
                        /**
                         * @description The ID of the `settings` object the conditional attribute is related to. The key must be defined within the same settings array as the conditional property. This ensures the conditional logic is scoped to the relevant settings group.
                         * @example backgroundType
                         */
                        readonly key?: string;
                        /**
                         * @description Specifies the operation used to determine whether to display the setting. The `IN` operator is currently the only supported operator. The setting will be displayed if the conditional’s `value` property is equal to the selected value of the `selectOptions`.
                         * @example IN
                         */
                        readonly operator?: string;
                        /** @description A single-object array containing a value from the `typeMeta`'s `selectOptions`. */
                        readonly value?: readonly unknown[];
                    };
                }[];
            }[];
        };
        /** widgetSchemaTabSections */
        readonly widgetSchemaTabSections: {
            readonly label?: string;
            /** @description For examples of each type of setting, see [Page Builder > Schema Settings](/docs/storefront/widgets/input-reference/settings#alignment) in Theme Docs. */
            readonly settings?: readonly components["schemas"]["widgetSchemaSetting_Base"][];
        };
        /**
         * widgetSchemaArray
         * @description **Array.** Use the **array** settings type to build collections of elements within the widget. Each element in the array can contain tabs, sections, and an entire schema.
         */
        readonly widgetSchemaArray: {
            /** @enum {string} */
            readonly type?: "array";
            readonly label?: string;
            readonly id?: string;
            /** @description number of elements in the list to display by default. */
            readonly defaultCount?: number;
            /** @description name for each element in the list */
            readonly entryLabel?: string;
            /** @description used to display an image stored at the specified attribute name */
            readonly thumbnail?: {
                /** @example image */
                readonly type?: string;
                /** @example imageUrl.src */
                readonly valueKey?: string;
            };
            /** @description The schema used for each element in the array. */
            readonly schema?: readonly (components["schemas"]["widgetSchemaHidden"] | components["schemas"]["widgetSchemaTab"])[];
        };
        /**
         * widgetSchemaSetting_Base
         * @description For examples of each type of setting, see [Page Builder > Schema Settings](/docs/storefront/widgets/input-reference/settings#alignment) in Theme Docs.
         */
        readonly widgetSchemaSetting_Base: {
            /**
             * @description The type of setting component to display. You can view the list of elements below to discover which are available to use.
             *
             *     For examples of each type of setting, see [Page Builder > Schema Settings](/docs/storefront/widgets/input-reference/settings#alignment) in Theme Docs.
             * @enum {string}
             */
            readonly type?: "alignment" | "boolean" | "boxModel" | "code" | "color" | "imageManager" | "input" | "number" | "productId" | "productImage" | "range" | "regexInput" | "select" | "text" | "toggle";
            /** @description The user friendly message to inform the user how this setting will be used. */
            readonly label?: string;
            /** @description The variable name where the setting value will be available in the widget template. */
            readonly id?: string;
            /** @description The default value to use when rendering the widget for the first time. Make sure to set sensible defaults to make your widget easier to use. */
            readonly default?: string;
            /** @description Additional information needed based on the selected setting type. */
            readonly typeMeta?: {
                readonly selectOptions?: readonly {
                    /** @example Image */
                    readonly label?: string;
                    /** @example image */
                    readonly value?: string;
                }[];
            };
            readonly conditional?: components["schemas"]["widgetSchemaConditional"];
        };
        /** @description The schema for the widget’s merchant-facing UI. For more information on the available schema settings, see [Widget UI Schema](/docs/storefront/widgets/input-reference/schema).  */
        readonly widgetSchema: readonly (components["schemas"]["widgetSchemaTab"] | components["schemas"]["widgetSchemaArray"] | components["schemas"]["widgetSchemaHidden"])[];
        /**
         * widgetSchemaHidden
         * @description **Hidden.** Use the **hidden** settings type to create controls that have no user interface drawn in Page Builder. Hidden settings are not grouped into any other tabs or arrays.
         */
        readonly widgetSchemaHidden: {
            /**
             * @example hidden
             * @enum {string}
             */
            readonly type?: "hidden";
            readonly settings?: readonly {
                /**
                 * @description The type of setting component to display. You can view the list of elements below to discover which are available to use.
                 *
                 *     For examples of each type of setting, see [Page Builder > Schema Settings](/docs/storefront/widgets/input-reference/settings#alignment) in Theme Docs.
                 * @enum {string}
                 */
                readonly type?: "alignment" | "boolean" | "boxModel" | "code" | "color" | "imageManager" | "input" | "number" | "productId" | "productImage" | "range" | "regexInput" | "select" | "text" | "toggle";
                /** @description The user friendly message to inform the user how this setting will be used. */
                readonly label?: string;
                /** @description The variable name where the setting value will be available in the widget template. */
                readonly id?: string;
                /** @description The default value to use when rendering the widget for the first time. Make sure to set sensible defaults to make your widget easier to use. */
                readonly default?: string;
                /** @description Additional information needed based on the selected setting type. */
                readonly typeMeta?: {
                    readonly selectOptions?: readonly {
                        /** @example Image */
                        readonly label?: string;
                        /** @example image */
                        readonly value?: string;
                    }[];
                };
                /**
                 * widgetSchemaConditional
                 * @description An optional property that can be added to each setting to control whether it should be displayed to the user while editing in Page Builder. This does not clear the value in the setting, just controls the display of the setting.
                 */
                readonly conditional?: {
                    /**
                     * @description The ID of the `settings` object the conditional attribute is related to. You must define the key within the same settings array as the conditional property to scope the conditional logic to the relevant settings group.
                     * @example backgroundType
                     */
                    readonly key?: string;
                    /**
                     * @description Specifies the operation used to determine whether to display the setting. The `IN` operator is currently the only supported operator. The setting will be displayed if the conditional’s `value` property is equal to the selected value of the `selectOptions`.
                     * @example IN
                     */
                    readonly operator?: string;
                    /** @description A single-object array containing a value from the `typeMeta`'s `selectOptions`. */
                    readonly value?: readonly unknown[];
                };
            }[];
        };
        /** widgetSchemaTabSectionsSettings */
        readonly widgetSchemaTabSectionsSettings: Record<string, unknown>;
        /**
         * widgetSchemaConditional
         * @description An optional property that can be added to each setting to control whether it should be displayed to the user while editing in Page Builder. This does not clear the value in the setting, just controls the display of the setting.
         */
        readonly widgetSchemaConditional: {
            /**
             * @description The ID of the `settings` object the conditional attribute is related to. You must define the key within the same settings array as the conditional property to scope the conditional logic to the relevant settings group.
             * @example backgroundType
             */
            readonly key?: string;
            /**
             * @description Specifies the operation used to determine whether to display the setting. The `IN` operator is currently the only supported operator. The setting will be displayed if the conditional’s `value` property is equal to the selected value of the `selectOptions`.
             * @example IN
             */
            readonly operator?: string;
            /** @description A single-object array containing a value from the `typeMeta`'s `selectOptions`. */
            readonly value?: readonly unknown[];
        };
    };
    responses: {
        readonly ThemeRegions_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["themeRegion"][];
                    readonly meta?: components["schemas"]["Meta"];
                };
            };
        };
        readonly LayoutCollectionResponse: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: readonly {
                        /**
                         * Format: uuid
                         * @description The primary identifier.
                         */
                        readonly uuid?: string;
                        /** @description The specific instance of a page */
                        readonly entity_id?: string;
                        /** @description The page template name. */
                        readonly template_file?: string;
                        /** @description The name of the region defined in the Stencil theme file. */
                        readonly region?: string;
                        /** @description The HTML layout which defines complex positioning for placements. */
                        readonly markup?: string;
                        /**
                         * Format: date-time
                         * @description The date on which this object was initially created.
                         */
                        readonly date_created?: string;
                        /**
                         * Format: date-time
                         * @description The date on which this object was last updated.
                         */
                        readonly date_modified?: string;
                    }[];
                    /**
                     * Collection Meta
                     * @description Data about the response, including pagination and collection totals.
                     */
                    readonly meta?: {
                        /** @description Data about the response, including pagination and collection totals.
                         *      */
                        readonly pagination?: {
                            /** @description Total number of items in the result set.
                             *      */
                            readonly total?: number;
                            /** @description Total number of items in the collection response.
                             *      */
                            readonly count?: number;
                            /** @description The amount of items returned in the collection per page, controlled by the limit parameter.
                             *      */
                            readonly per_page?: number;
                            /** @description The page you are currently on within the collection.
                             *      */
                            readonly current_page?: number;
                            /** @description The total number of pages in the collection.
                             *      */
                            readonly total_pages?: number;
                            /** @description Pagination links for the previous and next parts of the whole collection.
                             *      */
                            readonly links?: {
                                /** @description Link to the previous page returned in the response.
                                 *      */
                                readonly previous?: string;
                                /** @description Link to the current page returned in the response.
                                 *      */
                                readonly current?: string;
                                /** @description Link to the next page returned in the response.
                                 *      */
                                readonly next?: string;
                            };
                        };
                    };
                };
            };
        };
        readonly LayoutResponse: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: readonly {
                        /**
                         * Format: uuid
                         * @description The primary identifier.
                         */
                        readonly uuid?: string;
                        /** @description The specific instance of a page */
                        readonly entity_id?: string;
                        /** @description The page template name. */
                        readonly template_file?: string;
                        /** @description The name of the region defined in the Stencil theme file. */
                        readonly region?: string;
                        /** @description The HTML layout which defines complex positioning for placements. */
                        readonly markup?: string;
                        /**
                         * Format: date-time
                         * @description The date on which this object was initially created.
                         */
                        readonly date_created?: string;
                        /**
                         * Format: date-time
                         * @description The date on which this object was last updated.
                         */
                        readonly date_modified?: string;
                    }[];
                };
            };
        };
        readonly PlacementsCollection_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["placement_Full"][];
                    readonly meta?: components["schemas"]["metaCollection"];
                };
            };
        };
        readonly Placement_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["placement_Full"];
                    readonly meta?: components["schemas"]["Meta"];
                };
            };
        };
        readonly WidgetTemplateCollection_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["widgetTemplate_Full"][];
                    readonly meta?: components["schemas"]["metaCollection"];
                };
            };
        };
        readonly WidgetTemplate_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["widgetTemplate_Full"];
                    readonly meta?: components["schemas"]["Meta"];
                };
            };
        };
        readonly WidgetCollection_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: readonly components["schemas"]["widget_Full"][];
                    readonly meta?: components["schemas"]["metaCollection"];
                };
            };
        };
        readonly Widget_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    readonly data?: components["schemas"]["widget_Full"];
                    readonly meta?: components["schemas"]["Meta"];
                };
            };
        };
        /** @description This is the result of missing required fields, or of invalid data. See the response for more details.
         *      */
        readonly Error422_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Base"];
            };
        };
        /** @description The resource was not found. */
        readonly Error404_Resp: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["error_Base"];
            };
        };
    };
    parameters: {
        /** @description The channel ID. */
        readonly ChannelID: string;
        /** @description The identifier for a specific template. */
        readonly TemplateUUID: string;
        /** @description The identifier for a specific widget template. */
        readonly FilterWidgetTemplateUUIDParam: string;
        /** @description The kind of widget template. */
        readonly FilterWidgetTemplateKindParam: string;
        /** @description The URL-encoded name of the widget. */
        readonly FilterWidgetNameParam: string;
        /** @description The template file, for example: `pages/home`. */
        readonly FilterTemplateFileParam: string;
        /** @description The template file, for example: `templateFile=pages/home`. */
        readonly RequiredTemplateFile: string;
        /** @description The identifier for a specific layout. */
        readonly LayoutUUID: string;
        /** @description The identifier for a specific placement. */
        readonly PlacementUUID: string;
        /** @description The identifier for a specific widget. */
        readonly WidgetUUID: string;
        /** @description The identifier for a specific widget. */
        readonly FilterWidgetUUIDParam: string;
        /** @description Specifies the page number in a limited (paginated) list of products.
         *      */
        readonly PageParam: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products.
         *      */
        readonly LimitParam: number;
        /** @description This is an optional query parameter used to fetch a specific widget template version. */
        readonly FilterVersionUUID: string;
        /** @description The query string associated with a widget's name and description.
         *      */
        readonly QueryWidgetsParam: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        readonly Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        readonly ContentType: string;
        /** @description A comma-separated list of channel ids to filter the results by. */
        readonly ChannelIdInParam: readonly number[];
        /** @description A comma-separated list of site IDs to filter the results by. */
        readonly SiteIdInParam: readonly number[];
        /** @description Use to pass in comma-separated list of widget names. Example: `/widgets?name:in=test-widget-name,header%20images` */
        readonly NameInParam: readonly string[];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    readonly getWidgetTemplates: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description The kind of widget template. */
                readonly widget_template_kind?: components["parameters"]["FilterWidgetTemplateKindParam"];
                /** @description A comma-separated list of channel ids to filter the results by. */
                readonly "channel_id:in"?: components["parameters"]["ChannelIdInParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["WidgetTemplateCollection_Resp"];
            readonly 422: components["responses"]["Error422_Resp"];
        };
    };
    readonly createWidgetTemplate: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["widgetTemplate_Post"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["WidgetTemplate_Resp"];
            readonly 422: components["responses"]["Error422_Resp"];
        };
    };
    readonly previewWidget: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description The identifier for a specific template. */
                readonly uuid: components["parameters"]["TemplateUUID"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["WidgetTemplatePreview"];
            };
        };
        readonly responses: {
            /** @description Success */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["WidgetTemplatePreviewResponse"];
                };
            };
            /** @description Not Found */
            readonly 404: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            readonly 422: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    readonly getWidgetTemplate: {
        readonly parameters: {
            readonly query?: {
                /** @description This is an optional query parameter used to fetch a specific widget template version. */
                readonly version_uuid?: components["parameters"]["FilterVersionUUID"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The identifier for a specific template. */
                readonly uuid: components["parameters"]["TemplateUUID"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["WidgetTemplate_Resp"];
            readonly 404: components["responses"]["Error404_Resp"];
            readonly 422: components["responses"]["Error422_Resp"];
        };
    };
    readonly updateWidgetTemplate: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The identifier for a specific template. */
                readonly uuid: components["parameters"]["TemplateUUID"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["widgetTemplate_Put"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["WidgetTemplate_Resp"];
            readonly 404: components["responses"]["Error404_Resp"];
            readonly 422: components["responses"]["Error422_Resp"];
        };
    };
    readonly deleteWidgetTemplate: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The identifier for a specific template. */
                readonly uuid: components["parameters"]["TemplateUUID"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description An empty response. */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 404: components["responses"]["Error404_Resp"];
            readonly 422: components["responses"]["Error422_Resp"];
        };
    };
    readonly getWidgets: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description The kind of widget template. */
                readonly widget_template_kind?: components["parameters"]["FilterWidgetTemplateKindParam"];
                /** @description The identifier for a specific widget template. */
                readonly widget_template_uuid?: components["parameters"]["FilterWidgetTemplateUUIDParam"];
                /** @description The URL-encoded name of the widget. */
                readonly name?: components["parameters"]["FilterWidgetNameParam"];
                /** @description Use to pass in comma-separated list of widget names. Example: `/widgets?name:in=test-widget-name,header%20images` */
                readonly "name:in"?: components["parameters"]["NameInParam"];
                /** @description A comma-separated list of channel ids to filter the results by. */
                readonly "channel_id:in"?: components["parameters"]["ChannelIdInParam"];
                /** @description A comma-separated list of site IDs to filter the results by. */
                readonly "site_id:in"?: components["parameters"]["SiteIdInParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["WidgetCollection_Resp"];
            readonly 422: components["responses"]["Error422_Resp"];
        };
    };
    readonly createWidget: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["widget_Post"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["Widget_Resp"];
            readonly 422: components["responses"]["Error422_Resp"];
        };
    };
    readonly getWidget: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The identifier for a specific widget. */
                readonly uuid: components["parameters"]["WidgetUUID"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["Widget_Resp"];
            readonly 404: components["responses"]["Error404_Resp"];
            readonly 422: components["responses"]["Error422_Resp"];
        };
    };
    readonly updateWidget: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The identifier for a specific widget. */
                readonly uuid: components["parameters"]["WidgetUUID"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["widget_Put"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["Widget_Resp"];
            readonly 404: components["responses"]["Error404_Resp"];
            readonly 422: components["responses"]["Error422_Resp"];
        };
    };
    readonly deleteWidget: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The identifier for a specific widget. */
                readonly uuid: components["parameters"]["WidgetUUID"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description An empty response. */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 404: components["responses"]["Error404_Resp"];
            readonly 422: components["responses"]["Error422_Resp"];
        };
    };
    readonly getPlacements: {
        readonly parameters: {
            readonly query?: {
                /** @description Specifies the page number in a limited (paginated) list of products.
                 *      */
                readonly page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                readonly limit?: components["parameters"]["LimitParam"];
                /** @description The kind of widget template. */
                readonly widget_template_kind?: components["parameters"]["FilterWidgetTemplateKindParam"];
                /** @description The template file, for example: `pages/home`. */
                readonly template_file?: components["parameters"]["FilterTemplateFileParam"];
                /** @description The identifier for a specific widget. */
                readonly widget_uuid?: components["parameters"]["FilterWidgetUUIDParam"];
                /** @description The identifier for a specific widget template. */
                readonly widget_template_uuid?: components["parameters"]["FilterWidgetTemplateUUIDParam"];
                /** @description A comma-separated list of channel ids to filter the results by. */
                readonly "channel_id:in"?: components["parameters"]["ChannelIdInParam"];
                /** @description A comma-separated list of site IDs to filter the results by. */
                readonly "site_id:in"?: components["parameters"]["SiteIdInParam"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["PlacementsCollection_Resp"];
            readonly 422: components["responses"]["Error422_Resp"];
        };
    };
    readonly createPlacement: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["placement_Post"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["Placement_Resp"];
            readonly 422: components["responses"]["Error422_Resp"];
        };
    };
    readonly getPlacement: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The identifier for a specific placement. */
                readonly uuid: components["parameters"]["PlacementUUID"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["Placement_Resp"];
            readonly 404: components["responses"]["Error404_Resp"];
            readonly 422: components["responses"]["Error422_Resp"];
        };
    };
    readonly updatePlacement: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                readonly "Content-Type"?: components["parameters"]["ContentType"];
            };
            readonly path: {
                /** @description The identifier for a specific placement. */
                readonly uuid: components["parameters"]["PlacementUUID"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["placement_Put"];
            };
        };
        readonly responses: {
            readonly 200: components["responses"]["Placement_Resp"];
            readonly 404: components["responses"]["Error404_Resp"];
            readonly 422: components["responses"]["Error422_Resp"];
        };
    };
    readonly deletePlacement: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path: {
                /** @description The identifier for a specific placement. */
                readonly uuid: components["parameters"]["PlacementUUID"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description An empty response. */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 404: components["responses"]["Error404_Resp"];
            readonly 422: components["responses"]["Error422_Resp"];
        };
    };
    readonly getContentRegions: {
        readonly parameters: {
            readonly query: {
                /** @description The template file, for example: `templateFile=pages/home`. */
                readonly template_file: components["parameters"]["RequiredTemplateFile"];
                /** @description The channel ID. */
                readonly channel_id?: components["parameters"]["ChannelID"];
            };
            readonly header?: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                readonly Accept?: components["parameters"]["Accept"];
            };
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: components["responses"]["ThemeRegions_Resp"];
            readonly 404: components["responses"]["Error404_Resp"];
            readonly 422: components["responses"]["Error422_Resp"];
        };
    };
}
